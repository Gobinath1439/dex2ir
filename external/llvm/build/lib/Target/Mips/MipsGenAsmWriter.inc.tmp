/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Assembly Writer Source Fragment                                             *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void MipsInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const uint32_t OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    3333U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    3326U,	// BUNDLE
    3343U,	// LIFETIME_START
    3313U,	// LIFETIME_END
    5456U,	// ABSQ_S_PH
    4530U,	// ABSQ_S_QB
    7093U,	// ABSQ_S_W
    4199358U,	// ADD
    4199565U,	// ADDQH_PH
    4199682U,	// ADDQH_R_PH
    4201297U,	// ADDQH_R_W
    4201241U,	// ADDQH_W
    4199639U,	// ADDQ_PH
    4199738U,	// ADDQ_S_PH
    4201377U,	// ADDQ_S_W
    4198994U,	// ADDSC
    4198702U,	// ADDUH_QB
    4198810U,	// ADDUH_R_QB
    4199837U,	// ADDU_PH
    4198915U,	// ADDU_QB
    4199782U,	// ADDU_S_PH
    4198856U,	// ADDU_S_QB
    4199001U,	// ADDWC
    4199358U,	// ADD_MM
    4200044U,	// ADDi
    4200044U,	// ADDi_MM
    4201060U,	// ADDiu
    4201060U,	// ADDiu_MM
    4201041U,	// ADDu
    4201041U,	// ADDu_MM
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    4199380U,	// AND
    4199380U,	// AND64
    4199380U,	// AND_MM
    71308914U,	// ANDi
    71308914U,	// ANDi64
    71308914U,	// ANDi_MM
    4199394U,	// APPEND
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I16_P8
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I32_P8
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I64_P8
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_CMP_SWAP_I8_P8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I16_P8
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I32_P8
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I64_P8
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_ADD_I8_P8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I16_P8
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I32_P8
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I64_P8
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_AND_I8_P8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I16_P8
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I32_P8
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I64_P8
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_NAND_I8_P8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I16_P8
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I32_P8
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I64_P8
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_OR_I8_P8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I16_P8
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I32_P8
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I64_P8
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_SUB_I8_P8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I16_P8
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I32_P8
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I64_P8
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_LOAD_XOR_I8_P8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I16_P8
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I32_P8
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I64_P8
    0U,	// ATOMIC_SWAP_I8
    0U,	// ATOMIC_SWAP_I8_P8
    6756U,	// AddiuRxImmX16
    39524U,	// AddiuRxPcImmX16
    8919652U,	// AddiuRxRxImm16
    531044U,	// AddiuRxRxImmX16
    1055332U,	// AddiuRxRyOffMemX16
    72868U,	// AddiuSpImm16
    105636U,	// AddiuSpImmX16
    4201041U,	// AdduRxRyRz16
    529364U,	// AndRxRxRy16
    102637U,	// B
    4200317U,	// BALIGN
    0U,	// BAL_BR
    5128U,	// BC1F
    6688U,	// BC1T
    4200457U,	// BEQ
    4200457U,	// BEQ64
    7181U,	// BGEZ
    7181U,	// BGEZ64
    5824U,	// BGEZAL
    7225U,	// BGTZ
    7225U,	// BGTZ64
    6796U,	// BITREV
    7187U,	// BLEZ
    7187U,	// BLEZ64
    7231U,	// BLTZ
    7231U,	// BLTZ64
    5832U,	// BLTZAL
    4199406U,	// BNE
    4199406U,	// BNE64
    102523U,	// BPOSGE32
    0U,	// BPOSGE32_PSEUDO
    5794U,	// BREAK
    12590124U,	// BeqzRxImm16
    7212U,	// BeqzRxImmX16
    102637U,	// BimmX16
    12590105U,	// BnezRxImm16
    7193U,	// BnezRxImmX16
    3305U,	// Break16
    16783284U,	// BteqzT8CmpX16
    16782984U,	// BteqzT8CmpiX16
    16783910U,	// BteqzT8SltX16
    16782996U,	// BteqzT8SltiX16
    16783979U,	// BteqzT8SltiuX16
    16783986U,	// BteqzT8SltuX16
    105522U,	// BteqzX16
    20977588U,	// BtnezT8CmpX16
    20977288U,	// BtnezT8CmpiX16
    20978214U,	// BtnezT8SltX16
    20977300U,	// BtnezT8SltiX16
    20978283U,	// BtnezT8SltiuX16
    20978290U,	// BtnezT8SltuX16
    105503U,	// BtnezX16
    0U,	// BuildPairF64
    4819U,	// CEIL_L_D64
    6468U,	// CEIL_L_S
    5010U,	// CEIL_W_D32
    5010U,	// CEIL_W_D64
    6650U,	// CEIL_W_S
    4131U,	// CFC1
    6028U,	// CLO
    7207U,	// CLZ
    4198748U,	// CMPGDU_EQ_QB
    4198653U,	// CMPGDU_LE_QB
    4198867U,	// CMPGDU_LT_QB
    4198762U,	// CMPGU_EQ_QB
    4198667U,	// CMPGU_LE_QB
    4198881U,	// CMPGU_LT_QB
    4471U,	// CMPU_EQ_QB
    4376U,	// CMPU_LE_QB
    4590U,	// CMPU_LT_QB
    5344U,	// CMP_EQ_PH
    5240U,	// CMP_LE_PH
    5513U,	// CMP_LT_PH
    139312U,	// CTC1
    6353U,	// CVT_D32_S
    6856U,	// CVT_D32_W
    5801U,	// CVT_D64_L
    6353U,	// CVT_D64_S
    6856U,	// CVT_D64_W
    4840U,	// CVT_L_D64
    6489U,	// CVT_L_S
    4907U,	// CVT_S_D32
    4907U,	// CVT_S_D64
    5810U,	// CVT_S_L
    7044U,	// CVT_S_W
    5031U,	// CVT_W_D32
    5031U,	// CVT_W_D64
    6671U,	// CVT_W_S
    4881U,	// C_EQ_D32
    4881U,	// C_EQ_D64
    6530U,	// C_EQ_S
    4767U,	// C_F_D32
    4767U,	// C_F_D64
    6416U,	// C_F_S
    4731U,	// C_LE_D32
    4731U,	// C_LE_D64
    6380U,	// C_LE_S
    4932U,	// C_LT_D32
    4932U,	// C_LT_D64
    6572U,	// C_LT_S
    4722U,	// C_NGE_D32
    4722U,	// C_NGE_D64
    6371U,	// C_NGE_S
    4739U,	// C_NGLE_D32
    4739U,	// C_NGLE_D64
    6388U,	// C_NGLE_S
    4849U,	// C_NGL_D32
    4849U,	// C_NGL_D64
    6498U,	// C_NGL_S
    4923U,	// C_NGT_D32
    4923U,	// C_NGT_D64
    6563U,	// C_NGT_S
    4749U,	// C_OLE_D32
    4749U,	// C_OLE_D64
    6398U,	// C_OLE_S
    4940U,	// C_OLT_D32
    4940U,	// C_OLT_D64
    6580U,	// C_OLT_S
    4889U,	// C_SEQ_D32
    4889U,	// C_SEQ_D64
    6538U,	// C_SEQ_S
    4774U,	// C_SF_D32
    4774U,	// C_SF_D64
    6423U,	// C_SF_S
    4898U,	// C_UEQ_D32
    4898U,	// C_UEQ_D64
    6547U,	// C_UEQ_S
    4758U,	// C_ULE_D32
    4758U,	// C_ULE_D64
    6407U,	// C_ULE_S
    4949U,	// C_ULT_D32
    4949U,	// C_ULT_D64
    6589U,	// C_ULT_S
    4865U,	// C_UN_D32
    4865U,	// C_UN_D64
    6514U,	// C_UN_S
    6068U,	// CmpRxRy16
    25171592U,	// CmpiRxImm16
    5768U,	// CmpiRxImmX16
    105654U,	// Constant32
    4199357U,	// DADD
    4200043U,	// DADDi
    4201059U,	// DADDiu
    4201040U,	// DADDu
    6027U,	// DCLO
    7206U,	// DCLZ
    3381U,	// DERET
    205528274U,	// DEXT
    205528261U,	// DEXTM
    205528287U,	// DEXTU
    205528268U,	// DINS
    205528254U,	// DINSM
    205528280U,	// DINSU
    71307273U,	// DMFC0_3OP64
    4137U,	// DMFC1
    71307413U,	// DMFC2_3OP64
    12304U,	// DMTC0_3OP64
    139318U,	// DMTC1
    12444U,	// DMTC2_3OP64
    6699U,	// DMULT
    6776U,	// DMULTu
    4199896U,	// DPAQX_SA_W_PH
    4199979U,	// DPAQX_S_W_PH
    4201250U,	// DPAQ_SA_L_W
    4199938U,	// DPAQ_S_W_PH
    4200144U,	// DPAU_H_QBL
    4200467U,	// DPAU_H_QBR
    4200017U,	// DPAX_W_PH
    4199886U,	// DPA_W_PH
    4199911U,	// DPSQX_SA_W_PH
    4199993U,	// DPSQX_S_W_PH
    4201263U,	// DPSQ_SA_L_W
    4199966U,	// DPSQ_S_W_PH
    4200156U,	// DPSU_H_QBL
    4200479U,	// DPSU_H_QBR
    4200028U,	// DPSX_W_PH
    4200007U,	// DPS_W_PH
    4200624U,	// DROTR
    4201146U,	// DROTRV
    5166U,	// DSBH
    7319U,	// DSDIV
    5065U,	// DSHD
    4200290U,	// DSLL
    4198533U,	// DSLL32
    29366114U,	// DSLL64_32
    4201108U,	// DSLLV
    4198629U,	// DSRA
    4198515U,	// DSRA32
    4201093U,	// DSRAV
    4200296U,	// DSRL
    4198541U,	// DSRL32
    4201115U,	// DSRLV
    4201026U,	// DSUBu
    7305U,	// DUDIV
    7320U,	// DivRxRy16
    7306U,	// DivuRxRy16
    3382U,	// ERET
    205528275U,	// EXT
    71309315U,	// EXTP
    71309220U,	// EXTPDP
    4201130U,	// EXTPDPV
    4201139U,	// EXTPV
    4201440U,	// EXTRV_RS_W
    4201329U,	// EXTRV_R_W
    4199459U,	// EXTRV_S_H
    4201452U,	// EXTRV_W
    71310293U,	// EXTR_RS_W
    71310172U,	// EXTR_R_W
    71308313U,	// EXTR_S_H
    71310204U,	// EXTR_W
    0U,	// ExtractElementF64
    4916U,	// FABS_D32
    4916U,	// FABS_D64
    6556U,	// FABS_S
    4199019U,	// FADD_D32
    4199019U,	// FADD_D64
    4200668U,	// FADD_S
    183526U,	// FCMP_D32
    183526U,	// FCMP_D64
    216294U,	// FCMP_S32
    4199278U,	// FDIV_D32
    4199278U,	// FDIV_D64
    4200918U,	// FDIV_S
    4829U,	// FLOOR_L_D64
    6478U,	// FLOOR_L_S
    5020U,	// FLOOR_W_D32
    5020U,	// FLOOR_W_D64
    6660U,	// FLOOR_W_S
    4981U,	// FMOV_D32
    4981U,	// FMOV_D64
    6621U,	// FMOV_S
    4199162U,	// FMUL_D32
    4199162U,	// FMUL_D64
    4200811U,	// FMUL_S
    4790U,	// FNEG_D32
    4790U,	// FNEG_D64
    6439U,	// FNEG_S
    4958U,	// FSQRT_D32
    4958U,	// FSQRT_D64
    6598U,	// FSQRT_S
    4199010U,	// FSUB_D32
    4199010U,	// FSUB_D64
    4200650U,	// FSUB_S
    205528269U,	// INS
    531138U,	// INSV
    104095U,	// J
    104123U,	// JAL
    6304U,	// JALR
    6304U,	// JALR64
    0U,	// JALR64Pseudo
    0U,	// JALRPseudo
    104604U,	// JR
    104604U,	// JR64
    235195U,	// Jal16
    3367U,	// JrRa16
    3358U,	// JrcRa16
    105547U,	// JrcRx16
    102401U,	// JumpLinkReg16
    1577200U,	// LB
    1577200U,	// LB64
    1577200U,	// LB64_P8
    34085890U,	// LBUX
    1577200U,	// LB_MM
    1577200U,	// LB_MM_P8
    1577200U,	// LB_P8
    1579581U,	// LBu
    1579581U,	// LBu64
    1579581U,	// LBu64_P8
    1579581U,	// LBu_MM
    1579581U,	// LBu_MM_P8
    1579581U,	// LBu_P8
    1577936U,	// LD
    1576983U,	// LDC1
    1576983U,	// LDC164
    1576983U,	// LDC164_P8
    1578775U,	// LDL
    1578775U,	// LDL_P8
    1579098U,	// LDR
    1579098U,	// LDR_P8
    34082889U,	// LDXC1
    34082889U,	// LDXC164
    34082889U,	// LDXC164_P8
    1577936U,	// LD_P8
    1055332U,	// LEA_ADDiu
    1055331U,	// LEA_ADDiu64
    1578047U,	// LH
    1578047U,	// LH64
    1578047U,	// LH64_P8
    34085885U,	// LHX
    1578047U,	// LH_MM
    1578047U,	// LH_MM_P8
    1578047U,	// LH_P8
    1579614U,	// LHu
    1579614U,	// LHu64
    1579614U,	// LHu64_P8
    1579614U,	// LHu_MM
    1579614U,	// LHu_MM_P8
    1579614U,	// LHu_P8
    1578846U,	// LL
    1577935U,	// LLD
    1577935U,	// LLD_P8
    1578846U,	// LL_P8
    1576967U,	// LOAD_AC128
    1576967U,	// LOAD_AC128_P8
    1576967U,	// LOAD_AC64
    1576967U,	// LOAD_AC64_P8
    1578937U,	// LOAD_AC_DSP
    1578937U,	// LOAD_AC_DSP_P8
    1578964U,	// LOAD_CCOND_DSP
    1578964U,	// LOAD_CCOND_DSP_P8
    34082903U,	// LUXC1
    34082903U,	// LUXC164
    2102938U,	// LUi
    2102938U,	// LUi64
    2102938U,	// LUi_MM
    1580021U,	// LW
    1580021U,	// LW64
    1580021U,	// LW64_P8
    1577021U,	// LWC1
    1577021U,	// LWC1_P8
    1578867U,	// LWL
    1578867U,	// LWL64
    1578867U,	// LWL64_P8
    1578867U,	// LWL_P8
    1579198U,	// LWR
    1579198U,	// LWR64
    1579198U,	// LWR64_P8
    1579198U,	// LWR_P8
    34085896U,	// LWX
    34082917U,	// LWXC1
    34082917U,	// LWXC1_P8
    1580021U,	// LW_MM
    1580021U,	// LW_MM_P8
    1580021U,	// LW_P8
    1579648U,	// LWu
    1579648U,	// LWu_P8
    1577200U,	// LbRxRyOffMemX16
    1579581U,	// LbuRxRyOffMemX16
    1578047U,	// LhRxRyOffMemX16
    1579614U,	// LhuRxRyOffMemX16
    25171588U,	// LiRxImm16
    5764U,	// LiRxImmX16
    4271U,	// LoadAddr32Imm
    1577135U,	// LoadAddr32Reg
    5764U,	// LoadImm32Reg
    269301U,	// LwConstant32
    1580021U,	// LwRxRyOffMemX16
    38280181U,	// LwRxSpImmX16
    5059U,	// MADD
    6743U,	// MADDU
    4201047U,	// MADDU_DSP
    138416746U,	// MADD_D32
    138416746U,	// MADD_D64
    4199363U,	// MADD_DSP
    138418395U,	// MADD_S
    4200225U,	// MAQ_SA_W_PHL
    4200548U,	// MAQ_SA_W_PHR
    4200253U,	// MAQ_S_W_PHL
    4200576U,	// MAQ_S_W_PHR
    71307274U,	// MFC0_3OP
    4138U,	// MFC1
    71307414U,	// MFC2_3OP
    104056U,	// MFHI
    104056U,	// MFHI64
    5752U,	// MFHI_DSP
    104337U,	// MFLO
    104337U,	// MFLO64
    6033U,	// MFLO_DSP
    0U,	// MIPSeh_return32
    0U,	// MIPSeh_return64
    4198980U,	// MODSUB
    4199086U,	// MOVF_D32
    4199086U,	// MOVF_D64
    4199438U,	// MOVF_I
    4199438U,	// MOVF_I64
    4200735U,	// MOVF_S
    4199177U,	// MOVN_I64_D64
    4200325U,	// MOVN_I64_I
    4200325U,	// MOVN_I64_I64
    4200826U,	// MOVN_I64_S
    4199177U,	// MOVN_I_D32
    4199177U,	// MOVN_I_D64
    4200325U,	// MOVN_I_I
    4200325U,	// MOVN_I_I64
    4200826U,	// MOVN_I_S
    4199270U,	// MOVT_D32
    4199270U,	// MOVT_D64
    4201015U,	// MOVT_I
    4201015U,	// MOVT_I64
    4200910U,	// MOVT_S
    4199344U,	// MOVZ_I64_D64
    4201541U,	// MOVZ_I64_I
    4201541U,	// MOVZ_I64_I64
    4200984U,	// MOVZ_I64_S
    4199344U,	// MOVZ_I_D32
    4199344U,	// MOVZ_I_D64
    4201541U,	// MOVZ_I_I
    4201541U,	// MOVZ_I_I64
    4200984U,	// MOVZ_I_S
    4684U,	// MSUB
    6729U,	// MSUBU
    4201033U,	// MSUBU_DSP
    138416737U,	// MSUB_D32
    138416737U,	// MSUB_D64
    4198988U,	// MSUB_DSP
    138418377U,	// MSUB_S
    12305U,	// MTC0_3OP
    139319U,	// MTC1
    12445U,	// MTC2_3OP
    104062U,	// MTHI
    104062U,	// MTHI64
    140926U,	// MTHI_DSP
    141228U,	// MTHLIP
    104350U,	// MTLO
    104350U,	// MTLO64
    141214U,	// MTLO_DSP
    4200302U,	// MUL
    4200266U,	// MULEQ_S_W_PHL
    4200589U,	// MULEQ_S_W_PHR
    4200168U,	// MULEU_S_PH_QBL
    4200491U,	// MULEU_S_PH_QBR
    4199805U,	// MULQ_RS_PH
    4201418U,	// MULQ_RS_W
    4199749U,	// MULQ_S_PH
    4201387U,	// MULQ_S_W
    4199951U,	// MULSAQ_S_W_PH
    4199926U,	// MULSA_W_PH
    6700U,	// MULT
    4201081U,	// MULTU_DSP
    4201004U,	// MULT_DSP
    6700U,	// MULT_MM
    6777U,	// MULTu
    6777U,	// MULTu_MM
    4200302U,	// MUL_MM
    4199622U,	// MUL_PH
    4199717U,	// MUL_S_PH
    104056U,	// Mfhi16
    104337U,	// Mflo16
    5122U,	// Move32R16
    5122U,	// MoveR3216
    6700U,	// MultRxRy16
    2927148U,	// MultRxRyRz16
    6777U,	// MultuRxRy16
    2927225U,	// MultuRxRyRz16
    138416745U,	// NMADD_D32
    138416745U,	// NMADD_D64
    138418394U,	// NMADD_S
    138416736U,	// NMSUB_D32
    138416736U,	// NMSUB_D64
    138418376U,	// NMSUB_S
    0U,	// NOP
    4200614U,	// NOR
    4200614U,	// NOR64
    4200614U,	// NOR_MM
    5140U,	// NegRxRy16
    6706U,	// NotRxRy16
    4200615U,	// OR
    4200615U,	// OR64
    4200615U,	// OR_MM
    71308943U,	// ORi
    71308943U,	// ORi64
    71308943U,	// ORi_MM
    530599U,	// OrRxRxRy16
    4199611U,	// PACKRL_PH
    4199575U,	// PICK_PH
    4198712U,	// PICK_QB
    5895U,	// PRECEQU_PH_QBL
    4275U,	// PRECEQU_PH_QBLA
    6218U,	// PRECEQU_PH_QBR
    4308U,	// PRECEQU_PH_QBRA
    5935U,	// PRECEQ_W_PHL
    6258U,	// PRECEQ_W_PHR
    5880U,	// PRECEU_PH_QBL
    4259U,	// PRECEU_PH_QBLA
    6203U,	// PRECEU_PH_QBR
    4292U,	// PRECEU_PH_QBRA
    4199527U,	// PRECRQU_S_QB_PH
    4201185U,	// PRECRQ_PH_W
    4199500U,	// PRECRQ_QB_PH
    4201216U,	// PRECRQ_RS_PH_W
    4199514U,	// PRECR_QB_PH
    4201169U,	// PRECR_SRA_PH_W
    4201198U,	// PRECR_SRA_R_PH_W
    4199385U,	// PREPEND
    0U,	// PseudoCMPU_EQ_QB
    0U,	// PseudoCMPU_LE_QB
    0U,	// PseudoCMPU_LT_QB
    0U,	// PseudoCMP_EQ_PH
    0U,	// PseudoCMP_LE_PH
    0U,	// PseudoCMP_LT_PH
    4103U,	// PseudoCVT_D32_W
    4103U,	// PseudoCVT_D64_L
    4103U,	// PseudoCVT_D64_W
    4103U,	// PseudoCVT_S_L
    4103U,	// PseudoCVT_S_W
    0U,	// PseudoDMULT
    0U,	// PseudoDMULTu
    0U,	// PseudoDSDIV
    0U,	// PseudoDUDIV
    1576967U,	// PseudoLDC1
    0U,	// PseudoMADD
    0U,	// PseudoMADDU
    0U,	// PseudoMSUB
    0U,	// PseudoMSUBU
    0U,	// PseudoMULT
    0U,	// PseudoMULTu
    0U,	// PseudoPICK_PH
    0U,	// PseudoPICK_QB
    1576967U,	// PseudoSDC1
    0U,	// PseudoSDIV
    0U,	// PseudoUDIV
    4660U,	// RADDU_W_QB
    2103285U,	// RDDSP
    6327U,	// RDHWR
    6327U,	// RDHWR64
    5562U,	// REPLV_PH
    4640U,	// REPLV_QB
    2102441U,	// REPL_PH
    2101578U,	// REPL_QB
    104604U,	// RET
    4200625U,	// ROTR
    4201147U,	// ROTRV
    4201147U,	// ROTRV_MM
    4200625U,	// ROTR_MM
    4808U,	// ROUND_L_D64
    6457U,	// ROUND_L_S
    4999U,	// ROUND_W_D32
    4999U,	// ROUND_W_D64
    6639U,	// ROUND_W_S
    21491U,	// RestoreIncSpF16
    23633U,	// RestoreRaF16
    0U,	// RetRA
    0U,	// RetRA16
    1577536U,	// SB
    1577536U,	// SB64
    1577536U,	// SB64_P8
    1577536U,	// SB_MM
    1577536U,	// SB_MM_P8
    1577536U,	// SB_P8
    336469U,	// SC
    336824U,	// SCD
    336824U,	// SCD_P8
    336469U,	// SC_P8
    1577962U,	// SD
    1576989U,	// SDC1
    1576989U,	// SDC164
    1576989U,	// SDC164_P8
    7320U,	// SDIV
    1578780U,	// SDL
    1578780U,	// SDL_P8
    1579103U,	// SDR
    1579103U,	// SDR_P8
    34082896U,	// SDXC1
    34082896U,	// SDXC164
    34082896U,	// SDXC164_P8
    1577962U,	// SD_P8
    4331U,	// SEB
    4331U,	// SEB64
    5178U,	// SEH
    5178U,	// SEH64
    1578599U,	// SH
    1578599U,	// SH64
    1578599U,	// SH64_P8
    6039U,	// SHILO
    6818U,	// SHILOV
    4199856U,	// SHLLV_PH
    4198934U,	// SHLLV_QB
    4199793U,	// SHLLV_S_PH
    4201407U,	// SHLLV_S_W
    71308448U,	// SHLL_PH
    71307585U,	// SHLL_QB
    71308570U,	// SHLL_S_PH
    71310221U,	// SHLL_S_W
    4199846U,	// SHRAV_PH
    4198924U,	// SHRAV_QB
    4199694U,	// SHRAV_R_PH
    4198822U,	// SHRAV_R_QB
    4201318U,	// SHRAV_R_W
    71308355U,	// SHRA_PH
    71307508U,	// SHRA_QB
    71308523U,	// SHRA_R_PH
    71307651U,	// SHRA_R_QB
    71310140U,	// SHRA_R_W
    4199876U,	// SHRLV_PH
    4198954U,	// SHRLV_QB
    71308466U,	// SHRL_PH
    71307603U,	// SHRL_QB
    1578599U,	// SH_MM
    1578599U,	// SH_MM_P8
    1578599U,	// SH_P8
    4200291U,	// SLL
    41949027U,	// SLL64_32
    41949027U,	// SLL64_64
    4201109U,	// SLLV
    4201109U,	// SLLV_MM
    4200291U,	// SLL_MM
    4200998U,	// SLT
    4200998U,	// SLT64
    4200998U,	// SLT_MM
    4200084U,	// SLTi
    4200084U,	// SLTi64
    4200084U,	// SLTi_MM
    4201067U,	// SLTiu
    4201067U,	// SLTiu64
    4201067U,	// SLTiu_MM
    4201074U,	// SLTu
    4201074U,	// SLTu64
    4201074U,	// SLTu_MM
    4198630U,	// SRA
    4201094U,	// SRAV
    4201094U,	// SRAV_MM
    4198630U,	// SRA_MM
    4200297U,	// SRL
    4201116U,	// SRLV
    4201116U,	// SRLV_MM
    4200297U,	// SRL_MM
    1576967U,	// STORE_AC128
    1576967U,	// STORE_AC128_P8
    1576967U,	// STORE_AC64
    1576967U,	// STORE_AC64_P8
    1578950U,	// STORE_AC_DSP
    1578950U,	// STORE_AC_DSP_P8
    1578980U,	// STORE_CCOND_DSP
    1578980U,	// STORE_CCOND_DSP_P8
    4198983U,	// SUB
    4199555U,	// SUBQH_PH
    4199670U,	// SUBQH_R_PH
    4201286U,	// SUBQH_R_W
    4201232U,	// SUBQH_W
    4199630U,	// SUBQ_PH
    4199727U,	// SUBQ_S_PH
    4201367U,	// SUBQ_S_W
    4198692U,	// SUBUH_QB
    4198798U,	// SUBUH_R_QB
    4199828U,	// SUBU_PH
    4198906U,	// SUBU_QB
    4199771U,	// SUBU_S_PH
    4198845U,	// SUBU_S_QB
    4198983U,	// SUB_MM
    4201027U,	// SUBu
    4201027U,	// SUBu_MM
    34082910U,	// SUXC1
    34082910U,	// SUXC164
    1580025U,	// SW
    1580025U,	// SW64
    1580025U,	// SW64_P8
    1577027U,	// SWC1
    1577027U,	// SWC1_P8
    1578872U,	// SWL
    1578872U,	// SWL64
    1578872U,	// SWL64_P8
    1578872U,	// SWL_P8
    1579203U,	// SWR
    1579203U,	// SWR64
    1579203U,	// SWR64_P8
    1579203U,	// SWR_P8
    34082924U,	// SWXC1
    34082924U,	// SWXC1_P8
    1580025U,	// SW_MM
    1580025U,	// SW_MM_P8
    1580025U,	// SW_P8
    105648U,	// SYNC
    104281U,	// SYSCALL
    21500U,	// SaveDecSpF16
    23663U,	// SaveRaF16
    1577536U,	// SbRxRyOffMemX16
    388140U,	// SelBeqZ
    388121U,	// SelBneZ
    49309620U,	// SelTBteqZCmp
    49309320U,	// SelTBteqZCmpi
    49310246U,	// SelTBteqZSlt
    49309332U,	// SelTBteqZSlti
    49310315U,	// SelTBteqZSltiu
    49310322U,	// SelTBteqZSltu
    53503924U,	// SelTBtneZCmp
    53503624U,	// SelTBtneZCmpi
    53504550U,	// SelTBtneZSlt
    53503636U,	// SelTBtneZSlti
    53504619U,	// SelTBtneZSltiu
    53504626U,	// SelTBtneZSltu
    1578599U,	// ShRxRyOffMemX16
    4200291U,	// SllX16
    531093U,	// SllvRxRy16
    3975718U,	// SltCCRxRy16
    6694U,	// SltRxRy16
    3974804U,	// SltiCCRxImmX16
    25171604U,	// SltiRxImm16
    5780U,	// SltiRxImmX16
    3975787U,	// SltiuCCRxImmX16
    25172587U,	// SltiuRxImm16
    6763U,	// SltiuRxImmX16
    3975794U,	// SltuCCRxRy16
    6770U,	// SltuRxRy16
    3975794U,	// SltuRxRyRz16
    4198630U,	// SraX16
    531078U,	// SravRxRy16
    4200297U,	// SrlX16
    531100U,	// SrlvRxRy16
    4201027U,	// SubuRxRyRz16
    1580025U,	// SwRxRyOffMemX16
    38280185U,	// SwRxSpImmX16
    104095U,	// TAILCALL
    104604U,	// TAILCALL64_R
    104604U,	// TAILCALL_R
    71309326U,	// TEQ
    3375U,	// TRAP
    4797U,	// TRUNC_L_D64
    6446U,	// TRUNC_L_S
    4988U,	// TRUNC_W_D32
    4988U,	// TRUNC_W_D64
    6628U,	// TRUNC_W_S
    7306U,	// UDIV
    2103292U,	// WRDSP
    5172U,	// WSBH
    4200619U,	// XOR
    4200619U,	// XOR64
    4200619U,	// XOR_MM
    71308942U,	// XORi
    71308942U,	// XORi64
    71308942U,	// XORi_MM
    530603U,	// XorRxRxRy16
    0U
  };

  const char AsmStrs[] = {
  /* 0 */ 'j', 'a', 'l', 'r', 'c', 32, 9, 0,
  /* 8 */ 'd', 'm', 'f', 'c', '0', 9, 0,
  /* 15 */ 'd', 'm', 't', 'c', '0', 9, 0,
  /* 22 */ 'l', 'd', 'c', '1', 9, 0,
  /* 28 */ 's', 'd', 'c', '1', 9, 0,
  /* 34 */ 'c', 'f', 'c', '1', 9, 0,
  /* 40 */ 'd', 'm', 'f', 'c', '1', 9, 0,
  /* 47 */ 'c', 't', 'c', '1', 9, 0,
  /* 53 */ 'd', 'm', 't', 'c', '1', 9, 0,
  /* 60 */ 'l', 'w', 'c', '1', 9, 0,
  /* 66 */ 's', 'w', 'c', '1', 9, 0,
  /* 72 */ 'l', 'd', 'x', 'c', '1', 9, 0,
  /* 79 */ 's', 'd', 'x', 'c', '1', 9, 0,
  /* 86 */ 'l', 'u', 'x', 'c', '1', 9, 0,
  /* 93 */ 's', 'u', 'x', 'c', '1', 9, 0,
  /* 100 */ 'l', 'w', 'x', 'c', '1', 9, 0,
  /* 107 */ 's', 'w', 'x', 'c', '1', 9, 0,
  /* 114 */ 'd', 's', 'r', 'a', '3', '2', 9, 0,
  /* 122 */ 'b', 'p', 'o', 's', 'g', 'e', '3', '2', 9, 0,
  /* 132 */ 'd', 's', 'l', 'l', '3', '2', 9, 0,
  /* 140 */ 'd', 's', 'r', 'l', '3', '2', 9, 0,
  /* 148 */ 'd', 'm', 'f', 'c', '2', 9, 0,
  /* 155 */ 'd', 'm', 't', 'c', '2', 9, 0,
  /* 162 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 'a', 9, 0,
  /* 178 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 'a', 9, 0,
  /* 195 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 'a', 9, 0,
  /* 211 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 'a', 9, 0,
  /* 228 */ 'd', 's', 'r', 'a', 9, 0,
  /* 234 */ 's', 'e', 'b', 9, 0,
  /* 239 */ 'l', 'b', 9, 0,
  /* 243 */ 's', 'h', 'r', 'a', '.', 'q', 'b', 9, 0,
  /* 252 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 266 */ 'c', 'm', 'p', 'g', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 279 */ 'c', 'm', 'p', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 291 */ 's', 'u', 'b', 'u', 'h', '.', 'q', 'b', 9, 0,
  /* 301 */ 'a', 'd', 'd', 'u', 'h', '.', 'q', 'b', 9, 0,
  /* 311 */ 'p', 'i', 'c', 'k', '.', 'q', 'b', 9, 0,
  /* 320 */ 's', 'h', 'l', 'l', '.', 'q', 'b', 9, 0,
  /* 329 */ 'r', 'e', 'p', 'l', '.', 'q', 'b', 9, 0,
  /* 338 */ 's', 'h', 'r', 'l', '.', 'q', 'b', 9, 0,
  /* 347 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 361 */ 'c', 'm', 'p', 'g', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 374 */ 'c', 'm', 'p', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 386 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 397 */ 's', 'u', 'b', 'u', 'h', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 409 */ 'a', 'd', 'd', 'u', 'h', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 421 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 433 */ 'a', 'b', 's', 'q', '_', 's', '.', 'q', 'b', 9, 0,
  /* 444 */ 's', 'u', 'b', 'u', '_', 's', '.', 'q', 'b', 9, 0,
  /* 455 */ 'a', 'd', 'd', 'u', '_', 's', '.', 'q', 'b', 9, 0,
  /* 466 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 480 */ 'c', 'm', 'p', 'g', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 493 */ 'c', 'm', 'p', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 505 */ 's', 'u', 'b', 'u', '.', 'q', 'b', 9, 0,
  /* 514 */ 'a', 'd', 'd', 'u', '.', 'q', 'b', 9, 0,
  /* 523 */ 's', 'h', 'r', 'a', 'v', '.', 'q', 'b', 9, 0,
  /* 533 */ 's', 'h', 'l', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 543 */ 'r', 'e', 'p', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 553 */ 's', 'h', 'r', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 563 */ 'r', 'a', 'd', 'd', 'u', '.', 'w', '.', 'q', 'b', 9, 0,
  /* 575 */ 's', 'b', 9, 0,
  /* 579 */ 'm', 'o', 'd', 's', 'u', 'b', 9, 0,
  /* 587 */ 'm', 's', 'u', 'b', 9, 0,
  /* 593 */ 'a', 'd', 'd', 's', 'c', 9, 0,
  /* 600 */ 'a', 'd', 'd', 'w', 'c', 9, 0,
  /* 607 */ 'n', 'm', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 616 */ 'n', 'm', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 625 */ 'c', '.', 'n', 'g', 'e', '.', 'd', 9, 0,
  /* 634 */ 'c', '.', 'l', 'e', '.', 'd', 9, 0,
  /* 642 */ 'c', '.', 'n', 'g', 'l', 'e', '.', 'd', 9, 0,
  /* 652 */ 'c', '.', 'o', 'l', 'e', '.', 'd', 9, 0,
  /* 661 */ 'c', '.', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 670 */ 'c', '.', 'f', '.', 'd', 9, 0,
  /* 677 */ 'c', '.', 's', 'f', '.', 'd', 9, 0,
  /* 685 */ 'm', 'o', 'v', 'f', '.', 'd', 9, 0,
  /* 693 */ 'n', 'e', 'g', '.', 'd', 9, 0,
  /* 700 */ 't', 'r', 'u', 'n', 'c', '.', 'l', '.', 'd', 9, 0,
  /* 711 */ 'r', 'o', 'u', 'n', 'd', '.', 'l', '.', 'd', 9, 0,
  /* 722 */ 'c', 'e', 'i', 'l', '.', 'l', '.', 'd', 9, 0,
  /* 732 */ 'f', 'l', 'o', 'o', 'r', '.', 'l', '.', 'd', 9, 0,
  /* 743 */ 'c', 'v', 't', '.', 'l', '.', 'd', 9, 0,
  /* 752 */ 'c', '.', 'n', 'g', 'l', '.', 'd', 9, 0,
  /* 761 */ 'm', 'u', 'l', '.', 'd', 9, 0,
  /* 768 */ 'c', '.', 'u', 'n', '.', 'd', 9, 0,
  /* 776 */ 'm', 'o', 'v', 'n', '.', 'd', 9, 0,
  /* 784 */ 'c', '.', 'e', 'q', '.', 'd', 9, 0,
  /* 792 */ 'c', '.', 's', 'e', 'q', '.', 'd', 9, 0,
  /* 801 */ 'c', '.', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 810 */ 'c', 'v', 't', '.', 's', '.', 'd', 9, 0,
  /* 819 */ 'a', 'b', 's', '.', 'd', 9, 0,
  /* 826 */ 'c', '.', 'n', 'g', 't', '.', 'd', 9, 0,
  /* 835 */ 'c', '.', 'l', 't', '.', 'd', 9, 0,
  /* 843 */ 'c', '.', 'o', 'l', 't', '.', 'd', 9, 0,
  /* 852 */ 'c', '.', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 861 */ 's', 'q', 'r', 't', '.', 'd', 9, 0,
  /* 869 */ 'm', 'o', 'v', 't', '.', 'd', 9, 0,
  /* 877 */ 'd', 'i', 'v', '.', 'd', 9, 0,
  /* 884 */ 'm', 'o', 'v', '.', 'd', 9, 0,
  /* 891 */ 't', 'r', 'u', 'n', 'c', '.', 'w', '.', 'd', 9, 0,
  /* 902 */ 'r', 'o', 'u', 'n', 'd', '.', 'w', '.', 'd', 9, 0,
  /* 913 */ 'c', 'e', 'i', 'l', '.', 'w', '.', 'd', 9, 0,
  /* 923 */ 'f', 'l', 'o', 'o', 'r', '.', 'w', '.', 'd', 9, 0,
  /* 934 */ 'c', 'v', 't', '.', 'w', '.', 'd', 9, 0,
  /* 943 */ 'm', 'o', 'v', 'z', '.', 'd', 9, 0,
  /* 951 */ 's', 'c', 'd', 9, 0,
  /* 956 */ 'd', 'a', 'd', 'd', 9, 0,
  /* 962 */ 'm', 'a', 'd', 'd', 9, 0,
  /* 968 */ 'd', 's', 'h', 'd', 9, 0,
  /* 974 */ 'l', 'l', 'd', 9, 0,
  /* 979 */ 'a', 'n', 'd', 9, 0,
  /* 984 */ 'p', 'r', 'e', 'p', 'e', 'n', 'd', 9, 0,
  /* 993 */ 'a', 'p', 'p', 'e', 'n', 'd', 9, 0,
  /* 1001 */ 's', 'd', 9, 0,
  /* 1005 */ 'b', 'n', 'e', 9, 0,
  /* 1010 */ 'r', 'e', 's', 't', 'o', 'r', 'e', 9, 0,
  /* 1019 */ 's', 'a', 'v', 'e', 9, 0,
  /* 1025 */ 'm', 'o', 'v', 'e', 9, 0,
  /* 1031 */ 'b', 'c', '1', 'f', 9, 0,
  /* 1037 */ 'm', 'o', 'v', 'f', 9, 0,
  /* 1043 */ 'n', 'e', 'g', 9, 0,
  /* 1048 */ 'e', 'x', 't', 'r', '_', 's', '.', 'h', 9, 0,
  /* 1058 */ 'e', 'x', 't', 'r', 'v', '_', 's', '.', 'h', 9, 0,
  /* 1069 */ 'd', 's', 'b', 'h', 9, 0,
  /* 1075 */ 'w', 's', 'b', 'h', 9, 0,
  /* 1081 */ 's', 'e', 'h', 9, 0,
  /* 1086 */ 'l', 'h', 9, 0,
  /* 1090 */ 's', 'h', 'r', 'a', '.', 'p', 'h', 9, 0,
  /* 1099 */ 'p', 'r', 'e', 'c', 'r', 'q', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 1113 */ 'p', 'r', 'e', 'c', 'r', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 1126 */ 'p', 'r', 'e', 'c', 'r', 'q', 'u', '_', 's', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 1143 */ 'c', 'm', 'p', '.', 'l', 'e', '.', 'p', 'h', 9, 0,
  /* 1154 */ 's', 'u', 'b', 'q', 'h', '.', 'p', 'h', 9, 0,
  /* 1164 */ 'a', 'd', 'd', 'q', 'h', '.', 'p', 'h', 9, 0,
  /* 1174 */ 'p', 'i', 'c', 'k', '.', 'p', 'h', 9, 0,
  /* 1183 */ 's', 'h', 'l', 'l', '.', 'p', 'h', 9, 0,
  /* 1192 */ 'r', 'e', 'p', 'l', '.', 'p', 'h', 9, 0,
  /* 1201 */ 's', 'h', 'r', 'l', '.', 'p', 'h', 9, 0,
  /* 1210 */ 'p', 'a', 'c', 'k', 'r', 'l', '.', 'p', 'h', 9, 0,
  /* 1221 */ 'm', 'u', 'l', '.', 'p', 'h', 9, 0,
  /* 1229 */ 's', 'u', 'b', 'q', '.', 'p', 'h', 9, 0,
  /* 1238 */ 'a', 'd', 'd', 'q', '.', 'p', 'h', 9, 0,
  /* 1247 */ 'c', 'm', 'p', '.', 'e', 'q', '.', 'p', 'h', 9, 0,
  /* 1258 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 1269 */ 's', 'u', 'b', 'q', 'h', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 1281 */ 'a', 'd', 'd', 'q', 'h', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 1293 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 1305 */ 's', 'h', 'l', 'l', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1316 */ 'm', 'u', 'l', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1326 */ 's', 'u', 'b', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1337 */ 'a', 'd', 'd', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1348 */ 'm', 'u', 'l', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1359 */ 'a', 'b', 's', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1370 */ 's', 'u', 'b', 'u', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1381 */ 'a', 'd', 'd', 'u', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1392 */ 's', 'h', 'l', 'l', 'v', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1404 */ 'm', 'u', 'l', 'q', '_', 'r', 's', '.', 'p', 'h', 9, 0,
  /* 1416 */ 'c', 'm', 'p', '.', 'l', 't', '.', 'p', 'h', 9, 0,
  /* 1427 */ 's', 'u', 'b', 'u', '.', 'p', 'h', 9, 0,
  /* 1436 */ 'a', 'd', 'd', 'u', '.', 'p', 'h', 9, 0,
  /* 1445 */ 's', 'h', 'r', 'a', 'v', '.', 'p', 'h', 9, 0,
  /* 1455 */ 's', 'h', 'l', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 1465 */ 'r', 'e', 'p', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 1475 */ 's', 'h', 'r', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 1485 */ 'd', 'p', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1495 */ 'd', 'p', 'a', 'q', 'x', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1510 */ 'd', 'p', 's', 'q', 'x', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1525 */ 'm', 'u', 'l', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1537 */ 'd', 'p', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1550 */ 'm', 'u', 'l', 's', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1565 */ 'd', 'p', 's', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1578 */ 'd', 'p', 'a', 'q', 'x', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1592 */ 'd', 'p', 's', 'q', 'x', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1606 */ 'd', 'p', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1616 */ 'd', 'p', 'a', 'x', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1627 */ 'd', 'p', 's', 'x', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1638 */ 's', 'h', 9, 0,
  /* 1642 */ 'd', 'a', 'd', 'd', 'i', 9, 0,
  /* 1649 */ 'a', 'n', 'd', 'i', 9, 0,
  /* 1655 */ 'm', 'f', 'h', 'i', 9, 0,
  /* 1661 */ 'm', 't', 'h', 'i', 9, 0,
  /* 1667 */ 'l', 'i', 9, 0,
  /* 1671 */ 'c', 'm', 'p', 'i', 9, 0,
  /* 1677 */ 'x', 'o', 'r', 'i', 9, 0,
  /* 1683 */ 's', 'l', 't', 'i', 9, 0,
  /* 1689 */ 'l', 'u', 'i', 9, 0,
  /* 1694 */ 'j', 9, 0,
  /* 1697 */ 'b', 'r', 'e', 'a', 'k', 9, 0,
  /* 1704 */ 'c', 'v', 't', '.', 'd', '.', 'l', 9, 0,
  /* 1713 */ 'c', 'v', 't', '.', 's', '.', 'l', 9, 0,
  /* 1722 */ 'j', 'a', 'l', 9, 0,
  /* 1727 */ 'b', 'g', 'e', 'z', 'a', 'l', 9, 0,
  /* 1735 */ 'b', 'l', 't', 'z', 'a', 'l', 9, 0,
  /* 1743 */ 'd', 'p', 'a', 'u', '.', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 1755 */ 'd', 'p', 's', 'u', '.', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 1767 */ 'm', 'u', 'l', 'e', 'u', '_', 's', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 1783 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 1798 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 1814 */ 'l', 'd', 'l', 9, 0,
  /* 1819 */ 's', 'd', 'l', 9, 0,
  /* 1824 */ 'm', 'a', 'q', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 1838 */ 'p', 'r', 'e', 'c', 'e', 'q', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 1852 */ 'm', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 1865 */ 'm', 'u', 'l', 'e', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 1880 */ 's', 'y', 's', 'c', 'a', 'l', 'l', 9, 0,
  /* 1889 */ 'd', 's', 'l', 'l', 9, 0,
  /* 1895 */ 'd', 's', 'r', 'l', 9, 0,
  /* 1901 */ 'm', 'u', 'l', 9, 0,
  /* 1906 */ 'l', 'w', 'l', 9, 0,
  /* 1911 */ 's', 'w', 'l', 9, 0,
  /* 1916 */ 'b', 'a', 'l', 'i', 'g', 'n', 9, 0,
  /* 1924 */ 'm', 'o', 'v', 'n', 9, 0,
  /* 1930 */ 'd', 'c', 'l', 'o', 9, 0,
  /* 1936 */ 'm', 'f', 'l', 'o', 9, 0,
  /* 1942 */ 's', 'h', 'i', 'l', 'o', 9, 0,
  /* 1949 */ 'm', 't', 'l', 'o', 9, 0,
  /* 1955 */ 'e', 'x', 't', 'p', 'd', 'p', 9, 0,
  /* 1963 */ 'm', 't', 'h', 'l', 'i', 'p', 9, 0,
  /* 1971 */ 'c', 'm', 'p', 9, 0,
  /* 1976 */ 'l', 'o', 'a', 'd', '_', 'a', 'c', '_', 'd', 's', 'p', 9, 0,
  /* 1989 */ 's', 't', 'o', 'r', 'e', '_', 'a', 'c', '_', 'd', 's', 'p', 9, 0,
  /* 2003 */ 'l', 'o', 'a', 'd', '_', 'c', 'c', 'o', 'n', 'd', '_', 'd', 's', 'p', 9, 0,
  /* 2019 */ 's', 't', 'o', 'r', 'e', '_', 'c', 'c', 'o', 'n', 'd', '_', 'd', 's', 'p', 9, 0,
  /* 2036 */ 'r', 'd', 'd', 's', 'p', 9, 0,
  /* 2043 */ 'w', 'r', 'd', 's', 'p', 9, 0,
  /* 2050 */ 'e', 'x', 't', 'p', 9, 0,
  /* 2056 */ 'b', 'e', 'q', 9, 0,
  /* 2061 */ 't', 'e', 'q', 9, 0,
  /* 2066 */ 'd', 'p', 'a', 'u', '.', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 2078 */ 'd', 'p', 's', 'u', '.', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 2090 */ 'm', 'u', 'l', 'e', 'u', '_', 's', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 2106 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 2121 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 2137 */ 'l', 'd', 'r', 9, 0,
  /* 2142 */ 's', 'd', 'r', 9, 0,
  /* 2147 */ 'm', 'a', 'q', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 2161 */ 'p', 'r', 'e', 'c', 'e', 'q', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 2175 */ 'm', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 2188 */ 'm', 'u', 'l', 'e', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 2203 */ 'j', 'r', 9, 0,
  /* 2207 */ 'j', 'a', 'l', 'r', 9, 0,
  /* 2213 */ 'n', 'o', 'r', 9, 0,
  /* 2218 */ 'x', 'o', 'r', 9, 0,
  /* 2223 */ 'd', 'r', 'o', 't', 'r', 9, 0,
  /* 2230 */ 'r', 'd', 'h', 'w', 'r', 9, 0,
  /* 2237 */ 'l', 'w', 'r', 9, 0,
  /* 2242 */ 's', 'w', 'r', 9, 0,
  /* 2247 */ 'n', 'm', 's', 'u', 'b', '.', 's', 9, 0,
  /* 2256 */ 'c', 'v', 't', '.', 'd', '.', 's', 9, 0,
  /* 2265 */ 'n', 'm', 'a', 'd', 'd', '.', 's', 9, 0,
  /* 2274 */ 'c', '.', 'n', 'g', 'e', '.', 's', 9, 0,
  /* 2283 */ 'c', '.', 'l', 'e', '.', 's', 9, 0,
  /* 2291 */ 'c', '.', 'n', 'g', 'l', 'e', '.', 's', 9, 0,
  /* 2301 */ 'c', '.', 'o', 'l', 'e', '.', 's', 9, 0,
  /* 2310 */ 'c', '.', 'u', 'l', 'e', '.', 's', 9, 0,
  /* 2319 */ 'c', '.', 'f', '.', 's', 9, 0,
  /* 2326 */ 'c', '.', 's', 'f', '.', 's', 9, 0,
  /* 2334 */ 'm', 'o', 'v', 'f', '.', 's', 9, 0,
  /* 2342 */ 'n', 'e', 'g', '.', 's', 9, 0,
  /* 2349 */ 't', 'r', 'u', 'n', 'c', '.', 'l', '.', 's', 9, 0,
  /* 2360 */ 'r', 'o', 'u', 'n', 'd', '.', 'l', '.', 's', 9, 0,
  /* 2371 */ 'c', 'e', 'i', 'l', '.', 'l', '.', 's', 9, 0,
  /* 2381 */ 'f', 'l', 'o', 'o', 'r', '.', 'l', '.', 's', 9, 0,
  /* 2392 */ 'c', 'v', 't', '.', 'l', '.', 's', 9, 0,
  /* 2401 */ 'c', '.', 'n', 'g', 'l', '.', 's', 9, 0,
  /* 2410 */ 'm', 'u', 'l', '.', 's', 9, 0,
  /* 2417 */ 'c', '.', 'u', 'n', '.', 's', 9, 0,
  /* 2425 */ 'm', 'o', 'v', 'n', '.', 's', 9, 0,
  /* 2433 */ 'c', '.', 'e', 'q', '.', 's', 9, 0,
  /* 2441 */ 'c', '.', 's', 'e', 'q', '.', 's', 9, 0,
  /* 2450 */ 'c', '.', 'u', 'e', 'q', '.', 's', 9, 0,
  /* 2459 */ 'a', 'b', 's', '.', 's', 9, 0,
  /* 2466 */ 'c', '.', 'n', 'g', 't', '.', 's', 9, 0,
  /* 2475 */ 'c', '.', 'l', 't', '.', 's', 9, 0,
  /* 2483 */ 'c', '.', 'o', 'l', 't', '.', 's', 9, 0,
  /* 2492 */ 'c', '.', 'u', 'l', 't', '.', 's', 9, 0,
  /* 2501 */ 's', 'q', 'r', 't', '.', 's', 9, 0,
  /* 2509 */ 'm', 'o', 'v', 't', '.', 's', 9, 0,
  /* 2517 */ 'd', 'i', 'v', '.', 's', 9, 0,
  /* 2524 */ 'm', 'o', 'v', '.', 's', 9, 0,
  /* 2531 */ 't', 'r', 'u', 'n', 'c', '.', 'w', '.', 's', 9, 0,
  /* 2542 */ 'r', 'o', 'u', 'n', 'd', '.', 'w', '.', 's', 9, 0,
  /* 2553 */ 'c', 'e', 'i', 'l', '.', 'w', '.', 's', 9, 0,
  /* 2563 */ 'f', 'l', 'o', 'o', 'r', '.', 'w', '.', 's', 9, 0,
  /* 2574 */ 'c', 'v', 't', '.', 'w', '.', 's', 9, 0,
  /* 2583 */ 'm', 'o', 'v', 'z', '.', 's', 9, 0,
  /* 2591 */ 'b', 'c', '1', 't', 9, 0,
  /* 2597 */ 's', 'l', 't', 9, 0,
  /* 2602 */ 'd', 'm', 'u', 'l', 't', 9, 0,
  /* 2609 */ 'n', 'o', 't', 9, 0,
  /* 2614 */ 'm', 'o', 'v', 't', 9, 0,
  /* 2620 */ 'l', 'b', 'u', 9, 0,
  /* 2625 */ 'd', 's', 'u', 'b', 'u', 9, 0,
  /* 2632 */ 'm', 's', 'u', 'b', 'u', 9, 0,
  /* 2639 */ 'd', 'a', 'd', 'd', 'u', 9, 0,
  /* 2646 */ 'm', 'a', 'd', 'd', 'u', 9, 0,
  /* 2653 */ 'l', 'h', 'u', 9, 0,
  /* 2658 */ 'd', 'a', 'd', 'd', 'i', 'u', 9, 0,
  /* 2666 */ 's', 'l', 't', 'i', 'u', 9, 0,
  /* 2673 */ 's', 'l', 't', 'u', 9, 0,
  /* 2679 */ 'd', 'm', 'u', 'l', 't', 'u', 9, 0,
  /* 2687 */ 'l', 'w', 'u', 9, 0,
  /* 2692 */ 'd', 's', 'r', 'a', 'v', 9, 0,
  /* 2699 */ 'b', 'i', 't', 'r', 'e', 'v', 9, 0,
  /* 2707 */ 'd', 's', 'l', 'l', 'v', 9, 0,
  /* 2714 */ 'd', 's', 'r', 'l', 'v', 9, 0,
  /* 2721 */ 's', 'h', 'i', 'l', 'o', 'v', 9, 0,
  /* 2729 */ 'e', 'x', 't', 'p', 'd', 'p', 'v', 9, 0,
  /* 2738 */ 'e', 'x', 't', 'p', 'v', 9, 0,
  /* 2745 */ 'd', 'r', 'o', 't', 'r', 'v', 9, 0,
  /* 2753 */ 'i', 'n', 's', 'v', 9, 0,
  /* 2759 */ 'c', 'v', 't', '.', 'd', '.', 'w', 9, 0,
  /* 2768 */ 'p', 'r', 'e', 'c', 'r', '_', 's', 'r', 'a', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 2784 */ 'p', 'r', 'e', 'c', 'r', 'q', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 2797 */ 'p', 'r', 'e', 'c', 'r', '_', 's', 'r', 'a', '_', 'r', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 2815 */ 'p', 'r', 'e', 'c', 'r', 'q', '_', 'r', 's', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 2831 */ 's', 'u', 'b', 'q', 'h', '.', 'w', 9, 0,
  /* 2840 */ 'a', 'd', 'd', 'q', 'h', '.', 'w', 9, 0,
  /* 2849 */ 'd', 'p', 'a', 'q', '_', 's', 'a', '.', 'l', '.', 'w', 9, 0,
  /* 2862 */ 'd', 'p', 's', 'q', '_', 's', 'a', '.', 'l', '.', 'w', 9, 0,
  /* 2875 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'w', 9, 0,
  /* 2885 */ 's', 'u', 'b', 'q', 'h', '_', 'r', '.', 'w', 9, 0,
  /* 2896 */ 'a', 'd', 'd', 'q', 'h', '_', 'r', '.', 'w', 9, 0,
  /* 2907 */ 'e', 'x', 't', 'r', '_', 'r', '.', 'w', 9, 0,
  /* 2917 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'w', 9, 0,
  /* 2928 */ 'e', 'x', 't', 'r', 'v', '_', 'r', '.', 'w', 9, 0,
  /* 2939 */ 'e', 'x', 't', 'r', '.', 'w', 9, 0,
  /* 2947 */ 'c', 'v', 't', '.', 's', '.', 'w', 9, 0,
  /* 2956 */ 's', 'h', 'l', 'l', '_', 's', '.', 'w', 9, 0,
  /* 2966 */ 's', 'u', 'b', 'q', '_', 's', '.', 'w', 9, 0,
  /* 2976 */ 'a', 'd', 'd', 'q', '_', 's', '.', 'w', 9, 0,
  /* 2986 */ 'm', 'u', 'l', 'q', '_', 's', '.', 'w', 9, 0,
  /* 2996 */ 'a', 'b', 's', 'q', '_', 's', '.', 'w', 9, 0,
  /* 3006 */ 's', 'h', 'l', 'l', 'v', '_', 's', '.', 'w', 9, 0,
  /* 3017 */ 'm', 'u', 'l', 'q', '_', 'r', 's', '.', 'w', 9, 0,
  /* 3028 */ 'e', 'x', 't', 'r', '_', 'r', 's', '.', 'w', 9, 0,
  /* 3039 */ 'e', 'x', 't', 'r', 'v', '_', 'r', 's', '.', 'w', 9, 0,
  /* 3051 */ 'e', 'x', 't', 'r', 'v', '.', 'w', 9, 0,
  /* 3060 */ 'l', 'w', 9, 0,
  /* 3064 */ 's', 'w', 9, 0,
  /* 3068 */ 'l', 'h', 'x', 9, 0,
  /* 3073 */ 'l', 'b', 'u', 'x', 9, 0,
  /* 3079 */ 'l', 'w', 'x', 9, 0,
  /* 3084 */ 'b', 'g', 'e', 'z', 9, 0,
  /* 3090 */ 'b', 'l', 'e', 'z', 9, 0,
  /* 3096 */ 'b', 'n', 'e', 'z', 9, 0,
  /* 3102 */ 'b', 't', 'n', 'e', 'z', 9, 0,
  /* 3109 */ 'd', 'c', 'l', 'z', 9, 0,
  /* 3115 */ 'b', 'e', 'q', 'z', 9, 0,
  /* 3121 */ 'b', 't', 'e', 'q', 'z', 9, 0,
  /* 3128 */ 'b', 'g', 't', 'z', 9, 0,
  /* 3134 */ 'b', 'l', 't', 'z', 9, 0,
  /* 3140 */ 'm', 'o', 'v', 'z', 9, 0,
  /* 3146 */ 'j', 'r', 'c', 9, 32, 0,
  /* 3152 */ 'r', 'e', 's', 't', 'o', 'r', 'e', 9, '$', 'r', 'a', ',', 32, 32, '$', 's', '0', ',', 32, '$', 's', '1', ',', 32, '$', 's', '2', ',', 32, 0,
  /* 3182 */ 's', 'a', 'v', 'e', 9, '$', 'r', 'a', ',', 32, '$', 's', '0', ',', 32, '$', 's', '1', ',', 32, '$', 's', '2', ',', 32, 0,
  /* 3208 */ 'd', 'd', 'i', 'v', 'u', 9, '$', 'z', 'e', 'r', 'o', ',', 32, 0,
  /* 3222 */ 'd', 'd', 'i', 'v', 9, '$', 'z', 'e', 'r', 'o', ',', 32, 0,
  /* 3235 */ 'a', 'd', 'd', 'i', 'u', 9, '$', 's', 'p', ',', 32, 0,
  /* 3247 */ 's', 'y', 'n', 'c', 32, 0,
  /* 3253 */ 9, '.', 'w', 'o', 'r', 'd', 32, 0,
  /* 3261 */ 'd', 'i', 'n', 's', 'm', 32, 0,
  /* 3268 */ 'd', 'e', 'x', 't', 'm', 32, 0,
  /* 3275 */ 'd', 'i', 'n', 's', 32, 0,
  /* 3281 */ 'd', 'e', 'x', 't', 32, 0,
  /* 3287 */ 'd', 'i', 'n', 's', 'u', 32, 0,
  /* 3294 */ 'd', 'e', 'x', 't', 'u', 32, 0,
  /* 3301 */ 'c', '.', 0,
  /* 3304 */ 'b', 'r', 'e', 'a', 'k', 32, '0', 0,
  /* 3312 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 3325 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 3332 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 3342 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 3357 */ 'j', 'r', 'c', 9, 32, '$', 'r', 'a', 0,
  /* 3366 */ 'j', 'r', 9, 32, '$', 'r', 'a', 0,
  /* 3374 */ 'b', 'r', 'e', 'a', 'k', 0,
  /* 3380 */ 'd', 'e', 'r', 'e', 't', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint32_t Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 4095)-1;


  // Fragment 0 encoded into 3 bits for 7 unique commands.
  switch ((Bits >> 12) & 7) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, Break16, DERET, ERET,...
    return;
    break;
  case 1:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, ADD, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // CTC1, DMTC1, MTC1, MTHI_DSP, MTHLIP, MTLO_DSP, MultRxRyRz16, MultuRxRy...
    printOperand(MI, 1, O); 
    O << ", "; 
    break;
  case 3:
    // DMTC0_3OP64, DMTC2_3OP64, MTC0_3OP, MTC2_3OP
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printUnsignedImm(MI, 1, O); 
    return;
    break;
  case 4:
    // FCMP_D32, FCMP_D64, FCMP_S32
    printFCCOperand(MI, 2, O); 
    break;
  case 5:
    // RestoreIncSpF16, RestoreRaF16, SaveDecSpF16, SaveRaF16
    printUnsignedImm(MI, 0, O); 
    return;
    break;
  case 6:
    // SelBeqZ, SelBneZ, SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZ...
    printOperand(MI, 3, O); 
    break;
  }


  // Fragment 1 encoded into 4 bits for 12 unique commands.
  switch ((Bits >> 15) & 15) {
  default:   // unreachable.
  case 0:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, ADD, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ...
    O << ", "; 
    break;
  case 1:
    // AddiuRxPcImmX16
    O << ", $pc, "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 2:
    // AddiuSpImm16
    O << " # 16 bit inst"; 
    return;
    break;
  case 3:
    // AddiuSpImmX16, B, BPOSGE32, BimmX16, BteqzX16, BtnezX16, Constant32, J...
    return;
    break;
  case 4:
    // CTC1, DMTC1, MTC1, MTHI_DSP, MTHLIP, MTLO_DSP
    printOperand(MI, 0, O); 
    return;
    break;
  case 5:
    // FCMP_D32, FCMP_D64
    O << ".d\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 6:
    // FCMP_S32
    O << ".s\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 7:
    // Jal16
    O << "\n\tnop"; 
    return;
    break;
  case 8:
    // LwConstant32
    O << ", 1f\n\tb\t2f\n\t.align\t2\n1: \t.word\t"; 
    printOperand(MI, 1, O); 
    O << "\n2:"; 
    return;
    break;
  case 9:
    // MultRxRyRz16, MultuRxRyRz16, SltCCRxRy16, SltiCCRxImmX16, SltiuCCRxImm...
    printOperand(MI, 2, O); 
    break;
  case 10:
    // SC, SCD, SCD_P8, SC_P8
    printMemOperand(MI, 2, O); 
    return;
    break;
  case 11:
    // SelBeqZ, SelBneZ
    O << ", .+4\n\t\n\tmove "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  }


  // Fragment 2 encoded into 3 bits for 8 unique commands.
  switch ((Bits >> 19) & 7) {
  default:   // unreachable.
  case 0:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, ADD, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // AddiuRxRxImm16, AddiuRxRxImmX16, AndRxRxRy16, INSV, LBUX, LDXC1, LDXC1...
    printOperand(MI, 2, O); 
    break;
  case 2:
    // AddiuRxRyOffMemX16, LEA_ADDiu, LEA_ADDiu64
    printMemOperandEA(MI, 1, O); 
    return;
    break;
  case 3:
    // LB, LB64, LB64_P8, LB_MM, LB_MM_P8, LB_P8, LBu, LBu64, LBu64_P8, LBu_M...
    printMemOperand(MI, 1, O); 
    return;
    break;
  case 4:
    // LUi, LUi64, LUi_MM, RDDSP, REPL_PH, REPL_QB, WRDSP
    printUnsignedImm(MI, 1, O); 
    return;
    break;
  case 5:
    // MultRxRyRz16, MultuRxRyRz16
    O << "\n\tmflo\t"; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 6:
    // SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZSlti, SelTBteqZSlt...
    printOperand(MI, 4, O); 
    break;
  case 7:
    // SltCCRxRy16, SltiCCRxImmX16, SltiuCCRxImmX16, SltuCCRxRy16, SltuRxRyRz...
    O << "\n\tmove\t"; 
    printOperand(MI, 0, O); 
    O << ", $t8"; 
    return;
    break;
  }


  // Fragment 3 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 22) & 15) {
  default:   // unreachable.
  case 0:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, AddiuRxImmX16, AddiuRxRxImmX16, AndRxR...
    return;
    break;
  case 1:
    // ADD, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ADDQH_W, ADDQ_PH, ADDQ_S_PH, ADD...
    O << ", "; 
    break;
  case 2:
    // AddiuRxRxImm16
    O << "\t# 16 bit inst"; 
    return;
    break;
  case 3:
    // BeqzRxImm16, BnezRxImm16
    O << "  # 16 bit inst"; 
    return;
    break;
  case 4:
    // BteqzT8CmpX16, BteqzT8CmpiX16, BteqzT8SltX16, BteqzT8SltiX16, BteqzT8S...
    O << "\n\tbteqz\t"; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 5:
    // BtnezT8CmpX16, BtnezT8CmpiX16, BtnezT8SltX16, BtnezT8SltiX16, BtnezT8S...
    O << "\n\tbtnez\t"; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 6:
    // CmpiRxImm16, LiRxImm16, SltiRxImm16, SltiuRxImm16
    O << " \t# 16 bit inst"; 
    return;
    break;
  case 7:
    // DSLL64_32
    O << ", 32"; 
    return;
    break;
  case 8:
    // LBUX, LDXC1, LDXC164, LDXC164_P8, LHX, LUXC1, LUXC164, LWX, LWXC1, LWX...
    O << '('; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 9:
    // LwRxSpImmX16, SwRxSpImmX16
    O << " ( "; 
    printOperand(MI, 1, O); 
    O << " ); "; 
    return;
    break;
  case 10:
    // SLL64_32, SLL64_64
    O << ", 0"; 
    return;
    break;
  case 11:
    // SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZSlti, SelTBteqZSlt...
    O << "\n\tbteqz\t.+4\n\tmove "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 12:
    // SelTBtneZCmp, SelTBtneZCmpi, SelTBtneZSlt, SelTBtneZSlti, SelTBtneZSlt...
    O << "\n\tbtnez\t.+4\n\tmove "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  }


  // Fragment 4 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 26) & 1) {
    // ANDi, ANDi64, ANDi_MM, DEXT, DEXTM, DEXTU, DINS, DINSM, DINSU, DMFC0_3...
    printUnsignedImm(MI, 2, O); 
  } else {
    // ADD, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ADDQH_W, ADDQ_PH, ADDQ_S_PH, ADD...
    printOperand(MI, 2, O); 
  }


  // Fragment 5 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 27) & 1) {
    // DEXT, DEXTM, DEXTU, DINS, DINSM, DINSU, EXT, INS, MADD_D32, MADD_D64, ...
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
  } else {
    // ADD, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ADDQH_W, ADDQ_PH, ADDQ_S_PH, ADD...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *MipsInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 214 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'f', '1', '0', 0,
  /* 4 */ 'f', '2', '0', 0,
  /* 8 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '0', 0,
  /* 21 */ 'f', '3', '0', 0,
  /* 25 */ 'a', 'c', '0', 0,
  /* 29 */ 'f', 'c', 'c', '0', 0,
  /* 34 */ 'f', '0', 0,
  /* 37 */ 'f', '1', '1', 0,
  /* 41 */ 'f', '2', '1', 0,
  /* 45 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '1', 0,
  /* 58 */ 'f', '3', '1', 0,
  /* 62 */ 'a', 'c', '1', 0,
  /* 66 */ 'f', 'c', 'c', '1', 0,
  /* 71 */ 'f', '1', 0,
  /* 74 */ 'f', '1', '2', 0,
  /* 78 */ 'f', '2', '2', 0,
  /* 82 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '2', 0,
  /* 95 */ 'a', 'c', '2', 0,
  /* 99 */ 'f', 'c', 'c', '2', 0,
  /* 104 */ 'f', '2', 0,
  /* 107 */ 'f', '1', '3', 0,
  /* 111 */ 'f', '2', '3', 0,
  /* 115 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '3', 0,
  /* 128 */ 'a', 'c', '3', 0,
  /* 132 */ 'f', 'c', 'c', '3', 0,
  /* 137 */ 'f', '3', 0,
  /* 140 */ 'f', '1', '4', 0,
  /* 144 */ 'f', '2', '4', 0,
  /* 148 */ 'f', 'c', 'c', '4', 0,
  /* 153 */ 'f', '4', 0,
  /* 156 */ 'f', '1', '5', 0,
  /* 160 */ 'f', '2', '5', 0,
  /* 164 */ 'f', 'c', 'c', '5', 0,
  /* 169 */ 'f', '5', 0,
  /* 172 */ 'f', '1', '6', 0,
  /* 176 */ 'f', '2', '6', 0,
  /* 180 */ 'f', 'c', 'c', '6', 0,
  /* 185 */ 'f', '6', 0,
  /* 188 */ 'f', '1', '7', 0,
  /* 192 */ 'f', '2', '7', 0,
  /* 196 */ 'f', 'c', 'c', '7', 0,
  /* 201 */ 'f', '7', 0,
  /* 204 */ 'f', '1', '8', 0,
  /* 208 */ 'f', '2', '8', 0,
  /* 212 */ 'f', '8', 0,
  /* 215 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '1', '6', '_', '1', '9', 0,
  /* 231 */ 'f', '1', '9', 0,
  /* 235 */ 'f', '2', '9', 0,
  /* 239 */ 'f', '9', 0,
  /* 242 */ 'D', 'S', 'P', 'E', 'F', 'I', 0,
  /* 249 */ 'r', 'a', 0,
  /* 252 */ 'p', 'c', 0,
  /* 255 */ 'D', 'S', 'P', 'C', 'C', 'o', 'n', 'd', 0,
  /* 264 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', 0,
  /* 275 */ 'h', 'i', 0,
  /* 278 */ 'l', 'o', 0,
  /* 281 */ 'z', 'e', 'r', 'o', 0,
  /* 286 */ 'f', 'p', 0,
  /* 289 */ 'g', 'p', 0,
  /* 292 */ 's', 'p', 0,
  /* 295 */ 'D', 'S', 'P', 'P', 'o', 's', 0,
  /* 302 */ 'D', 'S', 'P', 'S', 'C', 'o', 'u', 'n', 't', 0,
  /* 312 */ 'D', 'S', 'P', 'C', 'a', 'r', 'r', 'y', 0,
  };

  static const uint32_t RegAsmOffset[] = {
    39, 255, 312, 242, 264, 295, 302, 286, 289, 25, 25, 252, 249, 292, 
    281, 142, 158, 174, 190, 25, 62, 95, 128, 39, 34, 104, 153, 185, 
    212, 0, 74, 140, 172, 204, 4, 78, 144, 176, 208, 21, 8, 45, 
    82, 115, 34, 71, 104, 137, 153, 169, 185, 201, 212, 239, 0, 37, 
    74, 107, 140, 156, 172, 188, 204, 231, 4, 41, 78, 111, 144, 160, 
    176, 192, 208, 235, 21, 58, 29, 66, 99, 132, 148, 164, 180, 196, 
    2, 39, 76, 109, 142, 158, 174, 190, 206, 229, 1, 38, 75, 108, 
    141, 157, 173, 189, 205, 228, 5, 42, 79, 112, 145, 161, 177, 193, 
    209, 236, 22, 59, 286, 289, 62, 95, 128, 275, 236, 177, 193, 62, 
    95, 128, 278, 249, 173, 189, 205, 228, 5, 42, 79, 112, 292, 206, 
    229, 1, 38, 75, 108, 141, 157, 145, 161, 76, 109, 281, 142, 158, 
    174, 190, 25, 34, 71, 104, 137, 153, 169, 185, 201, 212, 239, 0, 
    37, 74, 107, 140, 156, 172, 188, 204, 231, 4, 41, 78, 111, 144, 
    160, 176, 192, 208, 235, 21, 58, 215, 236, 177, 193, 173, 189, 205, 
    228, 5, 42, 79, 112, 206, 229, 1, 38, 75, 108, 141, 157, 145, 
    161, 76, 109, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

static unsigned getMapOperandNumber(const SmallVectorImpl<std::pair<StringRef, unsigned> > &OpMap,
                                    StringRef Name) {
  for (SmallVectorImpl<std::pair<StringRef, unsigned> >::const_iterator
         I = OpMap.begin(), E = OpMap.end(); I != E; ++I)
    if (I->first == Name)
      return I->second;
  llvm_unreachable("Operand not in map!");
}

bool MipsInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  StringRef AsmString;
  SmallVector<std::pair<StringRef, unsigned>, 4> OpMap;
  switch (MI->getOpcode()) {
  default: return false;
  case Mips::ADDu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO) {
      // (ADDu GPR32Opnd:$dst, GPR32Opnd:$src, ZERO)
      AsmString = "move $dst, $src";
      OpMap.push_back(std::make_pair("dst", 0));
      OpMap.push_back(std::make_pair("src", 1));
      break;
    }
    return false;
  case Mips::BREAK:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (BREAK 0, 0)
      AsmString = "break";
      break;
    }
    return false;
  case Mips::DADDu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO_64) {
      // (DADDu GPR64Opnd:$dst, GPR64Opnd:$src, ZERO_64)
      AsmString = "move $dst, $src";
      OpMap.push_back(std::make_pair("dst", 0));
      OpMap.push_back(std::make_pair("src", 1));
      break;
    }
    return false;
  case Mips::SLL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (SLL ZERO, ZERO, 0)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::SUB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUB GPR32Opnd:$rt, ZERO, GPR32Opnd:$rs)
      AsmString = "neg $rt, $rs";
      OpMap.push_back(std::make_pair("rs", 2));
      OpMap.push_back(std::make_pair("rt", 0));
      break;
    }
    return false;
  case Mips::SUBu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBu GPR32Opnd:$rt, ZERO, GPR32Opnd:$rs)
      AsmString = "negu $rt, $rs";
      OpMap.push_back(std::make_pair("rs", 2));
      OpMap.push_back(std::make_pair("rt", 0));
      break;
    }
    return false;
  case Mips::SYSCALL:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYSCALL 0)
      AsmString = "syscall";
      break;
    }
    return false;
  }

  std::pair<StringRef, StringRef> ASM = AsmString.split(' ');
  OS << '\t' << ASM.first;
  if (!ASM.second.empty()) {
    OS << '\t';
    for (StringRef::iterator
         I = ASM.second.begin(), E = ASM.second.end(); I != E; ) {
      if (*I == '$') {
        StringRef::iterator Start = ++I;
        while (I != E &&
               ((*I >= 'a' && *I <= 'z') ||
                (*I >= 'A' && *I <= 'Z') ||
                (*I >= '0' && *I <= '9') ||
                *I == '_'))
          ++I;
        StringRef Name(Start, I - Start);
        printOperand(MI, getMapOperandNumber(OpMap, Name), OS);
      } else {
        OS << *I++;
      }
    }
  }

  return true;
}

#endif // PRINT_ALIAS_INSTR
