/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Assembly Writer Source Fragment                                             *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void SystemZInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const uint32_t OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    3139U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    3132U,	// BUNDLE
    3149U,	// LIFETIME_START
    3119U,	// LIFETIME_END
    4098U,	// A
    4107U,	// ADB
    530636U,	// ADBR
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// ADJDYNALLOC
    4152U,	// AEB
    530739U,	// AEBR
    0U,	// AEXT128_64
    1054087U,	// AFI
    4905U,	// AG
    4789U,	// AGF
    1054097U,	// AGFI
    531038U,	// AGFR
    1578459U,	// AGHI
    18880128U,	// AGHIK
    531100U,	// AGR
    85989033U,	// AGRK
    75299U,	// AGSI
    5093U,	// AH
    1578449U,	// AHI
    18880122U,	// AHIK
    7070U,	// AHY
    5877U,	// AL
    4218U,	// ALC
    4943U,	// ALCG
    531112U,	// ALCGR
    530985U,	// ALCR
    2627001U,	// ALFI
    4974U,	// ALG
    4799U,	// ALGF
    2626973U,	// ALGFI
    531051U,	// ALGFR
    18880135U,	// ALGHSIK
    531132U,	// ALGR
    85989039U,	// ALGRK
    18880144U,	// ALHSIK
    531217U,	// ALR
    85989077U,	// ALRK
    7128U,	// ALY
    530631U,	// AR
    85989028U,	// ARK
    75294U,	// ASI
    0U,	// ATOMIC_CMP_SWAPW
    0U,	// ATOMIC_LOADW_AFI
    0U,	// ATOMIC_LOADW_AR
    0U,	// ATOMIC_LOADW_MAX
    0U,	// ATOMIC_LOADW_MIN
    0U,	// ATOMIC_LOADW_NILH
    0U,	// ATOMIC_LOADW_NILHi
    0U,	// ATOMIC_LOADW_NR
    0U,	// ATOMIC_LOADW_NRi
    0U,	// ATOMIC_LOADW_OILH
    0U,	// ATOMIC_LOADW_OR
    0U,	// ATOMIC_LOADW_SR
    0U,	// ATOMIC_LOADW_UMAX
    0U,	// ATOMIC_LOADW_UMIN
    0U,	// ATOMIC_LOADW_XILF
    0U,	// ATOMIC_LOADW_XR
    0U,	// ATOMIC_LOAD_AFI
    0U,	// ATOMIC_LOAD_AGFI
    0U,	// ATOMIC_LOAD_AGHI
    0U,	// ATOMIC_LOAD_AGR
    0U,	// ATOMIC_LOAD_AHI
    0U,	// ATOMIC_LOAD_AR
    0U,	// ATOMIC_LOAD_MAX_32
    0U,	// ATOMIC_LOAD_MAX_64
    0U,	// ATOMIC_LOAD_MIN_32
    0U,	// ATOMIC_LOAD_MIN_64
    0U,	// ATOMIC_LOAD_NGR
    0U,	// ATOMIC_LOAD_NGRi
    0U,	// ATOMIC_LOAD_NIHF
    0U,	// ATOMIC_LOAD_NIHFi
    0U,	// ATOMIC_LOAD_NIHH
    0U,	// ATOMIC_LOAD_NIHHi
    0U,	// ATOMIC_LOAD_NIHL
    0U,	// ATOMIC_LOAD_NIHLi
    0U,	// ATOMIC_LOAD_NILF
    0U,	// ATOMIC_LOAD_NILF32
    0U,	// ATOMIC_LOAD_NILF32i
    0U,	// ATOMIC_LOAD_NILFi
    0U,	// ATOMIC_LOAD_NILH
    0U,	// ATOMIC_LOAD_NILH32
    0U,	// ATOMIC_LOAD_NILH32i
    0U,	// ATOMIC_LOAD_NILHi
    0U,	// ATOMIC_LOAD_NILL
    0U,	// ATOMIC_LOAD_NILL32
    0U,	// ATOMIC_LOAD_NILL32i
    0U,	// ATOMIC_LOAD_NILLi
    0U,	// ATOMIC_LOAD_NR
    0U,	// ATOMIC_LOAD_NRi
    0U,	// ATOMIC_LOAD_OGR
    0U,	// ATOMIC_LOAD_OIHF
    0U,	// ATOMIC_LOAD_OIHH
    0U,	// ATOMIC_LOAD_OIHL
    0U,	// ATOMIC_LOAD_OILF
    0U,	// ATOMIC_LOAD_OILF32
    0U,	// ATOMIC_LOAD_OILH
    0U,	// ATOMIC_LOAD_OILH32
    0U,	// ATOMIC_LOAD_OILL
    0U,	// ATOMIC_LOAD_OILL32
    0U,	// ATOMIC_LOAD_OR
    0U,	// ATOMIC_LOAD_SGR
    0U,	// ATOMIC_LOAD_SR
    0U,	// ATOMIC_LOAD_UMAX_32
    0U,	// ATOMIC_LOAD_UMAX_64
    0U,	// ATOMIC_LOAD_UMIN_32
    0U,	// ATOMIC_LOAD_UMIN_64
    0U,	// ATOMIC_LOAD_XGR
    0U,	// ATOMIC_LOAD_XIHF
    0U,	// ATOMIC_LOAD_XILF
    0U,	// ATOMIC_LOAD_XILF32
    0U,	// ATOMIC_LOAD_XR
    0U,	// ATOMIC_SWAPW
    0U,	// ATOMIC_SWAP_32
    0U,	// ATOMIC_SWAP_64
    530890U,	// AXBR
    7033U,	// AY
    2104109U,	// AsmBASR
    3152718U,	// AsmBRAS
    3151948U,	// AsmBRASL
    12431U,	// AsmBRC
    14086U,	// AsmBRCL
    37230179U,	// AsmCGIJ
    153097838U,	// AsmCGRJ
    37230174U,	// AsmCIJ
    153097833U,	// AsmCRJ
    16767U,	// AsmEJ
    16579U,	// AsmEJG
    4198567U,	// AsmELOC
    4198580U,	// AsmELOCG
    529064U,	// AsmELOCGR
    529057U,	// AsmELOCR
    4722861U,	// AsmESTOC
    4722875U,	// AsmESTOCG
    16624U,	// AsmHEJ
    16616U,	// AsmHEJG
    4198600U,	// AsmHELOC
    4198615U,	// AsmHELOCG
    528756U,	// AsmHELOCGR
    528748U,	// AsmHELOCR
    4722895U,	// AsmHESTOC
    4722911U,	// AsmHESTOCG
    17451U,	// AsmHJ
    17413U,	// AsmHJG
    4199401U,	// AsmHLOC
    4199414U,	// AsmHLOCG
    529782U,	// AsmHLOCGR
    529775U,	// AsmHLOCR
    4723695U,	// AsmHSTOC
    4723709U,	// AsmHSTOCG
    54007000U,	// AsmJEAltCGI
    220206313U,	// AsmJEAltCGR
    54006992U,	// AsmJEAltCI
    220206305U,	// AsmJEAltCR
    54006147U,	// AsmJECGI
    220205456U,	// AsmJECGR
    54006141U,	// AsmJECI
    220205450U,	// AsmJECR
    54006286U,	// AsmJHAltCGI
    220205599U,	// AsmJHAltCGR
    54006278U,	// AsmJHAltCI
    220205591U,	// AsmJHAltCR
    54006831U,	// AsmJHCGI
    220206140U,	// AsmJHCGR
    54006825U,	// AsmJHCI
    220206134U,	// AsmJHCR
    54007719U,	// AsmJHEAltCGI
    220207030U,	// AsmJHEAltCGR
    54007712U,	// AsmJHEAltCI
    220207023U,	// AsmJHEAltCR
    54006005U,	// AsmJHECGI
    220205316U,	// AsmJHECGR
    54005998U,	// AsmJHECI
    220205309U,	// AsmJHECR
    54006079U,	// AsmJLAltCGI
    220205392U,	// AsmJLAltCGR
    54006071U,	// AsmJLAltCI
    220205384U,	// AsmJLAltCR
    54007619U,	// AsmJLCGI
    220206928U,	// AsmJLCGR
    54007613U,	// AsmJLCI
    220206922U,	// AsmJLCR
    54007111U,	// AsmJLEAltCGI
    220206422U,	// AsmJLEAltCGR
    54007104U,	// AsmJLEAltCI
    220206415U,	// AsmJLEAltCR
    54006212U,	// AsmJLECGI
    220205523U,	// AsmJLECGR
    54006205U,	// AsmJLECI
    220205516U,	// AsmJLECR
    54006393U,	// AsmJLHAltCGI
    220205704U,	// AsmJLHAltCGR
    54006386U,	// AsmJLHAltCI
    220205697U,	// AsmJLHAltCR
    54006921U,	// AsmJLHCGI
    220206232U,	// AsmJLHCGR
    54006914U,	// AsmJLHCI
    220206225U,	// AsmJLHCR
    16831U,	// AsmLEJ
    16823U,	// AsmLEJG
    4198807U,	// AsmLELOC
    4198822U,	// AsmLELOCG
    528963U,	// AsmLELOCGR
    528955U,	// AsmLELOCR
    4723102U,	// AsmLESTOC
    4723118U,	// AsmLESTOCG
    17540U,	// AsmLHJ
    17507U,	// AsmLHJG
    4199491U,	// AsmLHLOC
    4199506U,	// AsmLHLOCG
    529677U,	// AsmLHLOCGR
    529669U,	// AsmLHLOCR
    4723786U,	// AsmLHSTOC
    4723802U,	// AsmLHSTOCG
    18239U,	// AsmLJ
    18207U,	// AsmLJG
    4200185U,	// AsmLLOC
    4200208U,	// AsmLLOCG
    530419U,	// AsmLLOCGR
    530389U,	// AsmLLOCR
    289411204U,	// AsmLOC
    289411925U,	// AsmLOCG
    352852655U,	// AsmLOCGR
    352852533U,	// AsmLOCR
    4724479U,	// AsmLSTOC
    4724503U,	// AsmLSTOCG
    17012U,	// AsmNEJ
    17004U,	// AsmNEJG
    4198988U,	// AsmNELOC
    4199003U,	// AsmNELOCG
    529048U,	// AsmNELOCGR
    529040U,	// AsmNELOCR
    4723283U,	// AsmNESTOC
    4723299U,	// AsmNESTOCG
    16697U,	// AsmNHEJ
    16688U,	// AsmNHEJG
    4198668U,	// AsmNHELOC
    4198685U,	// AsmNHELOCG
    528738U,	// AsmNHELOCGR
    528729U,	// AsmNHELOCR
    4722964U,	// AsmNHESTOC
    4722982U,	// AsmNHESTOCG
    17730U,	// AsmNHJ
    17722U,	// AsmNHJG
    4199706U,	// AsmNHLOC
    4199721U,	// AsmNHLOCG
    529766U,	// AsmNHLOCGR
    529758U,	// AsmNHLOCR
    4724001U,	// AsmNHSTOC
    4724017U,	// AsmNHSTOCG
    16904U,	// AsmNLEJ
    16895U,	// AsmNLEJG
    4198875U,	// AsmNLELOC
    4198892U,	// AsmNLELOCG
    528945U,	// AsmNLELOCGR
    528936U,	// AsmNLELOCR
    4723171U,	// AsmNLESTOC
    4723189U,	// AsmNLESTOCG
    17618U,	// AsmNLHJ
    17609U,	// AsmNLHJG
    4199589U,	// AsmNLHLOC
    4199606U,	// AsmNLHLOCG
    529659U,	// AsmNLHLOCGR
    529650U,	// AsmNLHLOCR
    4723885U,	// AsmNLHSTOC
    4723903U,	// AsmNLHSTOCG
    18338U,	// AsmNLJ
    18330U,	// AsmNLJG
    4200314U,	// AsmNLLOC
    4200329U,	// AsmNLLOCG
    530374U,	// AsmNLLOCGR
    530366U,	// AsmNLLOCR
    4724609U,	// AsmNLSTOC
    4724625U,	// AsmNLSTOCG
    18593U,	// AsmNOJ
    18587U,	// AsmNOJG
    4200571U,	// AsmNOLOC
    4200586U,	// AsmNOLOCG
    530606U,	// AsmNOLOCGR
    530598U,	// AsmNOLOCR
    4724866U,	// AsmNOSTOC
    4724882U,	// AsmNOSTOCG
    18551U,	// AsmOJ
    18546U,	// AsmOJG
    4200534U,	// AsmOLOC
    4200547U,	// AsmOLOCG
    530622U,	// AsmOLOCGR
    530615U,	// AsmOLOCR
    4724828U,	// AsmOSTOC
    4724842U,	// AsmOSTOCG
    357044361U,	// AsmSTOC
    357045083U,	// AsmSTOCG
    138255U,	// BASR
    137422U,	// BR
    23579U,	// BRAS
    23554U,	// BRASL
    27765U,	// BRC
    27760U,	// BRCL
    5249884U,	// BRCT
    5247939U,	// BRCTG
    5771379U,	// C
    5771280U,	// CDB
    2103507U,	// CDBR
    2103700U,	// CDFBR
    2103721U,	// CDGBR
    5771325U,	// CEB
    2103610U,	// CEBR
    2103707U,	// CEFBR
    2103728U,	// CEGBR
    6297830U,	// CFDBR
    6297941U,	// CFEBR
    6821260U,	// CFI
    6298085U,	// CFXBR
    5772113U,	// CG
    6297837U,	// CGDBR
    6297948U,	// CGEBR
    5771962U,	// CGF
    6821271U,	// CGFI
    2103909U,	// CGFR
    3151836U,	// CGFRL
    5772280U,	// CGH
    7345633U,	// CGHI
    3151887U,	// CGHRL
    206391U,	// CGHSI
    294007U,	// CGIJ
    2103978U,	// CGR
    359552U,	// CGRJ
    3151861U,	// CGRL
    6298092U,	// CGXBR
    5772267U,	// CH
    206406U,	// CHHSI
    7345622U,	// CHI
    3151881U,	// CHRL
    206377U,	// CHSI
    5774243U,	// CHY
    294003U,	// CIJ
    5773051U,	// CL
    402991U,	// CLFHSI
    7869887U,	// CLFI
    5772155U,	// CLG
    5771973U,	// CLGF
    7869860U,	// CLGFI
    2103922U,	// CLGFR
    3151843U,	// CLGFRL
    3151894U,	// CLGHRL
    403006U,	// CLGHSI
    2104002U,	// CLGR
    3151867U,	// CLGRL
    403021U,	// CLHHSI
    3151910U,	// CLHRL
    468497U,	// CLI
    469949U,	// CLIY
    2104086U,	// CLR
    3151931U,	// CLRL
    5774301U,	// CLY
    85989958U,	// CPSDRdd
    85989958U,	// CPSDRds
    85989958U,	// CPSDRsd
    85989958U,	// CPSDRss
    2103845U,	// CR
    359548U,	// CRJ
    3151831U,	// CRL
    419961684U,	// CS
    419959732U,	// CSG
    419961839U,	// CSY
    2103761U,	// CXBR
    2103714U,	// CXFBR
    2103741U,	// CXGBR
    5774206U,	// CY
    0U,	// CondStore16
    0U,	// CondStore16Inv
    0U,	// CondStore16_32
    0U,	// CondStore16_32Inv
    0U,	// CondStore32
    0U,	// CondStore32Inv
    0U,	// CondStore32_32
    0U,	// CondStore32_32Inv
    0U,	// CondStore64
    0U,	// CondStore64Inv
    0U,	// CondStore8
    0U,	// CondStore8Inv
    0U,	// CondStore8_32
    0U,	// CondStore8_32Inv
    0U,	// CondStoreF32
    0U,	// CondStoreF32Inv
    0U,	// CondStoreF64
    0U,	// CondStoreF64Inv
    4117U,	// DDB
    530649U,	// DDBR
    4163U,	// DEB
    530753U,	// DEBR
    5900U,	// DL
    4992U,	// DLG
    531144U,	// DLGR
    531227U,	// DLR
    5049U,	// DSG
    4823U,	// DSGF
    531079U,	// DSGFR
    531174U,	// DSGR
    530904U,	// DXBR
    8394950U,	// EAR
    6297844U,	// FIDBR
    6297955U,	// FIEBR
    6298099U,	// FIXBR
    2104031U,	// FLOGR
    4214U,	// IC
    4214U,	// IC32
    7037U,	// IC32Y
    7037U,	// ICY
    2626281U,	// IIHF
    8918032U,	// IIHH
    8918820U,	// IIHL
    2626312U,	// IILF
    7869192U,	// IILF32
    8918121U,	// IILH
    8918121U,	// IILH32
    8918871U,	// IILL
    8918871U,	// IILL32
    18016U,	// J
    17258U,	// JG
    5773046U,	// L
    0U,	// L128
    5771265U,	// LA
    3151823U,	// LARL
    5774200U,	// LAY
    5771372U,	// LB
    2103749U,	// LBR
    2103506U,	// LCDBR
    2103609U,	// LCEBR
    2103908U,	// LCGFR
    2103977U,	// LCGR
    2103850U,	// LCR
    2103760U,	// LCXBR
    5771422U,	// LD
    5771330U,	// LDEB
    2103616U,	// LDEBR
    2103990U,	// LDGR
    2103873U,	// LDR
    2103767U,	// LDXBR
    5774216U,	// LDY
    5771674U,	// LE
    2103519U,	// LEDBR
    2103891U,	// LER
    2103774U,	// LEXBR
    5774227U,	// LEY
    5772143U,	// LG
    5771366U,	// LGB
    2103735U,	// LGBR
    2103867U,	// LGDR
    5771968U,	// LGF
    6821278U,	// LGFI
    2103916U,	// LGFR
    3151844U,	// LGFRL
    5772299U,	// LGH
    7345639U,	// LGHI
    2104069U,	// LGHR
    3151895U,	// LGHRL
    2103997U,	// LGR
    3151868U,	// LGRL
    5772358U,	// LH
    7345665U,	// LHI
    2104076U,	// LHR
    3151911U,	// LHRL
    5774248U,	// LHY
    5771391U,	// LLC
    2103855U,	// LLCR
    5771376U,	// LLGC
    2103842U,	// LLGCR
    5771979U,	// LLGF
    2103929U,	// LLGFR
    3151851U,	// LLGFRL
    5772298U,	// LLGH
    2104068U,	// LLGHR
    3151902U,	// LLGHRL
    5772448U,	// LLH
    2104075U,	// LLHR
    3151917U,	// LLHRL
    7869167U,	// LLIHF
    9442326U,	// LLIHH
    9443114U,	// LLIHL
    7869198U,	// LLILF
    9442415U,	// LLILH
    9443165U,	// LLILL
    488641441U,	// LMG
    2103553U,	// LNDBR
    2103658U,	// LNEBR
    2103808U,	// LNXBR
    35932U,	// LOC
    35941U,	// LOCG
    40074U,	// LOCGR
    40069U,	// LOCR
    2103560U,	// LPDBR
    2103665U,	// LPEBR
    2103815U,	// LPXBR
    2104082U,	// LR
    3151932U,	// LRL
    5774186U,	// LRV
    5772244U,	// LRVG
    2104056U,	// LRVGR
    2104125U,	// LRVR
    5774178U,	// LT
    2103581U,	// LTDBR
    2103581U,	// LTDBRCompare
    2103686U,	// LTEBR
    2103686U,	// LTEBRCompare
    5772234U,	// LTG
    5772003U,	// LTGF
    2103957U,	// LTGFR
    2104050U,	// LTGR
    2104120U,	// LTR
    2103835U,	// LTXBR
    2103835U,	// LTXBRCompare
    0U,	// LX
    5771307U,	// LXDB
    2103588U,	// LXDBR
    5771360U,	// LXEB
    2103693U,	// LXEBR
    2104131U,	// LXR
    5774297U,	// LY
    137805U,	// LZDR
    137816U,	// LZER
    138056U,	// LZXR
    554176522U,	// MADB
    621287627U,	// MADBR
    554176567U,	// MAEB
    621287730U,	// MAEBR
    4122U,	// MDB
    530683U,	// MDBR
    4168U,	// MDEB
    530759U,	// MDEBR
    4174U,	// MEEB
    530766U,	// MEEBR
    1578477U,	// MGHI
    5398U,	// MH
    1578502U,	// MHI
    7085U,	// MHY
    5009U,	// MLG
    531150U,	// MLGR
    7000U,	// MS
    554176549U,	// MSDB
    621287702U,	// MSDBR
    554176602U,	// MSEB
    621287807U,	// MSEBR
    1054155U,	// MSFI
    5054U,	// MSG
    4829U,	// MSGF
    1054130U,	// MSGFI
    531086U,	// MSGFR
    531180U,	// MSGR
    531251U,	// MSR
    7156U,	// MSY
    41113U,	// MVC
    0U,	// MVCWrapper
    206323U,	// MVGHI
    206330U,	// MVHHI
    206347U,	// MVHI
    468565U,	// MVI
    469965U,	// MVIY
    530938U,	// MXBR
    4145U,	// MXDB
    530731U,	// MXDBR
    6227U,	// N
    5036U,	// NG
    531162U,	// NGR
    85989053U,	// NGRK
    468502U,	// NI
    2626294U,	// NIHF
    8918045U,	// NIHH
    8918833U,	// NIHL
    2626325U,	// NILF
    2626325U,	// NILF32
    8918134U,	// NILH
    8918134U,	// NILH32
    8918884U,	// NILL
    8918884U,	// NILL32
    469955U,	// NIY
    531237U,	// NR
    85989089U,	// NRK
    7143U,	// NY
    6233U,	// O
    5040U,	// OG
    531169U,	// OGR
    85989059U,	// OGRK
    468506U,	// OI
    2626300U,	// OIHF
    8918051U,	// OIHH
    8918839U,	// OIHL
    2626331U,	// OILF
    2626331U,	// OILF32
    8918140U,	// OILH
    8918140U,	// OILH32
    8918890U,	// OILL
    8918890U,	// OILL32
    469960U,	// OIY
    531241U,	// OR
    85989094U,	// ORK
    7147U,	// OY
    3111U,	// RET
    688395059U,	// RISBG
    688395059U,	// RISBG32
    688395106U,	// RISBHG
    688395123U,	// RISBLG
    688395123U,	// RISBLG32
    488642416U,	// RLL
    488641413U,	// RLLG
    688395066U,	// RNSBG
    688395073U,	// ROSBG
    688395080U,	// RXSBG
    6993U,	// S
    4134U,	// SDB
    530711U,	// SDBR
    4187U,	// SEB
    530816U,	// SEBR
    5045U,	// SG
    4824U,	// SGF
    531080U,	// SGFR
    531175U,	// SGR
    85989065U,	// SGRK
    5502U,	// SH
    7090U,	// SHY
    6223U,	// SL
    4203U,	// SLB
    4909U,	// SLBG
    530884U,	// SLBR
    2627013U,	// SLFI
    5020U,	// SLG
    531105U,	// SLGBR
    4817U,	// SLGF
    2626987U,	// SLGFI
    531072U,	// SLGFR
    531156U,	// SLGR
    85989046U,	// SLGRK
    4200309U,	// SLL
    488641419U,	// SLLG
    488642200U,	// SLLK
    531232U,	// SLR
    85989083U,	// SLRK
    7138U,	// SLY
    5771295U,	// SQDB
    2103567U,	// SQDBR
    5771348U,	// SQEB
    2103672U,	// SQEBR
    2103822U,	// SQXBR
    531247U,	// SR
    4198405U,	// SRA
    488641319U,	// SRAG
    488642164U,	// SRAK
    85989099U,	// SRK
    4200513U,	// SRL
    488641430U,	// SRLG
    488642206U,	// SRLK
    5774182U,	// ST
    0U,	// ST128
    5774182U,	// ST32
    5774329U,	// ST32Y
    5771412U,	// STC
    5771412U,	// STC32
    5774210U,	// STC32Y
    5774210U,	// STCY
    5771426U,	// STD
    5774221U,	// STDY
    5771952U,	// STE
    5774232U,	// STEY
    5772239U,	// STG
    3151874U,	// STGRL
    5772674U,	// STH
    5772674U,	// STH32
    5774263U,	// STH32Y
    3151924U,	// STHRL
    3151924U,	// STHRL32
    5774263U,	// STHY
    488641446U,	// STMG
    48224U,	// STOC
    48224U,	// STOC32
    48234U,	// STOCG
    3151942U,	// STRL
    3151942U,	// STRL32
    5774191U,	// STRV
    5772250U,	// STRVG
    0U,	// STX
    5774329U,	// STY
    530965U,	// SXBR
    7152U,	// SY
    0U,	// Select32
    0U,	// Select64
    0U,	// SelectF128
    0U,	// SelectF32
    0U,	// SelectF64
    7029U,	// X
    5089U,	// XG
    531199U,	// XGR
    85989071U,	// XGRK
    468570U,	// XI
    2626306U,	// XIHF
    2626337U,	// XILF
    2626337U,	// XILF32
    469971U,	// XIY
    531268U,	// XR
    85989104U,	// XRK
    7166U,	// XY
    0U,	// ZEXT128_32
    0U,	// ZEXT128_64
    0U
  };

  const char AsmStrs[] = {
  /* 0 */ 'l', 'a', 9, 0,
  /* 4 */ 's', 'r', 'a', 9, 0,
  /* 9 */ 'm', 'a', 'd', 'b', 9, 0,
  /* 15 */ 'c', 'd', 'b', 9, 0,
  /* 20 */ 'd', 'd', 'b', 9, 0,
  /* 25 */ 'm', 'd', 'b', 9, 0,
  /* 30 */ 's', 'q', 'd', 'b', 9, 0,
  /* 36 */ 'm', 's', 'd', 'b', 9, 0,
  /* 42 */ 'l', 'x', 'd', 'b', 9, 0,
  /* 48 */ 'm', 'x', 'd', 'b', 9, 0,
  /* 54 */ 'm', 'a', 'e', 'b', 9, 0,
  /* 60 */ 'c', 'e', 'b', 9, 0,
  /* 65 */ 'l', 'd', 'e', 'b', 9, 0,
  /* 71 */ 'm', 'd', 'e', 'b', 9, 0,
  /* 77 */ 'm', 'e', 'e', 'b', 9, 0,
  /* 83 */ 's', 'q', 'e', 'b', 9, 0,
  /* 89 */ 'm', 's', 'e', 'b', 9, 0,
  /* 95 */ 'l', 'x', 'e', 'b', 9, 0,
  /* 101 */ 'l', 'g', 'b', 9, 0,
  /* 106 */ 's', 'l', 'b', 9, 0,
  /* 111 */ 'l', 'l', 'g', 'c', 9, 0,
  /* 117 */ 'i', 'c', 9, 0,
  /* 121 */ 'a', 'l', 'c', 9, 0,
  /* 126 */ 'l', 'l', 'c', 9, 0,
  /* 131 */ 'l', 'o', 'c', 9, 0,
  /* 136 */ 's', 't', 'o', 'c', 9, 0,
  /* 142 */ 'b', 'r', 'c', 9, 0,
  /* 147 */ 's', 't', 'c', 9, 0,
  /* 152 */ 'm', 'v', 'c', 9, 0,
  /* 157 */ 'l', 'd', 9, 0,
  /* 161 */ 's', 't', 'd', 9, 0,
  /* 166 */ 'l', 'o', 'c', 'e', 9, 0,
  /* 172 */ 's', 't', 'o', 'c', 'e', 9, 0,
  /* 179 */ 'l', 'o', 'c', 'g', 'e', 9, 0,
  /* 186 */ 's', 't', 'o', 'c', 'g', 'e', 9, 0,
  /* 194 */ 'j', 'g', 'e', 9, 0,
  /* 199 */ 'l', 'o', 'c', 'h', 'e', 9, 0,
  /* 206 */ 's', 't', 'o', 'c', 'h', 'e', 9, 0,
  /* 214 */ 'l', 'o', 'c', 'g', 'h', 'e', 9, 0,
  /* 222 */ 's', 't', 'o', 'c', 'g', 'h', 'e', 9, 0,
  /* 231 */ 'j', 'g', 'h', 'e', 9, 0,
  /* 237 */ 'c', 'i', 'j', 'h', 'e', 9, 0,
  /* 244 */ 'c', 'g', 'i', 'j', 'h', 'e', 9, 0,
  /* 252 */ 'c', 'r', 'j', 'h', 'e', 9, 0,
  /* 259 */ 'c', 'g', 'r', 'j', 'h', 'e', 9, 0,
  /* 267 */ 'l', 'o', 'c', 'n', 'h', 'e', 9, 0,
  /* 275 */ 's', 't', 'o', 'c', 'n', 'h', 'e', 9, 0,
  /* 284 */ 'l', 'o', 'c', 'g', 'n', 'h', 'e', 9, 0,
  /* 293 */ 's', 't', 'o', 'c', 'g', 'n', 'h', 'e', 9, 0,
  /* 303 */ 'j', 'g', 'n', 'h', 'e', 9, 0,
  /* 310 */ 'c', 'i', 'j', 'n', 'h', 'e', 9, 0,
  /* 318 */ 'c', 'g', 'i', 'j', 'n', 'h', 'e', 9, 0,
  /* 327 */ 'c', 'r', 'j', 'n', 'h', 'e', 9, 0,
  /* 335 */ 'c', 'g', 'r', 'j', 'n', 'h', 'e', 9, 0,
  /* 344 */ 'l', 'o', 'c', 'r', 'n', 'h', 'e', 9, 0,
  /* 353 */ 'l', 'o', 'c', 'g', 'r', 'n', 'h', 'e', 9, 0,
  /* 363 */ 'l', 'o', 'c', 'r', 'h', 'e', 9, 0,
  /* 371 */ 'l', 'o', 'c', 'g', 'r', 'h', 'e', 9, 0,
  /* 380 */ 'c', 'i', 'j', 'e', 9, 0,
  /* 386 */ 'c', 'g', 'i', 'j', 'e', 9, 0,
  /* 393 */ 'c', 'r', 'j', 'e', 9, 0,
  /* 399 */ 'c', 'g', 'r', 'j', 'e', 9, 0,
  /* 406 */ 'l', 'o', 'c', 'l', 'e', 9, 0,
  /* 413 */ 's', 't', 'o', 'c', 'l', 'e', 9, 0,
  /* 421 */ 'l', 'o', 'c', 'g', 'l', 'e', 9, 0,
  /* 429 */ 's', 't', 'o', 'c', 'g', 'l', 'e', 9, 0,
  /* 438 */ 'j', 'g', 'l', 'e', 9, 0,
  /* 444 */ 'c', 'i', 'j', 'l', 'e', 9, 0,
  /* 451 */ 'c', 'g', 'i', 'j', 'l', 'e', 9, 0,
  /* 459 */ 'c', 'r', 'j', 'l', 'e', 9, 0,
  /* 466 */ 'c', 'g', 'r', 'j', 'l', 'e', 9, 0,
  /* 474 */ 'l', 'o', 'c', 'n', 'l', 'e', 9, 0,
  /* 482 */ 's', 't', 'o', 'c', 'n', 'l', 'e', 9, 0,
  /* 491 */ 'l', 'o', 'c', 'g', 'n', 'l', 'e', 9, 0,
  /* 500 */ 's', 't', 'o', 'c', 'g', 'n', 'l', 'e', 9, 0,
  /* 510 */ 'j', 'g', 'n', 'l', 'e', 9, 0,
  /* 517 */ 'c', 'i', 'j', 'n', 'l', 'e', 9, 0,
  /* 525 */ 'c', 'g', 'i', 'j', 'n', 'l', 'e', 9, 0,
  /* 534 */ 'c', 'r', 'j', 'n', 'l', 'e', 9, 0,
  /* 542 */ 'c', 'g', 'r', 'j', 'n', 'l', 'e', 9, 0,
  /* 551 */ 'l', 'o', 'c', 'r', 'n', 'l', 'e', 9, 0,
  /* 560 */ 'l', 'o', 'c', 'g', 'r', 'n', 'l', 'e', 9, 0,
  /* 570 */ 'l', 'o', 'c', 'r', 'l', 'e', 9, 0,
  /* 578 */ 'l', 'o', 'c', 'g', 'r', 'l', 'e', 9, 0,
  /* 587 */ 'l', 'o', 'c', 'n', 'e', 9, 0,
  /* 594 */ 's', 't', 'o', 'c', 'n', 'e', 9, 0,
  /* 602 */ 'l', 'o', 'c', 'g', 'n', 'e', 9, 0,
  /* 610 */ 's', 't', 'o', 'c', 'g', 'n', 'e', 9, 0,
  /* 619 */ 'j', 'g', 'n', 'e', 9, 0,
  /* 625 */ 'c', 'i', 'j', 'n', 'e', 9, 0,
  /* 632 */ 'c', 'g', 'i', 'j', 'n', 'e', 9, 0,
  /* 640 */ 'c', 'r', 'j', 'n', 'e', 9, 0,
  /* 647 */ 'c', 'g', 'r', 'j', 'n', 'e', 9, 0,
  /* 655 */ 'l', 'o', 'c', 'r', 'n', 'e', 9, 0,
  /* 663 */ 'l', 'o', 'c', 'g', 'r', 'n', 'e', 9, 0,
  /* 672 */ 'l', 'o', 'c', 'r', 'e', 9, 0,
  /* 679 */ 'l', 'o', 'c', 'g', 'r', 'e', 9, 0,
  /* 687 */ 's', 't', 'e', 9, 0,
  /* 692 */ 'a', 'g', 'f', 9, 0,
  /* 697 */ 'c', 'g', 'f', 9, 0,
  /* 702 */ 'a', 'l', 'g', 'f', 9, 0,
  /* 708 */ 'c', 'l', 'g', 'f', 9, 0,
  /* 714 */ 'l', 'l', 'g', 'f', 9, 0,
  /* 720 */ 's', 'l', 'g', 'f', 9, 0,
  /* 726 */ 'd', 's', 'g', 'f', 9, 0,
  /* 732 */ 'm', 's', 'g', 'f', 9, 0,
  /* 738 */ 'l', 't', 'g', 'f', 9, 0,
  /* 744 */ 'i', 'i', 'h', 'f', 9, 0,
  /* 750 */ 'l', 'l', 'i', 'h', 'f', 9, 0,
  /* 757 */ 'n', 'i', 'h', 'f', 9, 0,
  /* 763 */ 'o', 'i', 'h', 'f', 9, 0,
  /* 769 */ 'x', 'i', 'h', 'f', 9, 0,
  /* 775 */ 'i', 'i', 'l', 'f', 9, 0,
  /* 781 */ 'l', 'l', 'i', 'l', 'f', 9, 0,
  /* 788 */ 'n', 'i', 'l', 'f', 9, 0,
  /* 794 */ 'o', 'i', 'l', 'f', 9, 0,
  /* 800 */ 'x', 'i', 'l', 'f', 9, 0,
  /* 806 */ 's', 'r', 'a', 'g', 9, 0,
  /* 812 */ 's', 'l', 'b', 'g', 9, 0,
  /* 818 */ 'r', 'i', 's', 'b', 'g', 9, 0,
  /* 825 */ 'r', 'n', 's', 'b', 'g', 9, 0,
  /* 832 */ 'r', 'o', 's', 'b', 'g', 9, 0,
  /* 839 */ 'r', 'x', 's', 'b', 'g', 9, 0,
  /* 846 */ 'a', 'l', 'c', 'g', 9, 0,
  /* 852 */ 'l', 'o', 'c', 'g', 9, 0,
  /* 858 */ 's', 't', 'o', 'c', 'g', 9, 0,
  /* 865 */ 'r', 'i', 's', 'b', 'h', 'g', 9, 0,
  /* 873 */ 'j', 'g', 9, 0,
  /* 877 */ 'a', 'l', 'g', 9, 0,
  /* 882 */ 'r', 'i', 's', 'b', 'l', 'g', 9, 0,
  /* 890 */ 'c', 'l', 'g', 9, 0,
  /* 895 */ 'd', 'l', 'g', 9, 0,
  /* 900 */ 'r', 'l', 'l', 'g', 9, 0,
  /* 906 */ 's', 'l', 'l', 'g', 9, 0,
  /* 912 */ 'm', 'l', 'g', 9, 0,
  /* 917 */ 's', 'r', 'l', 'g', 9, 0,
  /* 923 */ 's', 'l', 'g', 9, 0,
  /* 928 */ 'l', 'm', 'g', 9, 0,
  /* 933 */ 's', 't', 'm', 'g', 9, 0,
  /* 939 */ 'n', 'g', 9, 0,
  /* 943 */ 'o', 'g', 9, 0,
  /* 947 */ 'c', 's', 'g', 9, 0,
  /* 952 */ 'd', 's', 'g', 9, 0,
  /* 957 */ 'm', 's', 'g', 9, 0,
  /* 962 */ 'b', 'r', 'c', 't', 'g', 9, 0,
  /* 969 */ 'l', 't', 'g', 9, 0,
  /* 974 */ 's', 't', 'g', 9, 0,
  /* 979 */ 'l', 'r', 'v', 'g', 9, 0,
  /* 985 */ 's', 't', 'r', 'v', 'g', 9, 0,
  /* 992 */ 'x', 'g', 9, 0,
  /* 996 */ 'a', 'h', 9, 0,
  /* 1000 */ 'l', 'o', 'c', 'h', 9, 0,
  /* 1006 */ 's', 't', 'o', 'c', 'h', 9, 0,
  /* 1013 */ 'l', 'o', 'c', 'g', 'h', 9, 0,
  /* 1020 */ 's', 't', 'o', 'c', 'g', 'h', 9, 0,
  /* 1028 */ 'j', 'g', 'h', 9, 0,
  /* 1033 */ 'l', 'l', 'g', 'h', 9, 0,
  /* 1039 */ 'i', 'i', 'h', 'h', 9, 0,
  /* 1045 */ 'l', 'l', 'i', 'h', 'h', 9, 0,
  /* 1052 */ 'n', 'i', 'h', 'h', 9, 0,
  /* 1058 */ 'o', 'i', 'h', 'h', 9, 0,
  /* 1064 */ 'c', 'i', 'j', 'h', 9, 0,
  /* 1070 */ 'c', 'g', 'i', 'j', 'h', 9, 0,
  /* 1077 */ 'c', 'r', 'j', 'h', 9, 0,
  /* 1083 */ 'c', 'g', 'r', 'j', 'h', 9, 0,
  /* 1090 */ 'l', 'o', 'c', 'l', 'h', 9, 0,
  /* 1097 */ 's', 't', 'o', 'c', 'l', 'h', 9, 0,
  /* 1105 */ 'l', 'o', 'c', 'g', 'l', 'h', 9, 0,
  /* 1113 */ 's', 't', 'o', 'c', 'g', 'l', 'h', 9, 0,
  /* 1122 */ 'j', 'g', 'l', 'h', 9, 0,
  /* 1128 */ 'i', 'i', 'l', 'h', 9, 0,
  /* 1134 */ 'l', 'l', 'i', 'l', 'h', 9, 0,
  /* 1141 */ 'n', 'i', 'l', 'h', 9, 0,
  /* 1147 */ 'o', 'i', 'l', 'h', 9, 0,
  /* 1153 */ 'c', 'i', 'j', 'l', 'h', 9, 0,
  /* 1160 */ 'c', 'g', 'i', 'j', 'l', 'h', 9, 0,
  /* 1168 */ 'c', 'r', 'j', 'l', 'h', 9, 0,
  /* 1175 */ 'c', 'g', 'r', 'j', 'l', 'h', 9, 0,
  /* 1183 */ 'l', 'l', 'h', 9, 0,
  /* 1188 */ 'l', 'o', 'c', 'n', 'l', 'h', 9, 0,
  /* 1196 */ 's', 't', 'o', 'c', 'n', 'l', 'h', 9, 0,
  /* 1205 */ 'l', 'o', 'c', 'g', 'n', 'l', 'h', 9, 0,
  /* 1214 */ 's', 't', 'o', 'c', 'g', 'n', 'l', 'h', 9, 0,
  /* 1224 */ 'j', 'g', 'n', 'l', 'h', 9, 0,
  /* 1231 */ 'c', 'i', 'j', 'n', 'l', 'h', 9, 0,
  /* 1239 */ 'c', 'g', 'i', 'j', 'n', 'l', 'h', 9, 0,
  /* 1248 */ 'c', 'r', 'j', 'n', 'l', 'h', 9, 0,
  /* 1256 */ 'c', 'g', 'r', 'j', 'n', 'l', 'h', 9, 0,
  /* 1265 */ 'l', 'o', 'c', 'r', 'n', 'l', 'h', 9, 0,
  /* 1274 */ 'l', 'o', 'c', 'g', 'r', 'n', 'l', 'h', 9, 0,
  /* 1284 */ 'l', 'o', 'c', 'r', 'l', 'h', 9, 0,
  /* 1292 */ 'l', 'o', 'c', 'g', 'r', 'l', 'h', 9, 0,
  /* 1301 */ 'm', 'h', 9, 0,
  /* 1305 */ 'l', 'o', 'c', 'n', 'h', 9, 0,
  /* 1312 */ 's', 't', 'o', 'c', 'n', 'h', 9, 0,
  /* 1320 */ 'l', 'o', 'c', 'g', 'n', 'h', 9, 0,
  /* 1328 */ 's', 't', 'o', 'c', 'g', 'n', 'h', 9, 0,
  /* 1337 */ 'j', 'g', 'n', 'h', 9, 0,
  /* 1343 */ 'c', 'i', 'j', 'n', 'h', 9, 0,
  /* 1350 */ 'c', 'g', 'i', 'j', 'n', 'h', 9, 0,
  /* 1358 */ 'c', 'r', 'j', 'n', 'h', 9, 0,
  /* 1365 */ 'c', 'g', 'r', 'j', 'n', 'h', 9, 0,
  /* 1373 */ 'l', 'o', 'c', 'r', 'n', 'h', 9, 0,
  /* 1381 */ 'l', 'o', 'c', 'g', 'r', 'n', 'h', 9, 0,
  /* 1390 */ 'l', 'o', 'c', 'r', 'h', 9, 0,
  /* 1397 */ 'l', 'o', 'c', 'g', 'r', 'h', 9, 0,
  /* 1405 */ 's', 'h', 9, 0,
  /* 1409 */ 's', 't', 'h', 9, 0,
  /* 1414 */ 'a', 'f', 'i', 9, 0,
  /* 1419 */ 'c', 'f', 'i', 9, 0,
  /* 1424 */ 'a', 'g', 'f', 'i', 9, 0,
  /* 1430 */ 'c', 'g', 'f', 'i', 9, 0,
  /* 1436 */ 'a', 'l', 'g', 'f', 'i', 9, 0,
  /* 1443 */ 'c', 'l', 'g', 'f', 'i', 9, 0,
  /* 1450 */ 's', 'l', 'g', 'f', 'i', 9, 0,
  /* 1457 */ 'm', 's', 'g', 'f', 'i', 9, 0,
  /* 1464 */ 'a', 'l', 'f', 'i', 9, 0,
  /* 1470 */ 'c', 'l', 'f', 'i', 9, 0,
  /* 1476 */ 's', 'l', 'f', 'i', 9, 0,
  /* 1482 */ 'm', 's', 'f', 'i', 9, 0,
  /* 1488 */ 'a', 'h', 'i', 9, 0,
  /* 1493 */ 'c', 'h', 'i', 9, 0,
  /* 1498 */ 'a', 'g', 'h', 'i', 9, 0,
  /* 1504 */ 'c', 'g', 'h', 'i', 9, 0,
  /* 1510 */ 'l', 'g', 'h', 'i', 9, 0,
  /* 1516 */ 'm', 'g', 'h', 'i', 9, 0,
  /* 1522 */ 'm', 'v', 'g', 'h', 'i', 9, 0,
  /* 1529 */ 'm', 'v', 'h', 'h', 'i', 9, 0,
  /* 1536 */ 'l', 'h', 'i', 9, 0,
  /* 1541 */ 'm', 'h', 'i', 9, 0,
  /* 1546 */ 'm', 'v', 'h', 'i', 9, 0,
  /* 1552 */ 'c', 'l', 'i', 9, 0,
  /* 1557 */ 'n', 'i', 9, 0,
  /* 1561 */ 'o', 'i', 9, 0,
  /* 1565 */ 'a', 's', 'i', 9, 0,
  /* 1570 */ 'a', 'g', 's', 'i', 9, 0,
  /* 1576 */ 'c', 'h', 's', 'i', 9, 0,
  /* 1582 */ 'c', 'l', 'f', 'h', 's', 'i', 9, 0,
  /* 1590 */ 'c', 'g', 'h', 's', 'i', 9, 0,
  /* 1597 */ 'c', 'l', 'g', 'h', 's', 'i', 9, 0,
  /* 1605 */ 'c', 'h', 'h', 's', 'i', 9, 0,
  /* 1612 */ 'c', 'l', 'h', 'h', 's', 'i', 9, 0,
  /* 1620 */ 'm', 'v', 'i', 9, 0,
  /* 1625 */ 'x', 'i', 9, 0,
  /* 1629 */ 'c', 'i', 'j', 9, 0,
  /* 1634 */ 'c', 'g', 'i', 'j', 9, 0,
  /* 1640 */ 'c', 'r', 'j', 9, 0,
  /* 1645 */ 'c', 'g', 'r', 'j', 9, 0,
  /* 1651 */ 's', 'r', 'a', 'k', 9, 0,
  /* 1657 */ 'a', 'h', 'i', 'k', 9, 0,
  /* 1663 */ 'a', 'g', 'h', 'i', 'k', 9, 0,
  /* 1670 */ 'a', 'l', 'g', 'h', 's', 'i', 'k', 9, 0,
  /* 1679 */ 'a', 'l', 'h', 's', 'i', 'k', 9, 0,
  /* 1687 */ 's', 'l', 'l', 'k', 9, 0,
  /* 1693 */ 's', 'r', 'l', 'k', 9, 0,
  /* 1699 */ 'a', 'r', 'k', 9, 0,
  /* 1704 */ 'a', 'g', 'r', 'k', 9, 0,
  /* 1710 */ 'a', 'l', 'g', 'r', 'k', 9, 0,
  /* 1717 */ 's', 'l', 'g', 'r', 'k', 9, 0,
  /* 1724 */ 'n', 'g', 'r', 'k', 9, 0,
  /* 1730 */ 'o', 'g', 'r', 'k', 9, 0,
  /* 1736 */ 's', 'g', 'r', 'k', 9, 0,
  /* 1742 */ 'x', 'g', 'r', 'k', 9, 0,
  /* 1748 */ 'a', 'l', 'r', 'k', 9, 0,
  /* 1754 */ 's', 'l', 'r', 'k', 9, 0,
  /* 1760 */ 'n', 'r', 'k', 9, 0,
  /* 1765 */ 'o', 'r', 'k', 9, 0,
  /* 1770 */ 's', 'r', 'k', 9, 0,
  /* 1775 */ 'x', 'r', 'k', 9, 0,
  /* 1780 */ 'a', 'l', 9, 0,
  /* 1784 */ 'l', 'o', 'c', 'l', 9, 0,
  /* 1790 */ 's', 't', 'o', 'c', 'l', 9, 0,
  /* 1797 */ 'b', 'r', 'c', 'l', 9, 0,
  /* 1803 */ 'd', 'l', 9, 0,
  /* 1807 */ 'l', 'o', 'c', 'g', 'l', 9, 0,
  /* 1814 */ 's', 't', 'o', 'c', 'g', 'l', 9, 0,
  /* 1822 */ 'j', 'g', 'l', 9, 0,
  /* 1827 */ 'i', 'i', 'h', 'l', 9, 0,
  /* 1833 */ 'l', 'l', 'i', 'h', 'l', 9, 0,
  /* 1840 */ 'n', 'i', 'h', 'l', 9, 0,
  /* 1846 */ 'o', 'i', 'h', 'l', 9, 0,
  /* 1852 */ 'c', 'i', 'j', 'l', 9, 0,
  /* 1858 */ 'c', 'g', 'i', 'j', 'l', 9, 0,
  /* 1865 */ 'c', 'r', 'j', 'l', 9, 0,
  /* 1871 */ 'c', 'g', 'r', 'j', 'l', 9, 0,
  /* 1878 */ 'i', 'i', 'l', 'l', 9, 0,
  /* 1884 */ 'l', 'l', 'i', 'l', 'l', 9, 0,
  /* 1891 */ 'n', 'i', 'l', 'l', 9, 0,
  /* 1897 */ 'o', 'i', 'l', 'l', 9, 0,
  /* 1903 */ 'r', 'l', 'l', 9, 0,
  /* 1908 */ 's', 'l', 'l', 9, 0,
  /* 1913 */ 'l', 'o', 'c', 'n', 'l', 9, 0,
  /* 1920 */ 's', 't', 'o', 'c', 'n', 'l', 9, 0,
  /* 1928 */ 'l', 'o', 'c', 'g', 'n', 'l', 9, 0,
  /* 1936 */ 's', 't', 'o', 'c', 'g', 'n', 'l', 9, 0,
  /* 1945 */ 'j', 'g', 'n', 'l', 9, 0,
  /* 1951 */ 'c', 'i', 'j', 'n', 'l', 9, 0,
  /* 1958 */ 'c', 'g', 'i', 'j', 'n', 'l', 9, 0,
  /* 1966 */ 'c', 'r', 'j', 'n', 'l', 9, 0,
  /* 1973 */ 'c', 'g', 'r', 'j', 'n', 'l', 9, 0,
  /* 1981 */ 'l', 'o', 'c', 'r', 'n', 'l', 9, 0,
  /* 1989 */ 'l', 'o', 'c', 'g', 'r', 'n', 'l', 9, 0,
  /* 1998 */ 'l', 'a', 'r', 'l', 9, 0,
  /* 2004 */ 'l', 'o', 'c', 'r', 'l', 9, 0,
  /* 2011 */ 'c', 'g', 'f', 'r', 'l', 9, 0,
  /* 2018 */ 'c', 'l', 'g', 'f', 'r', 'l', 9, 0,
  /* 2026 */ 'l', 'l', 'g', 'f', 'r', 'l', 9, 0,
  /* 2034 */ 'l', 'o', 'c', 'g', 'r', 'l', 9, 0,
  /* 2042 */ 'c', 'l', 'g', 'r', 'l', 9, 0,
  /* 2049 */ 's', 't', 'g', 'r', 'l', 9, 0,
  /* 2056 */ 'c', 'h', 'r', 'l', 9, 0,
  /* 2062 */ 'c', 'g', 'h', 'r', 'l', 9, 0,
  /* 2069 */ 'c', 'l', 'g', 'h', 'r', 'l', 9, 0,
  /* 2077 */ 'l', 'l', 'g', 'h', 'r', 'l', 9, 0,
  /* 2085 */ 'c', 'l', 'h', 'r', 'l', 9, 0,
  /* 2092 */ 'l', 'l', 'h', 'r', 'l', 9, 0,
  /* 2099 */ 's', 't', 'h', 'r', 'l', 9, 0,
  /* 2106 */ 'c', 'l', 'r', 'l', 9, 0,
  /* 2112 */ 's', 'r', 'l', 9, 0,
  /* 2117 */ 's', 't', 'r', 'l', 9, 0,
  /* 2123 */ 'b', 'r', 'a', 's', 'l', 9, 0,
  /* 2130 */ 'n', 9, 0,
  /* 2133 */ 'l', 'o', 'c', 'o', 9, 0,
  /* 2139 */ 's', 't', 'o', 'c', 'o', 9, 0,
  /* 2146 */ 'l', 'o', 'c', 'g', 'o', 9, 0,
  /* 2153 */ 's', 't', 'o', 'c', 'g', 'o', 9, 0,
  /* 2161 */ 'j', 'g', 'o', 9, 0,
  /* 2166 */ 'j', 'o', 9, 0,
  /* 2170 */ 'l', 'o', 'c', 'n', 'o', 9, 0,
  /* 2177 */ 's', 't', 'o', 'c', 'n', 'o', 9, 0,
  /* 2185 */ 'l', 'o', 'c', 'g', 'n', 'o', 9, 0,
  /* 2193 */ 's', 't', 'o', 'c', 'g', 'n', 'o', 9, 0,
  /* 2202 */ 'j', 'g', 'n', 'o', 9, 0,
  /* 2208 */ 'j', 'n', 'o', 9, 0,
  /* 2213 */ 'l', 'o', 'c', 'r', 'n', 'o', 9, 0,
  /* 2221 */ 'l', 'o', 'c', 'g', 'r', 'n', 'o', 9, 0,
  /* 2230 */ 'l', 'o', 'c', 'r', 'o', 9, 0,
  /* 2237 */ 'l', 'o', 'c', 'g', 'r', 'o', 9, 0,
  /* 2245 */ 'e', 'a', 'r', 9, 0,
  /* 2250 */ 'm', 'a', 'd', 'b', 'r', 9, 0,
  /* 2257 */ 'l', 'c', 'd', 'b', 'r', 9, 0,
  /* 2264 */ 'd', 'd', 'b', 'r', 9, 0,
  /* 2270 */ 'l', 'e', 'd', 'b', 'r', 9, 0,
  /* 2277 */ 'c', 'f', 'd', 'b', 'r', 9, 0,
  /* 2284 */ 'c', 'g', 'd', 'b', 'r', 9, 0,
  /* 2291 */ 'f', 'i', 'd', 'b', 'r', 9, 0,
  /* 2298 */ 'm', 'd', 'b', 'r', 9, 0,
  /* 2304 */ 'l', 'n', 'd', 'b', 'r', 9, 0,
  /* 2311 */ 'l', 'p', 'd', 'b', 'r', 9, 0,
  /* 2318 */ 's', 'q', 'd', 'b', 'r', 9, 0,
  /* 2325 */ 'm', 's', 'd', 'b', 'r', 9, 0,
  /* 2332 */ 'l', 't', 'd', 'b', 'r', 9, 0,
  /* 2339 */ 'l', 'x', 'd', 'b', 'r', 9, 0,
  /* 2346 */ 'm', 'x', 'd', 'b', 'r', 9, 0,
  /* 2353 */ 'm', 'a', 'e', 'b', 'r', 9, 0,
  /* 2360 */ 'l', 'c', 'e', 'b', 'r', 9, 0,
  /* 2367 */ 'l', 'd', 'e', 'b', 'r', 9, 0,
  /* 2374 */ 'm', 'd', 'e', 'b', 'r', 9, 0,
  /* 2381 */ 'm', 'e', 'e', 'b', 'r', 9, 0,
  /* 2388 */ 'c', 'f', 'e', 'b', 'r', 9, 0,
  /* 2395 */ 'c', 'g', 'e', 'b', 'r', 9, 0,
  /* 2402 */ 'f', 'i', 'e', 'b', 'r', 9, 0,
  /* 2409 */ 'l', 'n', 'e', 'b', 'r', 9, 0,
  /* 2416 */ 'l', 'p', 'e', 'b', 'r', 9, 0,
  /* 2423 */ 's', 'q', 'e', 'b', 'r', 9, 0,
  /* 2430 */ 'm', 's', 'e', 'b', 'r', 9, 0,
  /* 2437 */ 'l', 't', 'e', 'b', 'r', 9, 0,
  /* 2444 */ 'l', 'x', 'e', 'b', 'r', 9, 0,
  /* 2451 */ 'c', 'd', 'f', 'b', 'r', 9, 0,
  /* 2458 */ 'c', 'e', 'f', 'b', 'r', 9, 0,
  /* 2465 */ 'c', 'x', 'f', 'b', 'r', 9, 0,
  /* 2472 */ 'c', 'd', 'g', 'b', 'r', 9, 0,
  /* 2479 */ 'c', 'e', 'g', 'b', 'r', 9, 0,
  /* 2486 */ 'l', 'g', 'b', 'r', 9, 0,
  /* 2492 */ 'c', 'x', 'g', 'b', 'r', 9, 0,
  /* 2499 */ 's', 'l', 'b', 'r', 9, 0,
  /* 2505 */ 'a', 'x', 'b', 'r', 9, 0,
  /* 2511 */ 'l', 'c', 'x', 'b', 'r', 9, 0,
  /* 2518 */ 'l', 'd', 'x', 'b', 'r', 9, 0,
  /* 2525 */ 'l', 'e', 'x', 'b', 'r', 9, 0,
  /* 2532 */ 'c', 'f', 'x', 'b', 'r', 9, 0,
  /* 2539 */ 'c', 'g', 'x', 'b', 'r', 9, 0,
  /* 2546 */ 'f', 'i', 'x', 'b', 'r', 9, 0,
  /* 2553 */ 'm', 'x', 'b', 'r', 9, 0,
  /* 2559 */ 'l', 'n', 'x', 'b', 'r', 9, 0,
  /* 2566 */ 'l', 'p', 'x', 'b', 'r', 9, 0,
  /* 2573 */ 's', 'q', 'x', 'b', 'r', 9, 0,
  /* 2580 */ 's', 'x', 'b', 'r', 9, 0,
  /* 2586 */ 'l', 't', 'x', 'b', 'r', 9, 0,
  /* 2593 */ 'l', 'l', 'g', 'c', 'r', 9, 0,
  /* 2600 */ 'a', 'l', 'c', 'r', 9, 0,
  /* 2606 */ 'l', 'l', 'c', 'r', 9, 0,
  /* 2612 */ 'l', 'o', 'c', 'r', 9, 0,
  /* 2618 */ 'l', 'g', 'd', 'r', 9, 0,
  /* 2624 */ 'l', 'd', 'r', 9, 0,
  /* 2629 */ 'c', 'p', 's', 'd', 'r', 9, 0,
  /* 2636 */ 'l', 'z', 'd', 'r', 9, 0,
  /* 2642 */ 'l', 'e', 'r', 9, 0,
  /* 2647 */ 'l', 'z', 'e', 'r', 9, 0,
  /* 2653 */ 'a', 'g', 'f', 'r', 9, 0,
  /* 2659 */ 'l', 'c', 'g', 'f', 'r', 9, 0,
  /* 2666 */ 'a', 'l', 'g', 'f', 'r', 9, 0,
  /* 2673 */ 'c', 'l', 'g', 'f', 'r', 9, 0,
  /* 2680 */ 'l', 'l', 'g', 'f', 'r', 9, 0,
  /* 2687 */ 's', 'l', 'g', 'f', 'r', 9, 0,
  /* 2694 */ 'd', 's', 'g', 'f', 'r', 9, 0,
  /* 2701 */ 'm', 's', 'g', 'f', 'r', 9, 0,
  /* 2708 */ 'l', 't', 'g', 'f', 'r', 9, 0,
  /* 2715 */ 'a', 'g', 'r', 9, 0,
  /* 2720 */ 's', 'l', 'b', 'g', 'r', 9, 0,
  /* 2727 */ 'a', 'l', 'c', 'g', 'r', 9, 0,
  /* 2734 */ 'l', 'o', 'c', 'g', 'r', 9, 0,
  /* 2741 */ 'l', 'd', 'g', 'r', 9, 0,
  /* 2747 */ 'a', 'l', 'g', 'r', 9, 0,
  /* 2753 */ 'c', 'l', 'g', 'r', 9, 0,
  /* 2759 */ 'd', 'l', 'g', 'r', 9, 0,
  /* 2765 */ 'm', 'l', 'g', 'r', 9, 0,
  /* 2771 */ 's', 'l', 'g', 'r', 9, 0,
  /* 2777 */ 'n', 'g', 'r', 9, 0,
  /* 2782 */ 'f', 'l', 'o', 'g', 'r', 9, 0,
  /* 2789 */ 'd', 's', 'g', 'r', 9, 0,
  /* 2795 */ 'm', 's', 'g', 'r', 9, 0,
  /* 2801 */ 'l', 't', 'g', 'r', 9, 0,
  /* 2807 */ 'l', 'r', 'v', 'g', 'r', 9, 0,
  /* 2814 */ 'x', 'g', 'r', 9, 0,
  /* 2819 */ 'l', 'l', 'g', 'h', 'r', 9, 0,
  /* 2826 */ 'l', 'l', 'h', 'r', 9, 0,
  /* 2832 */ 'a', 'l', 'r', 9, 0,
  /* 2837 */ 'c', 'l', 'r', 9, 0,
  /* 2842 */ 'd', 'l', 'r', 9, 0,
  /* 2847 */ 's', 'l', 'r', 9, 0,
  /* 2852 */ 'n', 'r', 9, 0,
  /* 2856 */ 'o', 'r', 9, 0,
  /* 2860 */ 'b', 'a', 's', 'r', 9, 0,
  /* 2866 */ 'm', 's', 'r', 9, 0,
  /* 2871 */ 'l', 't', 'r', 9, 0,
  /* 2876 */ 'l', 'r', 'v', 'r', 9, 0,
  /* 2882 */ 'l', 'x', 'r', 9, 0,
  /* 2887 */ 'l', 'z', 'x', 'r', 9, 0,
  /* 2893 */ 'b', 'r', 'a', 's', 9, 0,
  /* 2899 */ 'c', 's', 9, 0,
  /* 2903 */ 'm', 's', 9, 0,
  /* 2907 */ 'b', 'r', 'c', 't', 9, 0,
  /* 2913 */ 'l', 't', 9, 0,
  /* 2917 */ 's', 't', 9, 0,
  /* 2921 */ 'l', 'r', 'v', 9, 0,
  /* 2926 */ 's', 't', 'r', 'v', 9, 0,
  /* 2932 */ 'x', 9, 0,
  /* 2935 */ 'l', 'a', 'y', 9, 0,
  /* 2940 */ 'i', 'c', 'y', 9, 0,
  /* 2945 */ 's', 't', 'c', 'y', 9, 0,
  /* 2951 */ 'l', 'd', 'y', 9, 0,
  /* 2956 */ 's', 't', 'd', 'y', 9, 0,
  /* 2962 */ 'l', 'e', 'y', 9, 0,
  /* 2967 */ 's', 't', 'e', 'y', 9, 0,
  /* 2973 */ 'a', 'h', 'y', 9, 0,
  /* 2978 */ 'c', 'h', 'y', 9, 0,
  /* 2983 */ 'l', 'h', 'y', 9, 0,
  /* 2988 */ 'm', 'h', 'y', 9, 0,
  /* 2993 */ 's', 'h', 'y', 9, 0,
  /* 2998 */ 's', 't', 'h', 'y', 9, 0,
  /* 3004 */ 'c', 'l', 'i', 'y', 9, 0,
  /* 3010 */ 'n', 'i', 'y', 9, 0,
  /* 3015 */ 'o', 'i', 'y', 9, 0,
  /* 3020 */ 'm', 'v', 'i', 'y', 9, 0,
  /* 3026 */ 'x', 'i', 'y', 9, 0,
  /* 3031 */ 'a', 'l', 'y', 9, 0,
  /* 3036 */ 'c', 'l', 'y', 9, 0,
  /* 3041 */ 's', 'l', 'y', 9, 0,
  /* 3046 */ 'n', 'y', 9, 0,
  /* 3050 */ 'o', 'y', 9, 0,
  /* 3054 */ 'c', 's', 'y', 9, 0,
  /* 3059 */ 'm', 's', 'y', 9, 0,
  /* 3064 */ 's', 't', 'y', 9, 0,
  /* 3069 */ 'x', 'y', 9, 0,
  /* 3073 */ 'b', 'r', 'a', 's', 'l', 9, '%', 'r', '1', '4', ',', 32, 0,
  /* 3086 */ 'b', 'a', 's', 'r', 9, '%', 'r', '1', '4', ',', 32, 0,
  /* 3098 */ 'b', 'r', 'a', 's', 9, '%', 'r', '1', '4', ',', 32, 0,
  /* 3110 */ 'b', 'r', 9, '%', 'r', '1', '4', 0,
  /* 3118 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 3131 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 3138 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 3148 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 3163 */ 'l', 'o', 'c', 0,
  /* 3167 */ 's', 't', 'o', 'c', 0,
  /* 3172 */ 'l', 'o', 'c', 'g', 0,
  /* 3177 */ 's', 't', 'o', 'c', 'g', 0,
  /* 3183 */ 'j', 'g', 0,
  /* 3186 */ 'c', 'i', 'j', 0,
  /* 3190 */ 'c', 'g', 'i', 'j', 0,
  /* 3195 */ 'c', 'r', 'j', 0,
  /* 3199 */ 'c', 'g', 'r', 'j', 0,
  /* 3204 */ 'l', 'o', 'c', 'r', 0,
  /* 3209 */ 'l', 'o', 'c', 'g', 'r', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint32_t Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 4095)-1;


  // Fragment 0 encoded into 4 bits for 12 unique commands.
  switch ((Bits >> 12) & 15) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, RET
    return;
    break;
  case 1:
    // A, ADB, ADBR, AEB, AEBR, AFI, AG, AGF, AGFI, AGFR, AGHI, AGHIK, AGR, A...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // AGSI, ASI, CGHSI, CHHSI, CHSI, CLFHSI, CLGHSI, CLHHSI, CLI, CLIY, MVGH...
    printBDAddrOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 3:
    // AsmBRC, AsmBRCL
    printU4ImmOperand(MI, 0, O); 
    O << ", "; 
    printPCRelOperand(MI, 1, O); 
    return;
    break;
  case 4:
    // AsmEJ, AsmEJG, AsmHEJ, AsmHEJG, AsmHJ, AsmHJG, AsmLEJ, AsmLEJG, AsmLHJ...
    printPCRelOperand(MI, 0, O); 
    return;
    break;
  case 5:
    // BRAS, BRASL
    printCallOperand(MI, 0, O); 
    return;
    break;
  case 6:
    // BRC, BRCL
    printCond4Operand(MI, 1, O); 
    O << "\t"; 
    printPCRelOperand(MI, 2, O); 
    return;
    break;
  case 7:
    // CGIJ, CGRJ, CIJ, CRJ
    printCond4Operand(MI, 2, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 8:
    // LOC, LOCG
    printCond4Operand(MI, 5, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printBDAddrOperand(MI, 2, O); 
    return;
    break;
  case 9:
    // LOCGR, LOCR
    printCond4Operand(MI, 3, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 10:
    // MVC
    printBDLAddrOperand(MI, 0, O); 
    O << ", "; 
    printBDAddrOperand(MI, 3, O); 
    return;
    break;
  case 11:
    // STOC, STOC32, STOCG
    printCond4Operand(MI, 4, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printBDAddrOperand(MI, 1, O); 
    return;
    break;
  }


  // Fragment 1 encoded into 3 bits for 8 unique commands.
  switch ((Bits >> 16) & 7) {
  default:   // unreachable.
  case 0:
    // A, ADB, ADBR, AEB, AEBR, AFI, AG, AGF, AGFI, AGFR, AGHI, AGHIK, AGR, A...
    O << ", "; 
    break;
  case 1:
    // AGSI, ASI
    printS8ImmOperand(MI, 2, O); 
    return;
    break;
  case 2:
    // BASR, BR, LZDR, LZER, LZXR
    return;
    break;
  case 3:
    // CGHSI, CHHSI, CHSI, MVGHI, MVHHI, MVHI
    printS16ImmOperand(MI, 2, O); 
    return;
    break;
  case 4:
    // CGIJ, CIJ
    printS8ImmOperand(MI, 1, O); 
    O << ", "; 
    printPCRelOperand(MI, 3, O); 
    return;
    break;
  case 5:
    // CGRJ, CRJ
    printOperand(MI, 1, O); 
    O << ", "; 
    printPCRelOperand(MI, 3, O); 
    return;
    break;
  case 6:
    // CLFHSI, CLGHSI, CLHHSI
    printU16ImmOperand(MI, 2, O); 
    return;
    break;
  case 7:
    // CLI, CLIY, MVI, MVIY, NI, NIY, OI, OIY, XI, XIY
    printU8ImmOperand(MI, 2, O); 
    return;
    break;
  }


  // Fragment 2 encoded into 5 bits for 19 unique commands.
  switch ((Bits >> 19) & 31) {
  default:   // unreachable.
  case 0:
    // A, ADB, AEB, AG, AGF, AH, AHY, AL, ALC, ALCG, ALG, ALGF, ALY, AY, DDB,...
    printBDXAddrOperand(MI, 2, O); 
    return;
    break;
  case 1:
    // ADBR, AEBR, AGFR, AGR, ALCGR, ALCR, ALGFR, ALGR, ALR, AR, AXBR, AsmELO...
    printOperand(MI, 2, O); 
    break;
  case 2:
    // AFI, AGFI, MSFI, MSGFI
    printS32ImmOperand(MI, 2, O); 
    return;
    break;
  case 3:
    // AGHI, AHI, MGHI, MHI
    printS16ImmOperand(MI, 2, O); 
    return;
    break;
  case 4:
    // AGHIK, AGRK, AHIK, ALGHSIK, ALGRK, ALHSIK, ALRK, ARK, AsmBASR, AsmCGRJ...
    printOperand(MI, 1, O); 
    break;
  case 5:
    // ALFI, ALGFI, IIHF, IILF, NIHF, NILF, NILF32, OIHF, OILF, OILF32, SLFI,...
    printU32ImmOperand(MI, 2, O); 
    return;
    break;
  case 6:
    // AsmBRAS, AsmBRASL, CGFRL, CGHRL, CGRL, CHRL, CLGFRL, CLGHRL, CLGRL, CL...
    printPCRelOperand(MI, 1, O); 
    return;
    break;
  case 7:
    // AsmCGIJ, AsmCIJ, AsmJEAltCGI, AsmJEAltCI, AsmJECGI, AsmJECI, AsmJHAltC...
    printS8ImmOperand(MI, 1, O); 
    O << ", "; 
    break;
  case 8:
    // AsmELOC, AsmELOCG, AsmHELOC, AsmHELOCG, AsmHLOC, AsmHLOCG, AsmLELOC, A...
    printBDAddrOperand(MI, 2, O); 
    break;
  case 9:
    // AsmESTOC, AsmESTOCG, AsmHESTOC, AsmHESTOCG, AsmHSTOC, AsmHSTOCG, AsmLE...
    printBDAddrOperand(MI, 1, O); 
    break;
  case 10:
    // BRCT, BRCTG
    printPCRelOperand(MI, 2, O); 
    return;
    break;
  case 11:
    // C, CDB, CEB, CG, CGF, CGH, CH, CHY, CL, CLG, CLGF, CLY, CY, L, LA, LAY...
    printBDXAddrOperand(MI, 1, O); 
    return;
    break;
  case 12:
    // CFDBR, CFEBR, CFXBR, CGDBR, CGEBR, CGXBR, FIDBR, FIEBR, FIXBR
    printU4ImmOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 13:
    // CFI, CGFI, LGFI
    printS32ImmOperand(MI, 1, O); 
    return;
    break;
  case 14:
    // CGHI, CHI, LGHI, LHI
    printS16ImmOperand(MI, 1, O); 
    return;
    break;
  case 15:
    // CLFI, CLGFI, IILF32, LLIHF, LLILF
    printU32ImmOperand(MI, 1, O); 
    return;
    break;
  case 16:
    // EAR
    printAccessRegOperand(MI, 1, O); 
    return;
    break;
  case 17:
    // IIHH, IIHL, IILH, IILH32, IILL, IILL32, NIHH, NIHL, NILH, NILH32, NILL...
    printU16ImmOperand(MI, 2, O); 
    return;
    break;
  case 18:
    // LLIHH, LLIHL, LLILH, LLILL
    printU16ImmOperand(MI, 1, O); 
    return;
    break;
  }


  // Fragment 3 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 24) & 3) {
  default:   // unreachable.
  case 0:
    // ADBR, AEBR, AGFR, AGR, ALCGR, ALCR, ALGFR, ALGR, ALR, AR, AXBR, AsmBAS...
    return;
    break;
  case 1:
    // AGHIK, AGRK, AHIK, ALGHSIK, ALGRK, ALHSIK, ALRK, ARK, AsmCGRJ, AsmCRJ,...
    O << ", "; 
    break;
  case 2:
    // AsmCGIJ, AsmCIJ
    printU4ImmOperand(MI, 2, O); 
    O << ", "; 
    printPCRelOperand(MI, 3, O); 
    return;
    break;
  case 3:
    // AsmJEAltCGI, AsmJEAltCI, AsmJECGI, AsmJECI, AsmJHAltCGI, AsmJHAltCI, A...
    printPCRelOperand(MI, 2, O); 
    return;
    break;
  }


  // Fragment 4 encoded into 4 bits for 11 unique commands.
  switch ((Bits >> 26) & 15) {
  default:   // unreachable.
  case 0:
    // AGHIK, AHIK, ALGHSIK, ALHSIK
    printS16ImmOperand(MI, 2, O); 
    return;
    break;
  case 1:
    // AGRK, ALGRK, ALRK, ARK, CPSDRdd, CPSDRds, CPSDRsd, CPSDRss, NGRK, NRK,...
    printOperand(MI, 2, O); 
    return;
    break;
  case 2:
    // AsmCGRJ, AsmCRJ
    printU4ImmOperand(MI, 2, O); 
    O << ", "; 
    printPCRelOperand(MI, 3, O); 
    return;
    break;
  case 3:
    // AsmJEAltCGR, AsmJEAltCR, AsmJECGR, AsmJECR, AsmJHAltCGR, AsmJHAltCR, A...
    printPCRelOperand(MI, 2, O); 
    return;
    break;
  case 4:
    // AsmLOC, AsmLOCG
    printU4ImmOperand(MI, 4, O); 
    return;
    break;
  case 5:
    // AsmLOCGR, AsmLOCR, AsmSTOC, AsmSTOCG
    printU4ImmOperand(MI, 3, O); 
    return;
    break;
  case 6:
    // CS, CSG, CSY
    printBDAddrOperand(MI, 3, O); 
    return;
    break;
  case 7:
    // LMG, RLL, RLLG, SLLG, SLLK, SRAG, SRAK, SRLG, SRLK, STMG
    printBDAddrOperand(MI, 2, O); 
    return;
    break;
  case 8:
    // MADB, MAEB, MSDB, MSEB
    printBDXAddrOperand(MI, 3, O); 
    return;
    break;
  case 9:
    // MADBR, MAEBR, MSDBR, MSEBR
    printOperand(MI, 3, O); 
    return;
    break;
  case 10:
    // RISBG, RISBG32, RISBHG, RISBLG, RISBLG32, RNSBG, ROSBG, RXSBG
    printU8ImmOperand(MI, 3, O); 
    O << ", "; 
    printU8ImmOperand(MI, 4, O); 
    O << ", "; 
    printU6ImmOperand(MI, 5, O); 
    return;
    break;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *SystemZInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 82 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'f', '1', '0', 0,
  /* 4 */ 'r', '1', '0', 0,
  /* 8 */ 'f', '0', 0,
  /* 11 */ 'r', '0', 0,
  /* 14 */ 'f', '1', '1', 0,
  /* 18 */ 'r', '1', '1', 0,
  /* 22 */ 'f', '1', 0,
  /* 25 */ 'r', '1', 0,
  /* 28 */ 'f', '1', '2', 0,
  /* 32 */ 'r', '1', '2', 0,
  /* 36 */ 'f', '2', 0,
  /* 39 */ 'r', '2', 0,
  /* 42 */ 'f', '1', '3', 0,
  /* 46 */ 'r', '1', '3', 0,
  /* 50 */ 'f', '3', 0,
  /* 53 */ 'r', '3', 0,
  /* 56 */ 'f', '1', '4', 0,
  /* 60 */ 'r', '1', '4', 0,
  /* 64 */ 'f', '4', 0,
  /* 67 */ 'r', '4', 0,
  /* 70 */ 'f', '1', '5', 0,
  /* 74 */ 'r', '1', '5', 0,
  /* 78 */ 'f', '5', 0,
  /* 81 */ 'r', '5', 0,
  /* 84 */ 'f', '6', 0,
  /* 87 */ 'r', '6', 0,
  /* 90 */ 'f', '7', 0,
  /* 93 */ 'r', '7', 0,
  /* 96 */ 'f', '8', 0,
  /* 99 */ 'r', '8', 0,
  /* 102 */ 'f', '9', 0,
  /* 105 */ 'r', '9', 0,
  /* 108 */ 'c', 'c', 0,
  };

  static const uint32_t RegAsmOffset[] = {
    108, 8, 22, 36, 50, 64, 78, 84, 90, 96, 102, 0, 14, 28, 
    42, 56, 70, 8, 22, 64, 78, 96, 102, 28, 42, 8, 22, 36, 
    50, 64, 78, 84, 90, 96, 102, 0, 14, 28, 42, 56, 70, 11, 
    25, 39, 53, 67, 81, 87, 93, 99, 105, 4, 18, 32, 46, 60, 
    74, 11, 39, 67, 87, 99, 4, 32, 60, 11, 25, 39, 53, 67, 
    81, 87, 93, 99, 105, 4, 18, 32, 46, 60, 74, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool SystemZInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  return false;
}

#endif // PRINT_ALIAS_INSTR
