/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Instruction Enum Values                                              *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_INSTRINFO_ENUM
#undef GET_INSTRINFO_ENUM
namespace llvm {

namespace AMDGPU {
  enum {
    PHI	= 0,
    INLINEASM	= 1,
    PROLOG_LABEL	= 2,
    EH_LABEL	= 3,
    GC_LABEL	= 4,
    KILL	= 5,
    EXTRACT_SUBREG	= 6,
    INSERT_SUBREG	= 7,
    IMPLICIT_DEF	= 8,
    SUBREG_TO_REG	= 9,
    COPY_TO_REGCLASS	= 10,
    DBG_VALUE	= 11,
    REG_SEQUENCE	= 12,
    COPY	= 13,
    BUNDLE	= 14,
    LIFETIME_START	= 15,
    LIFETIME_END	= 16,
    ADD	= 17,
    ADD_INT	= 18,
    ALU_CLAUSE	= 19,
    AND_INT	= 20,
    ASHR_eg	= 21,
    ASHR_r600	= 22,
    BFE_UINT_eg	= 23,
    BFI_INT_eg	= 24,
    BIT_ALIGN_INT_eg	= 25,
    BRANCH	= 26,
    BRANCH_COND_f32	= 27,
    BRANCH_COND_i32	= 28,
    BREAK	= 29,
    BREAKC_f32	= 30,
    BREAKC_i32	= 31,
    BREAK_LOGICALNZ_f32	= 32,
    BREAK_LOGICALNZ_i32	= 33,
    BREAK_LOGICALZ_f32	= 34,
    BREAK_LOGICALZ_i32	= 35,
    BUFFER_LOAD_DWORDX2_ADDR64	= 36,
    BUFFER_LOAD_DWORDX2_IDXEN	= 37,
    BUFFER_LOAD_DWORDX2_OFFEN	= 38,
    BUFFER_LOAD_DWORDX4_ADDR64	= 39,
    BUFFER_LOAD_DWORDX4_IDXEN	= 40,
    BUFFER_LOAD_DWORDX4_OFFEN	= 41,
    BUFFER_LOAD_DWORD_ADDR64	= 42,
    BUFFER_LOAD_DWORD_IDXEN	= 43,
    BUFFER_LOAD_DWORD_OFFEN	= 44,
    BUFFER_LOAD_FORMAT_XYZW_ADDR64	= 45,
    BUFFER_LOAD_FORMAT_XYZW_IDXEN	= 46,
    BUFFER_LOAD_FORMAT_XYZW_OFFEN	= 47,
    BUFFER_LOAD_SBYTE_ADDR64	= 48,
    BUFFER_LOAD_SBYTE_IDXEN	= 49,
    BUFFER_LOAD_SBYTE_OFFEN	= 50,
    BUFFER_LOAD_SSHORT_ADDR64	= 51,
    BUFFER_LOAD_SSHORT_IDXEN	= 52,
    BUFFER_LOAD_SSHORT_OFFEN	= 53,
    BUFFER_LOAD_UBYTE_ADDR64	= 54,
    BUFFER_LOAD_UBYTE_IDXEN	= 55,
    BUFFER_LOAD_UBYTE_OFFEN	= 56,
    BUFFER_LOAD_USHORT_ADDR64	= 57,
    BUFFER_LOAD_USHORT_IDXEN	= 58,
    BUFFER_LOAD_USHORT_OFFEN	= 59,
    BUFFER_STORE_DWORD	= 60,
    BUFFER_STORE_DWORDX2	= 61,
    BUFFER_STORE_DWORDX4	= 62,
    CASE	= 63,
    CEIL	= 64,
    CF_ALU	= 65,
    CF_ALU_POP_AFTER	= 66,
    CF_ALU_PUSH_BEFORE	= 67,
    CF_CALL_FS_EG	= 68,
    CF_CALL_FS_R600	= 69,
    CF_CONTINUE_EG	= 70,
    CF_CONTINUE_R600	= 71,
    CF_ELSE_EG	= 72,
    CF_ELSE_R600	= 73,
    CF_END_CM	= 74,
    CF_END_EG	= 75,
    CF_END_R600	= 76,
    CF_JUMP_EG	= 77,
    CF_JUMP_R600	= 78,
    CF_TC_EG	= 79,
    CF_TC_R600	= 80,
    CF_VC_EG	= 81,
    CF_VC_R600	= 82,
    CLAMP_R600	= 83,
    CNDE_INT	= 84,
    CNDE_eg	= 85,
    CNDE_r600	= 86,
    CNDGE_INT	= 87,
    CNDGE_eg	= 88,
    CNDGE_r600	= 89,
    CNDGT_INT	= 90,
    CNDGT_eg	= 91,
    CNDGT_r600	= 92,
    CONST_COPY	= 93,
    CONTINUE	= 94,
    CONTINUEC_f32	= 95,
    CONTINUEC_i32	= 96,
    CONTINUE_LOGICALNZ_f32	= 97,
    CONTINUE_LOGICALNZ_i32	= 98,
    CONTINUE_LOGICALZ_f32	= 99,
    CONTINUE_LOGICALZ_i32	= 100,
    COS_cm	= 101,
    COS_eg	= 102,
    COS_r600	= 103,
    COS_r700	= 104,
    CUBE_eg_pseudo	= 105,
    CUBE_eg_real	= 106,
    CUBE_r600_pseudo	= 107,
    CUBE_r600_real	= 108,
    DEFAULT	= 109,
    DOT4_eg	= 110,
    DOT4_r600	= 111,
    DOT_4	= 112,
    DS_READ_B32	= 113,
    DS_WRITE_B32	= 114,
    EG_ExportBuf	= 115,
    EG_ExportSwz	= 116,
    ELSE	= 117,
    END	= 118,
    ENDFUNC	= 119,
    ENDIF	= 120,
    ENDLOOP	= 121,
    ENDMAIN	= 122,
    ENDSWITCH	= 123,
    END_LOOP_EG	= 124,
    END_LOOP_R600	= 125,
    EXP	= 126,
    EXP_IEEE_cm	= 127,
    EXP_IEEE_eg	= 128,
    EXP_IEEE_r600	= 129,
    FABS_R600	= 130,
    FETCH_CLAUSE	= 131,
    FLOOR	= 132,
    FLT_TO_INT_eg	= 133,
    FLT_TO_INT_r600	= 134,
    FLT_TO_UINT_eg	= 135,
    FLT_TO_UINT_r600	= 136,
    FNEG_R600	= 137,
    FRACT	= 138,
    FUNC	= 139,
    GROUP_BARRIER	= 140,
    IFC_f32	= 141,
    IFC_i32	= 142,
    IF_LOGICALNZ_f32	= 143,
    IF_LOGICALNZ_i32	= 144,
    IF_LOGICALZ_f32	= 145,
    IF_LOGICALZ_i32	= 146,
    IF_PREDICATE_SET	= 147,
    IMAGE_GET_RESINFO	= 148,
    IMAGE_LOAD_MIP	= 149,
    IMAGE_SAMPLE	= 150,
    IMAGE_SAMPLE_B	= 151,
    IMAGE_SAMPLE_C	= 152,
    IMAGE_SAMPLE_C_B	= 153,
    IMAGE_SAMPLE_C_D	= 154,
    IMAGE_SAMPLE_C_L	= 155,
    IMAGE_SAMPLE_D	= 156,
    IMAGE_SAMPLE_L	= 157,
    INTERP_LOAD_P0	= 158,
    INTERP_PAIR_XY	= 159,
    INTERP_PAIR_ZW	= 160,
    INTERP_VEC_LOAD	= 161,
    INTERP_XY	= 162,
    INTERP_ZW	= 163,
    INT_TO_FLT_eg	= 164,
    INT_TO_FLT_r600	= 165,
    JUMP	= 166,
    JUMP_COND	= 167,
    KILLGT	= 168,
    LDS_READ_RET	= 169,
    LDS_WRITE	= 170,
    LITERALS	= 171,
    LOAD_CONST	= 172,
    LOG_CLAMPED_eg	= 173,
    LOG_CLAMPED_r600	= 174,
    LOG_IEEE_cm	= 175,
    LOG_IEEE_eg	= 176,
    LOG_IEEE_r600	= 177,
    LOOP_BREAK_EG	= 178,
    LOOP_BREAK_R600	= 179,
    LSHL_eg	= 180,
    LSHL_r600	= 181,
    LSHR_eg	= 182,
    LSHR_r600	= 183,
    MASK_WRITE	= 184,
    MAX	= 185,
    MAX_INT	= 186,
    MAX_UINT	= 187,
    MIN	= 188,
    MIN_INT	= 189,
    MIN_UINT	= 190,
    MOV	= 191,
    MOVA_INT_eg	= 192,
    MOV_IMM_F32	= 193,
    MOV_IMM_I32	= 194,
    MUL	= 195,
    MULADD_IEEE_eg	= 196,
    MULADD_IEEE_r600	= 197,
    MULADD_INT24_cm	= 198,
    MULADD_UINT24_eg	= 199,
    MULADD_eg	= 200,
    MULADD_r600	= 201,
    MULHI_INT_cm	= 202,
    MULHI_INT_eg	= 203,
    MULHI_INT_r600	= 204,
    MULHI_UINT_cm	= 205,
    MULHI_UINT_eg	= 206,
    MULHI_UINT_r600	= 207,
    MULLO_INT_cm	= 208,
    MULLO_INT_eg	= 209,
    MULLO_INT_r600	= 210,
    MULLO_UINT_cm	= 211,
    MULLO_UINT_eg	= 212,
    MULLO_UINT_r600	= 213,
    MUL_IEEE	= 214,
    MUL_INT24_cm	= 215,
    MUL_LIT_eg	= 216,
    MUL_LIT_r600	= 217,
    MUL_UINT24_eg	= 218,
    NOT_INT	= 219,
    OR_INT	= 220,
    PAD	= 221,
    POP_EG	= 222,
    POP_R600	= 223,
    PRED_SETE	= 224,
    PRED_SETE_INT	= 225,
    PRED_SETGE	= 226,
    PRED_SETGE_INT	= 227,
    PRED_SETGT	= 228,
    PRED_SETGT_INT	= 229,
    PRED_SETNE	= 230,
    PRED_SETNE_INT	= 231,
    PRED_X	= 232,
    R600_ExportBuf	= 233,
    R600_ExportSwz	= 234,
    R600_RegisterLoad	= 235,
    R600_RegisterStore	= 236,
    RAT_STORE_DWORD32_cm	= 237,
    RAT_STORE_DWORD64_cm	= 238,
    RAT_WRITE_CACHELESS_128_eg	= 239,
    RAT_WRITE_CACHELESS_32_eg	= 240,
    RAT_WRITE_CACHELESS_64_eg	= 241,
    RECIPSQRT_CLAMPED_cm	= 242,
    RECIPSQRT_CLAMPED_eg	= 243,
    RECIPSQRT_CLAMPED_r600	= 244,
    RECIPSQRT_IEEE_cm	= 245,
    RECIPSQRT_IEEE_eg	= 246,
    RECIPSQRT_IEEE_r600	= 247,
    RECIP_CLAMPED_cm	= 248,
    RECIP_CLAMPED_eg	= 249,
    RECIP_CLAMPED_r600	= 250,
    RECIP_IEEE_cm	= 251,
    RECIP_IEEE_eg	= 252,
    RECIP_IEEE_r600	= 253,
    RECIP_UINT_eg	= 254,
    RECIP_UINT_r600	= 255,
    RETDYN	= 256,
    RETURN	= 257,
    RNDNE	= 258,
    SETE	= 259,
    SETE_DX10	= 260,
    SETE_INT	= 261,
    SETGE_DX10	= 262,
    SETGE_INT	= 263,
    SETGE_UINT	= 264,
    SETGT_DX10	= 265,
    SETGT_INT	= 266,
    SETGT_UINT	= 267,
    SETNE_DX10	= 268,
    SETNE_INT	= 269,
    SGE	= 270,
    SGT	= 271,
    SIN_cm	= 272,
    SIN_eg	= 273,
    SIN_r600	= 274,
    SIN_r700	= 275,
    SI_ADDR64_RSRC	= 276,
    SI_BREAK	= 277,
    SI_ELSE	= 278,
    SI_ELSE_BREAK	= 279,
    SI_END_CF	= 280,
    SI_IF	= 281,
    SI_IF_BREAK	= 282,
    SI_INDIRECT_DST_V16	= 283,
    SI_INDIRECT_DST_V2	= 284,
    SI_INDIRECT_DST_V4	= 285,
    SI_INDIRECT_DST_V8	= 286,
    SI_INDIRECT_SRC	= 287,
    SI_KILL	= 288,
    SI_LOOP	= 289,
    SNE	= 290,
    SUB_INT	= 291,
    SWITCH	= 292,
    S_ABSDIFF_I32	= 293,
    S_ABS_I32	= 294,
    S_ADDC_U32	= 295,
    S_ADDK_I32	= 296,
    S_ADD_I32	= 297,
    S_ADD_U32	= 298,
    S_ANDN2_B32	= 299,
    S_ANDN2_B64	= 300,
    S_ANDN2_SAVEEXEC_B64	= 301,
    S_AND_B32	= 302,
    S_AND_B64	= 303,
    S_AND_SAVEEXEC_B64	= 304,
    S_ASHR_I32	= 305,
    S_ASHR_I64	= 306,
    S_BARRIER	= 307,
    S_BFE_I32	= 308,
    S_BFE_I64	= 309,
    S_BFE_U32	= 310,
    S_BFE_U64	= 311,
    S_BFM_B32	= 312,
    S_BFM_B64	= 313,
    S_BRANCH	= 314,
    S_BREV_B32	= 315,
    S_BREV_B64	= 316,
    S_BUFFER_LOAD_DWORDX16_IMM	= 317,
    S_BUFFER_LOAD_DWORDX16_SGPR	= 318,
    S_BUFFER_LOAD_DWORDX2_IMM	= 319,
    S_BUFFER_LOAD_DWORDX2_SGPR	= 320,
    S_BUFFER_LOAD_DWORDX4_IMM	= 321,
    S_BUFFER_LOAD_DWORDX4_SGPR	= 322,
    S_BUFFER_LOAD_DWORDX8_IMM	= 323,
    S_BUFFER_LOAD_DWORDX8_SGPR	= 324,
    S_BUFFER_LOAD_DWORD_IMM	= 325,
    S_BUFFER_LOAD_DWORD_SGPR	= 326,
    S_CBRANCH_EXECNZ	= 327,
    S_CBRANCH_EXECZ	= 328,
    S_CBRANCH_SCC0	= 329,
    S_CBRANCH_SCC1	= 330,
    S_CBRANCH_VCCNZ	= 331,
    S_CBRANCH_VCCZ	= 332,
    S_CMOVK_I32	= 333,
    S_CMOV_B32	= 334,
    S_CMOV_B64	= 335,
    S_CMPK_EQ_U32	= 336,
    S_CMPK_GE_I32	= 337,
    S_CMPK_GE_U32	= 338,
    S_CMPK_GT_I32	= 339,
    S_CMPK_GT_U32	= 340,
    S_CMPK_LE_I32	= 341,
    S_CMPK_LE_U32	= 342,
    S_CMPK_LG_I32	= 343,
    S_CMPK_LG_U32	= 344,
    S_CMPK_LT_I32	= 345,
    S_CMPK_LT_U32	= 346,
    S_CMP_EQ_I32	= 347,
    S_CMP_EQ_U32	= 348,
    S_CMP_GE_I32	= 349,
    S_CMP_GE_U32	= 350,
    S_CMP_GT_I32	= 351,
    S_CMP_GT_U32	= 352,
    S_CMP_LE_I32	= 353,
    S_CMP_LE_U32	= 354,
    S_CMP_LG_I32	= 355,
    S_CMP_LG_U32	= 356,
    S_CMP_LT_I32	= 357,
    S_CMP_LT_U32	= 358,
    S_CSELECT_B32	= 359,
    S_CSELECT_B64	= 360,
    S_ENDPGM	= 361,
    S_FLBIT_I32	= 362,
    S_GETPC_B64	= 363,
    S_GETREG_B32	= 364,
    S_GETREG_REGRD_B32	= 365,
    S_LOAD_DWORDX16_IMM	= 366,
    S_LOAD_DWORDX16_SGPR	= 367,
    S_LOAD_DWORDX2_IMM	= 368,
    S_LOAD_DWORDX2_SGPR	= 369,
    S_LOAD_DWORDX4_IMM	= 370,
    S_LOAD_DWORDX4_SGPR	= 371,
    S_LOAD_DWORDX8_IMM	= 372,
    S_LOAD_DWORDX8_SGPR	= 373,
    S_LOAD_DWORD_IMM	= 374,
    S_LOAD_DWORD_SGPR	= 375,
    S_LSHL_B32	= 376,
    S_LSHL_B64	= 377,
    S_LSHR_B32	= 378,
    S_LSHR_B64	= 379,
    S_MAX_I32	= 380,
    S_MAX_U32	= 381,
    S_MIN_I32	= 382,
    S_MIN_U32	= 383,
    S_MOVK_I32	= 384,
    S_MOVRELD_B32	= 385,
    S_MOVRELD_B64	= 386,
    S_MOVRELS_B32	= 387,
    S_MOVRELS_B64	= 388,
    S_MOV_B32	= 389,
    S_MOV_B64	= 390,
    S_MOV_FED_B32	= 391,
    S_MOV_REGRD_B32	= 392,
    S_MULK_I32	= 393,
    S_MUL_I32	= 394,
    S_NAND_B32	= 395,
    S_NAND_B64	= 396,
    S_NAND_SAVEEXEC_B64	= 397,
    S_NOR_B32	= 398,
    S_NOR_B64	= 399,
    S_NOR_SAVEEXEC_B64	= 400,
    S_NOT_B32	= 401,
    S_NOT_B64	= 402,
    S_ORN2_B32	= 403,
    S_ORN2_B64	= 404,
    S_ORN2_SAVEEXEC_B64	= 405,
    S_OR_B32	= 406,
    S_OR_B64	= 407,
    S_OR_SAVEEXEC_B64	= 408,
    S_QUADMASK_B32	= 409,
    S_QUADMASK_B64	= 410,
    S_RFE_B64	= 411,
    S_SETPC_B64	= 412,
    S_SETREG_B32	= 413,
    S_SUBB_U32	= 414,
    S_SUB_I32	= 415,
    S_SUB_U32	= 416,
    S_SWAPPC_B64	= 417,
    S_WAITCNT	= 418,
    S_WQM_B32	= 419,
    S_WQM_B64	= 420,
    S_XNOR_B32	= 421,
    S_XNOR_B64	= 422,
    S_XNOR_SAVEEXEC_B64	= 423,
    S_XOR_B32	= 424,
    S_XOR_B64	= 425,
    S_XOR_SAVEEXEC_B64	= 426,
    TBUFFER_LOAD_FORMAT_XYZW	= 427,
    TEX_GET_GRADIENTS_H	= 428,
    TEX_GET_GRADIENTS_V	= 429,
    TEX_GET_TEXTURE_RESINFO	= 430,
    TEX_LD	= 431,
    TEX_SAMPLE	= 432,
    TEX_SAMPLE_C	= 433,
    TEX_SAMPLE_C_G	= 434,
    TEX_SAMPLE_C_L	= 435,
    TEX_SAMPLE_C_LB	= 436,
    TEX_SAMPLE_G	= 437,
    TEX_SAMPLE_L	= 438,
    TEX_SAMPLE_LB	= 439,
    TEX_SET_GRADIENTS_H	= 440,
    TEX_SET_GRADIENTS_V	= 441,
    TEX_VTX_CONSTBUF	= 442,
    TEX_VTX_TEXBUF	= 443,
    TRUNC	= 444,
    TXD	= 445,
    TXD_SHADOW	= 446,
    UINT_TO_FLT_eg	= 447,
    UINT_TO_FLT_r600	= 448,
    VTX_READ_GLOBAL_128_cm	= 449,
    VTX_READ_GLOBAL_128_eg	= 450,
    VTX_READ_GLOBAL_16_cm	= 451,
    VTX_READ_GLOBAL_16_eg	= 452,
    VTX_READ_GLOBAL_32_cm	= 453,
    VTX_READ_GLOBAL_32_eg	= 454,
    VTX_READ_GLOBAL_64_cm	= 455,
    VTX_READ_GLOBAL_64_eg	= 456,
    VTX_READ_GLOBAL_8_cm	= 457,
    VTX_READ_GLOBAL_8_eg	= 458,
    VTX_READ_PARAM_128_cm	= 459,
    VTX_READ_PARAM_128_eg	= 460,
    VTX_READ_PARAM_16_cm	= 461,
    VTX_READ_PARAM_16_eg	= 462,
    VTX_READ_PARAM_32_cm	= 463,
    VTX_READ_PARAM_32_eg	= 464,
    VTX_READ_PARAM_64_cm	= 465,
    VTX_READ_PARAM_64_eg	= 466,
    VTX_READ_PARAM_8_cm	= 467,
    VTX_READ_PARAM_8_eg	= 468,
    V_ADDC_U32_e32	= 469,
    V_ADDC_U32_e64	= 470,
    V_ADD_F32_e32	= 471,
    V_ADD_F32_e64	= 472,
    V_ADD_F64	= 473,
    V_ADD_I32_e32	= 474,
    V_ADD_I32_e64	= 475,
    V_ALIGNBIT_B32	= 476,
    V_ALIGNBYTE_B32	= 477,
    V_AND_B32_e32	= 478,
    V_AND_B32_e64	= 479,
    V_ASHRREV_I32_e32	= 480,
    V_ASHRREV_I32_e64	= 481,
    V_ASHR_I32_e32	= 482,
    V_ASHR_I32_e64	= 483,
    V_ASHR_I64	= 484,
    V_BFE_I32	= 485,
    V_BFE_U32	= 486,
    V_BFI_B32	= 487,
    V_BFM_B32_e32	= 488,
    V_BFM_B32_e64	= 489,
    V_BFREV_B32_e32	= 490,
    V_BFREV_B32_e64	= 491,
    V_CEIL_F32_e32	= 492,
    V_CEIL_F32_e64	= 493,
    V_CMPSX_EQ_F32_e32	= 494,
    V_CMPSX_EQ_F32_e64	= 495,
    V_CMPSX_EQ_F64_e32	= 496,
    V_CMPSX_EQ_F64_e64	= 497,
    V_CMPSX_F_F32_e32	= 498,
    V_CMPSX_F_F32_e64	= 499,
    V_CMPSX_F_F64_e32	= 500,
    V_CMPSX_F_F64_e64	= 501,
    V_CMPSX_GE_F32_e32	= 502,
    V_CMPSX_GE_F32_e64	= 503,
    V_CMPSX_GE_F64_e32	= 504,
    V_CMPSX_GE_F64_e64	= 505,
    V_CMPSX_GT_F32_e32	= 506,
    V_CMPSX_GT_F32_e64	= 507,
    V_CMPSX_GT_F64_e32	= 508,
    V_CMPSX_GT_F64_e64	= 509,
    V_CMPSX_LE_F32_e32	= 510,
    V_CMPSX_LE_F32_e64	= 511,
    V_CMPSX_LE_F64_e32	= 512,
    V_CMPSX_LE_F64_e64	= 513,
    V_CMPSX_LG_F32_e32	= 514,
    V_CMPSX_LG_F32_e64	= 515,
    V_CMPSX_LG_F64_e32	= 516,
    V_CMPSX_LG_F64_e64	= 517,
    V_CMPSX_LT_F32_e32	= 518,
    V_CMPSX_LT_F32_e64	= 519,
    V_CMPSX_LT_F64_e32	= 520,
    V_CMPSX_LT_F64_e64	= 521,
    V_CMPSX_NEQ_F32_e32	= 522,
    V_CMPSX_NEQ_F32_e64	= 523,
    V_CMPSX_NEQ_F64_e32	= 524,
    V_CMPSX_NEQ_F64_e64	= 525,
    V_CMPSX_NGE_F32_e32	= 526,
    V_CMPSX_NGE_F32_e64	= 527,
    V_CMPSX_NGE_F64_e32	= 528,
    V_CMPSX_NGE_F64_e64	= 529,
    V_CMPSX_NGT_F32_e32	= 530,
    V_CMPSX_NGT_F32_e64	= 531,
    V_CMPSX_NGT_F64_e32	= 532,
    V_CMPSX_NGT_F64_e64	= 533,
    V_CMPSX_NLE_F32_e32	= 534,
    V_CMPSX_NLE_F32_e64	= 535,
    V_CMPSX_NLE_F64_e32	= 536,
    V_CMPSX_NLE_F64_e64	= 537,
    V_CMPSX_NLG_F32_e32	= 538,
    V_CMPSX_NLG_F32_e64	= 539,
    V_CMPSX_NLG_F64_e32	= 540,
    V_CMPSX_NLG_F64_e64	= 541,
    V_CMPSX_NLT_F32_e32	= 542,
    V_CMPSX_NLT_F32_e64	= 543,
    V_CMPSX_NLT_F64_e32	= 544,
    V_CMPSX_NLT_F64_e64	= 545,
    V_CMPSX_O_F32_e32	= 546,
    V_CMPSX_O_F32_e64	= 547,
    V_CMPSX_O_F64_e32	= 548,
    V_CMPSX_O_F64_e64	= 549,
    V_CMPSX_TRU_F32_e32	= 550,
    V_CMPSX_TRU_F32_e64	= 551,
    V_CMPSX_TRU_F64_e32	= 552,
    V_CMPSX_TRU_F64_e64	= 553,
    V_CMPSX_U_F32_e32	= 554,
    V_CMPSX_U_F32_e64	= 555,
    V_CMPSX_U_F64_e32	= 556,
    V_CMPSX_U_F64_e64	= 557,
    V_CMPS_EQ_F32_e32	= 558,
    V_CMPS_EQ_F32_e64	= 559,
    V_CMPS_EQ_F64_e32	= 560,
    V_CMPS_EQ_F64_e64	= 561,
    V_CMPS_F_F32_e32	= 562,
    V_CMPS_F_F32_e64	= 563,
    V_CMPS_F_F64_e32	= 564,
    V_CMPS_F_F64_e64	= 565,
    V_CMPS_GE_F32_e32	= 566,
    V_CMPS_GE_F32_e64	= 567,
    V_CMPS_GE_F64_e32	= 568,
    V_CMPS_GE_F64_e64	= 569,
    V_CMPS_GT_F32_e32	= 570,
    V_CMPS_GT_F32_e64	= 571,
    V_CMPS_GT_F64_e32	= 572,
    V_CMPS_GT_F64_e64	= 573,
    V_CMPS_LE_F32_e32	= 574,
    V_CMPS_LE_F32_e64	= 575,
    V_CMPS_LE_F64_e32	= 576,
    V_CMPS_LE_F64_e64	= 577,
    V_CMPS_LG_F32_e32	= 578,
    V_CMPS_LG_F32_e64	= 579,
    V_CMPS_LG_F64_e32	= 580,
    V_CMPS_LG_F64_e64	= 581,
    V_CMPS_LT_F32_e32	= 582,
    V_CMPS_LT_F32_e64	= 583,
    V_CMPS_LT_F64_e32	= 584,
    V_CMPS_LT_F64_e64	= 585,
    V_CMPS_NEQ_F32_e32	= 586,
    V_CMPS_NEQ_F32_e64	= 587,
    V_CMPS_NEQ_F64_e32	= 588,
    V_CMPS_NEQ_F64_e64	= 589,
    V_CMPS_NGE_F32_e32	= 590,
    V_CMPS_NGE_F32_e64	= 591,
    V_CMPS_NGE_F64_e32	= 592,
    V_CMPS_NGE_F64_e64	= 593,
    V_CMPS_NGT_F32_e32	= 594,
    V_CMPS_NGT_F32_e64	= 595,
    V_CMPS_NGT_F64_e32	= 596,
    V_CMPS_NGT_F64_e64	= 597,
    V_CMPS_NLE_F32_e32	= 598,
    V_CMPS_NLE_F32_e64	= 599,
    V_CMPS_NLE_F64_e32	= 600,
    V_CMPS_NLE_F64_e64	= 601,
    V_CMPS_NLG_F32_e32	= 602,
    V_CMPS_NLG_F32_e64	= 603,
    V_CMPS_NLG_F64_e32	= 604,
    V_CMPS_NLG_F64_e64	= 605,
    V_CMPS_NLT_F32_e32	= 606,
    V_CMPS_NLT_F32_e64	= 607,
    V_CMPS_NLT_F64_e32	= 608,
    V_CMPS_NLT_F64_e64	= 609,
    V_CMPS_O_F32_e32	= 610,
    V_CMPS_O_F32_e64	= 611,
    V_CMPS_O_F64_e32	= 612,
    V_CMPS_O_F64_e64	= 613,
    V_CMPS_TRU_F32_e32	= 614,
    V_CMPS_TRU_F32_e64	= 615,
    V_CMPS_TRU_F64_e32	= 616,
    V_CMPS_TRU_F64_e64	= 617,
    V_CMPS_U_F32_e32	= 618,
    V_CMPS_U_F32_e64	= 619,
    V_CMPS_U_F64_e32	= 620,
    V_CMPS_U_F64_e64	= 621,
    V_CMPX_CLASS_F32_e32	= 622,
    V_CMPX_CLASS_F32_e64	= 623,
    V_CMPX_CLASS_F64_e32	= 624,
    V_CMPX_CLASS_F64_e64	= 625,
    V_CMPX_EQ_F32_e32	= 626,
    V_CMPX_EQ_F32_e64	= 627,
    V_CMPX_EQ_F64_e32	= 628,
    V_CMPX_EQ_F64_e64	= 629,
    V_CMPX_EQ_I32_e32	= 630,
    V_CMPX_EQ_I32_e64	= 631,
    V_CMPX_EQ_I64_e32	= 632,
    V_CMPX_EQ_I64_e64	= 633,
    V_CMPX_EQ_U32_e32	= 634,
    V_CMPX_EQ_U32_e64	= 635,
    V_CMPX_EQ_U64_e32	= 636,
    V_CMPX_EQ_U64_e64	= 637,
    V_CMPX_F_F32_e32	= 638,
    V_CMPX_F_F32_e64	= 639,
    V_CMPX_F_F64_e32	= 640,
    V_CMPX_F_F64_e64	= 641,
    V_CMPX_F_I32_e32	= 642,
    V_CMPX_F_I32_e64	= 643,
    V_CMPX_F_I64_e32	= 644,
    V_CMPX_F_I64_e64	= 645,
    V_CMPX_F_U32_e32	= 646,
    V_CMPX_F_U32_e64	= 647,
    V_CMPX_F_U64_e32	= 648,
    V_CMPX_F_U64_e64	= 649,
    V_CMPX_GE_F32_e32	= 650,
    V_CMPX_GE_F32_e64	= 651,
    V_CMPX_GE_F64_e32	= 652,
    V_CMPX_GE_F64_e64	= 653,
    V_CMPX_GE_I32_e32	= 654,
    V_CMPX_GE_I32_e64	= 655,
    V_CMPX_GE_I64_e32	= 656,
    V_CMPX_GE_I64_e64	= 657,
    V_CMPX_GE_U32_e32	= 658,
    V_CMPX_GE_U32_e64	= 659,
    V_CMPX_GE_U64_e32	= 660,
    V_CMPX_GE_U64_e64	= 661,
    V_CMPX_GT_F32_e32	= 662,
    V_CMPX_GT_F32_e64	= 663,
    V_CMPX_GT_F64_e32	= 664,
    V_CMPX_GT_F64_e64	= 665,
    V_CMPX_GT_I32_e32	= 666,
    V_CMPX_GT_I32_e64	= 667,
    V_CMPX_GT_I64_e32	= 668,
    V_CMPX_GT_I64_e64	= 669,
    V_CMPX_GT_U32_e32	= 670,
    V_CMPX_GT_U32_e64	= 671,
    V_CMPX_GT_U64_e32	= 672,
    V_CMPX_GT_U64_e64	= 673,
    V_CMPX_LE_F32_e32	= 674,
    V_CMPX_LE_F32_e64	= 675,
    V_CMPX_LE_F64_e32	= 676,
    V_CMPX_LE_F64_e64	= 677,
    V_CMPX_LE_I32_e32	= 678,
    V_CMPX_LE_I32_e64	= 679,
    V_CMPX_LE_I64_e32	= 680,
    V_CMPX_LE_I64_e64	= 681,
    V_CMPX_LE_U32_e32	= 682,
    V_CMPX_LE_U32_e64	= 683,
    V_CMPX_LE_U64_e32	= 684,
    V_CMPX_LE_U64_e64	= 685,
    V_CMPX_LG_F32_e32	= 686,
    V_CMPX_LG_F32_e64	= 687,
    V_CMPX_LG_F64_e32	= 688,
    V_CMPX_LG_F64_e64	= 689,
    V_CMPX_LT_F32_e32	= 690,
    V_CMPX_LT_F32_e64	= 691,
    V_CMPX_LT_F64_e32	= 692,
    V_CMPX_LT_F64_e64	= 693,
    V_CMPX_LT_I32_e32	= 694,
    V_CMPX_LT_I32_e64	= 695,
    V_CMPX_LT_I64_e32	= 696,
    V_CMPX_LT_I64_e64	= 697,
    V_CMPX_LT_U32_e32	= 698,
    V_CMPX_LT_U32_e64	= 699,
    V_CMPX_LT_U64_e32	= 700,
    V_CMPX_LT_U64_e64	= 701,
    V_CMPX_NEQ_F32_e32	= 702,
    V_CMPX_NEQ_F32_e64	= 703,
    V_CMPX_NEQ_F64_e32	= 704,
    V_CMPX_NEQ_F64_e64	= 705,
    V_CMPX_NE_I32_e32	= 706,
    V_CMPX_NE_I32_e64	= 707,
    V_CMPX_NE_I64_e32	= 708,
    V_CMPX_NE_I64_e64	= 709,
    V_CMPX_NE_U32_e32	= 710,
    V_CMPX_NE_U32_e64	= 711,
    V_CMPX_NE_U64_e32	= 712,
    V_CMPX_NE_U64_e64	= 713,
    V_CMPX_NGE_F32_e32	= 714,
    V_CMPX_NGE_F32_e64	= 715,
    V_CMPX_NGE_F64_e32	= 716,
    V_CMPX_NGE_F64_e64	= 717,
    V_CMPX_NGT_F32_e32	= 718,
    V_CMPX_NGT_F32_e64	= 719,
    V_CMPX_NGT_F64_e32	= 720,
    V_CMPX_NGT_F64_e64	= 721,
    V_CMPX_NLE_F32_e32	= 722,
    V_CMPX_NLE_F32_e64	= 723,
    V_CMPX_NLE_F64_e32	= 724,
    V_CMPX_NLE_F64_e64	= 725,
    V_CMPX_NLG_F32_e32	= 726,
    V_CMPX_NLG_F32_e64	= 727,
    V_CMPX_NLG_F64_e32	= 728,
    V_CMPX_NLG_F64_e64	= 729,
    V_CMPX_NLT_F32_e32	= 730,
    V_CMPX_NLT_F32_e64	= 731,
    V_CMPX_NLT_F64_e32	= 732,
    V_CMPX_NLT_F64_e64	= 733,
    V_CMPX_O_F32_e32	= 734,
    V_CMPX_O_F32_e64	= 735,
    V_CMPX_O_F64_e32	= 736,
    V_CMPX_O_F64_e64	= 737,
    V_CMPX_TRU_F32_e32	= 738,
    V_CMPX_TRU_F32_e64	= 739,
    V_CMPX_TRU_F64_e32	= 740,
    V_CMPX_TRU_F64_e64	= 741,
    V_CMPX_T_I32_e32	= 742,
    V_CMPX_T_I32_e64	= 743,
    V_CMPX_T_I64_e32	= 744,
    V_CMPX_T_I64_e64	= 745,
    V_CMPX_T_U32_e32	= 746,
    V_CMPX_T_U32_e64	= 747,
    V_CMPX_T_U64_e32	= 748,
    V_CMPX_T_U64_e64	= 749,
    V_CMPX_U_F32_e32	= 750,
    V_CMPX_U_F32_e64	= 751,
    V_CMPX_U_F64_e32	= 752,
    V_CMPX_U_F64_e64	= 753,
    V_CMP_CLASS_F32_e32	= 754,
    V_CMP_CLASS_F32_e64	= 755,
    V_CMP_CLASS_F64_e32	= 756,
    V_CMP_CLASS_F64_e64	= 757,
    V_CMP_EQ_F32_e32	= 758,
    V_CMP_EQ_F32_e64	= 759,
    V_CMP_EQ_F64_e32	= 760,
    V_CMP_EQ_F64_e64	= 761,
    V_CMP_EQ_I32_e32	= 762,
    V_CMP_EQ_I32_e64	= 763,
    V_CMP_EQ_I64_e32	= 764,
    V_CMP_EQ_I64_e64	= 765,
    V_CMP_EQ_U32_e32	= 766,
    V_CMP_EQ_U32_e64	= 767,
    V_CMP_EQ_U64_e32	= 768,
    V_CMP_EQ_U64_e64	= 769,
    V_CMP_F_F32_e32	= 770,
    V_CMP_F_F32_e64	= 771,
    V_CMP_F_F64_e32	= 772,
    V_CMP_F_F64_e64	= 773,
    V_CMP_F_I32_e32	= 774,
    V_CMP_F_I32_e64	= 775,
    V_CMP_F_I64_e32	= 776,
    V_CMP_F_I64_e64	= 777,
    V_CMP_F_U32_e32	= 778,
    V_CMP_F_U32_e64	= 779,
    V_CMP_F_U64_e32	= 780,
    V_CMP_F_U64_e64	= 781,
    V_CMP_GE_F32_e32	= 782,
    V_CMP_GE_F32_e64	= 783,
    V_CMP_GE_F64_e32	= 784,
    V_CMP_GE_F64_e64	= 785,
    V_CMP_GE_I32_e32	= 786,
    V_CMP_GE_I32_e64	= 787,
    V_CMP_GE_I64_e32	= 788,
    V_CMP_GE_I64_e64	= 789,
    V_CMP_GE_U32_e32	= 790,
    V_CMP_GE_U32_e64	= 791,
    V_CMP_GE_U64_e32	= 792,
    V_CMP_GE_U64_e64	= 793,
    V_CMP_GT_F32_e32	= 794,
    V_CMP_GT_F32_e64	= 795,
    V_CMP_GT_F64_e32	= 796,
    V_CMP_GT_F64_e64	= 797,
    V_CMP_GT_I32_e32	= 798,
    V_CMP_GT_I32_e64	= 799,
    V_CMP_GT_I64_e32	= 800,
    V_CMP_GT_I64_e64	= 801,
    V_CMP_GT_U32_e32	= 802,
    V_CMP_GT_U32_e64	= 803,
    V_CMP_GT_U64_e32	= 804,
    V_CMP_GT_U64_e64	= 805,
    V_CMP_LE_F32_e32	= 806,
    V_CMP_LE_F32_e64	= 807,
    V_CMP_LE_F64_e32	= 808,
    V_CMP_LE_F64_e64	= 809,
    V_CMP_LE_I32_e32	= 810,
    V_CMP_LE_I32_e64	= 811,
    V_CMP_LE_I64_e32	= 812,
    V_CMP_LE_I64_e64	= 813,
    V_CMP_LE_U32_e32	= 814,
    V_CMP_LE_U32_e64	= 815,
    V_CMP_LE_U64_e32	= 816,
    V_CMP_LE_U64_e64	= 817,
    V_CMP_LG_F32_e32	= 818,
    V_CMP_LG_F32_e64	= 819,
    V_CMP_LG_F64_e32	= 820,
    V_CMP_LG_F64_e64	= 821,
    V_CMP_LT_F32_e32	= 822,
    V_CMP_LT_F32_e64	= 823,
    V_CMP_LT_F64_e32	= 824,
    V_CMP_LT_F64_e64	= 825,
    V_CMP_LT_I32_e32	= 826,
    V_CMP_LT_I32_e64	= 827,
    V_CMP_LT_I64_e32	= 828,
    V_CMP_LT_I64_e64	= 829,
    V_CMP_LT_U32_e32	= 830,
    V_CMP_LT_U32_e64	= 831,
    V_CMP_LT_U64_e32	= 832,
    V_CMP_LT_U64_e64	= 833,
    V_CMP_NEQ_F32_e32	= 834,
    V_CMP_NEQ_F32_e64	= 835,
    V_CMP_NEQ_F64_e32	= 836,
    V_CMP_NEQ_F64_e64	= 837,
    V_CMP_NE_I32_e32	= 838,
    V_CMP_NE_I32_e64	= 839,
    V_CMP_NE_I64_e32	= 840,
    V_CMP_NE_I64_e64	= 841,
    V_CMP_NE_U32_e32	= 842,
    V_CMP_NE_U32_e64	= 843,
    V_CMP_NE_U64_e32	= 844,
    V_CMP_NE_U64_e64	= 845,
    V_CMP_NGE_F32_e32	= 846,
    V_CMP_NGE_F32_e64	= 847,
    V_CMP_NGE_F64_e32	= 848,
    V_CMP_NGE_F64_e64	= 849,
    V_CMP_NGT_F32_e32	= 850,
    V_CMP_NGT_F32_e64	= 851,
    V_CMP_NGT_F64_e32	= 852,
    V_CMP_NGT_F64_e64	= 853,
    V_CMP_NLE_F32_e32	= 854,
    V_CMP_NLE_F32_e64	= 855,
    V_CMP_NLE_F64_e32	= 856,
    V_CMP_NLE_F64_e64	= 857,
    V_CMP_NLG_F32_e32	= 858,
    V_CMP_NLG_F32_e64	= 859,
    V_CMP_NLG_F64_e32	= 860,
    V_CMP_NLG_F64_e64	= 861,
    V_CMP_NLT_F32_e32	= 862,
    V_CMP_NLT_F32_e64	= 863,
    V_CMP_NLT_F64_e32	= 864,
    V_CMP_NLT_F64_e64	= 865,
    V_CMP_O_F32_e32	= 866,
    V_CMP_O_F32_e64	= 867,
    V_CMP_O_F64_e32	= 868,
    V_CMP_O_F64_e64	= 869,
    V_CMP_TRU_F32_e32	= 870,
    V_CMP_TRU_F32_e64	= 871,
    V_CMP_TRU_F64_e32	= 872,
    V_CMP_TRU_F64_e64	= 873,
    V_CMP_T_I32_e32	= 874,
    V_CMP_T_I32_e64	= 875,
    V_CMP_T_I64_e32	= 876,
    V_CMP_T_I64_e64	= 877,
    V_CMP_T_U32_e32	= 878,
    V_CMP_T_U32_e64	= 879,
    V_CMP_T_U64_e32	= 880,
    V_CMP_T_U64_e64	= 881,
    V_CMP_U_F32_e32	= 882,
    V_CMP_U_F32_e64	= 883,
    V_CMP_U_F64_e32	= 884,
    V_CMP_U_F64_e64	= 885,
    V_CNDMASK_B32_e32	= 886,
    V_CNDMASK_B32_e64	= 887,
    V_COS_F32_e32	= 888,
    V_COS_F32_e64	= 889,
    V_CUBEID_F32	= 890,
    V_CUBEMA_F32	= 891,
    V_CUBESC_F32	= 892,
    V_CUBETC_F32	= 893,
    V_CVT_F32_I32_e32	= 894,
    V_CVT_F32_I32_e64	= 895,
    V_CVT_F32_U32_e32	= 896,
    V_CVT_F32_U32_e64	= 897,
    V_CVT_I32_F32_e32	= 898,
    V_CVT_I32_F32_e64	= 899,
    V_CVT_PKRTZ_F16_F32_e32	= 900,
    V_CVT_PKRTZ_F16_F32_e64	= 901,
    V_CVT_U32_F32_e32	= 902,
    V_CVT_U32_F32_e64	= 903,
    V_DIV_FIXUP_F32	= 904,
    V_DIV_FIXUP_F64	= 905,
    V_DIV_FMAS_F32	= 906,
    V_DIV_FMAS_F64	= 907,
    V_DIV_SCALE_F32	= 908,
    V_DIV_SCALE_F64	= 909,
    V_EXP_F32_e32	= 910,
    V_EXP_F32_e64	= 911,
    V_FFBH_I32_e32	= 912,
    V_FFBH_I32_e64	= 913,
    V_FFBH_U32_e32	= 914,
    V_FFBH_U32_e64	= 915,
    V_FFBL_B32_e32	= 916,
    V_FFBL_B32_e64	= 917,
    V_FLOOR_F32_e32	= 918,
    V_FLOOR_F32_e64	= 919,
    V_FMA_F32	= 920,
    V_FMA_F64	= 921,
    V_FRACT_F32_e32	= 922,
    V_FRACT_F32_e64	= 923,
    V_FRACT_F64_e32	= 924,
    V_FRACT_F64_e64	= 925,
    V_FREXP_MANT_F32_e32	= 926,
    V_FREXP_MANT_F32_e64	= 927,
    V_FREXP_MANT_F64_e32	= 928,
    V_FREXP_MANT_F64_e64	= 929,
    V_INTERP_MOV_F32	= 930,
    V_INTERP_P1_F32	= 931,
    V_INTERP_P2_F32	= 932,
    V_LDEXP_F32_e32	= 933,
    V_LDEXP_F32_e64	= 934,
    V_LDEXP_F64	= 935,
    V_LOG_CLAMP_F32_e32	= 936,
    V_LOG_CLAMP_F32_e64	= 937,
    V_LOG_F32_e32	= 938,
    V_LOG_F32_e64	= 939,
    V_LSHLREV_B32_e32	= 940,
    V_LSHLREV_B32_e64	= 941,
    V_LSHL_B32_e32	= 942,
    V_LSHL_B32_e64	= 943,
    V_LSHL_B64	= 944,
    V_LSHRREV_B32_e32	= 945,
    V_LSHRREV_B32_e64	= 946,
    V_LSHR_B32_e32	= 947,
    V_LSHR_B32_e64	= 948,
    V_LSHR_B64	= 949,
    V_MAC_F32_e32	= 950,
    V_MAC_F32_e64	= 951,
    V_MAC_LEGACY_F32_e32	= 952,
    V_MAC_LEGACY_F32_e64	= 953,
    V_MADAK_F32_e32	= 954,
    V_MADAK_F32_e64	= 955,
    V_MADMK_F32_e32	= 956,
    V_MADMK_F32_e64	= 957,
    V_MAD_F32	= 958,
    V_MAD_I32_I24	= 959,
    V_MAD_LEGACY_F32	= 960,
    V_MAD_U32_U24	= 961,
    V_MAX_F32_e32	= 962,
    V_MAX_F32_e64	= 963,
    V_MAX_F64	= 964,
    V_MAX_I32_e32	= 965,
    V_MAX_I32_e64	= 966,
    V_MAX_LEGACY_F32_e32	= 967,
    V_MAX_LEGACY_F32_e64	= 968,
    V_MAX_U32_e32	= 969,
    V_MAX_U32_e64	= 970,
    V_MBCNT_HI_U32_B32_e32	= 971,
    V_MBCNT_HI_U32_B32_e64	= 972,
    V_MBCNT_LO_U32_B32_e32	= 973,
    V_MBCNT_LO_U32_B32_e64	= 974,
    V_MIN_F32_e32	= 975,
    V_MIN_F32_e64	= 976,
    V_MIN_F64	= 977,
    V_MIN_I32_e32	= 978,
    V_MIN_I32_e64	= 979,
    V_MIN_LEGACY_F32_e32	= 980,
    V_MIN_LEGACY_F32_e64	= 981,
    V_MIN_U32_e32	= 982,
    V_MIN_U32_e64	= 983,
    V_MOVRELD_B32_e32	= 984,
    V_MOVRELD_B32_e64	= 985,
    V_MOVRELSD_B32_e32	= 986,
    V_MOVRELSD_B32_e64	= 987,
    V_MOVRELS_B32_e32	= 988,
    V_MOVRELS_B32_e64	= 989,
    V_MOV_B32_e32	= 990,
    V_MOV_B32_e64	= 991,
    V_MOV_FED_B32_e32	= 992,
    V_MOV_FED_B32_e64	= 993,
    V_MULLIT_F32	= 994,
    V_MUL_F32_e32	= 995,
    V_MUL_F32_e64	= 996,
    V_MUL_F64	= 997,
    V_MUL_HI_I32	= 998,
    V_MUL_HI_U32	= 999,
    V_MUL_I32_I24_e32	= 1000,
    V_MUL_I32_I24_e64	= 1001,
    V_MUL_LEGACY_F32_e32	= 1002,
    V_MUL_LEGACY_F32_e64	= 1003,
    V_MUL_LO_I32	= 1004,
    V_MUL_LO_U32	= 1005,
    V_MUL_U32_U24_e32	= 1006,
    V_MUL_U32_U24_e64	= 1007,
    V_NOT_B32_e32	= 1008,
    V_NOT_B32_e64	= 1009,
    V_OR_B32_e32	= 1010,
    V_OR_B32_e64	= 1011,
    V_RCP_CLAMP_F32_e32	= 1012,
    V_RCP_CLAMP_F32_e64	= 1013,
    V_RCP_CLAMP_F64_e32	= 1014,
    V_RCP_CLAMP_F64_e64	= 1015,
    V_RCP_F32_e32	= 1016,
    V_RCP_F32_e64	= 1017,
    V_RCP_F64_e32	= 1018,
    V_RCP_F64_e64	= 1019,
    V_RCP_IFLAG_F32_e32	= 1020,
    V_RCP_IFLAG_F32_e64	= 1021,
    V_RCP_LEGACY_F32_e32	= 1022,
    V_RCP_LEGACY_F32_e64	= 1023,
    V_READFIRSTLANE_B32_e32	= 1024,
    V_READFIRSTLANE_B32_e64	= 1025,
    V_READLANE_B32_e32	= 1026,
    V_READLANE_B32_e64	= 1027,
    V_RNDNE_F32_e32	= 1028,
    V_RNDNE_F32_e64	= 1029,
    V_RSQ_CLAMP_F32_e32	= 1030,
    V_RSQ_CLAMP_F32_e64	= 1031,
    V_RSQ_CLAMP_F64_e32	= 1032,
    V_RSQ_CLAMP_F64_e64	= 1033,
    V_RSQ_F32_e32	= 1034,
    V_RSQ_F32_e64	= 1035,
    V_RSQ_F64_e32	= 1036,
    V_RSQ_F64_e64	= 1037,
    V_RSQ_LEGACY_F32_e32	= 1038,
    V_RSQ_LEGACY_F32_e64	= 1039,
    V_SAD_U32	= 1040,
    V_SIN_F32_e32	= 1041,
    V_SIN_F32_e64	= 1042,
    V_SQRT_F32_e32	= 1043,
    V_SQRT_F32_e64	= 1044,
    V_SQRT_F64_e32	= 1045,
    V_SQRT_F64_e64	= 1046,
    V_SUBBREV_U32_e32	= 1047,
    V_SUBBREV_U32_e64	= 1048,
    V_SUBB_U32_e32	= 1049,
    V_SUBB_U32_e64	= 1050,
    V_SUBREV_F32_e32	= 1051,
    V_SUBREV_F32_e64	= 1052,
    V_SUBREV_I32_e32	= 1053,
    V_SUBREV_I32_e64	= 1054,
    V_SUB_F32_e32	= 1055,
    V_SUB_F32_e64	= 1056,
    V_SUB_F64	= 1057,
    V_SUB_I32_e32	= 1058,
    V_SUB_I32_e64	= 1059,
    V_TRIG_PREOP_F64	= 1060,
    V_TRUNC_F32_e32	= 1061,
    V_TRUNC_F32_e64	= 1062,
    V_WRITELANE_B32_e32	= 1063,
    V_WRITELANE_B32_e64	= 1064,
    V_XOR_B32_e32	= 1065,
    V_XOR_B32_e64	= 1066,
    WHILELOOP	= 1067,
    WHILE_LOOP_EG	= 1068,
    WHILE_LOOP_R600	= 1069,
    XOR_INT	= 1070,
    INSTRUCTION_LIST_END = 1071
  };
}
} // End llvm namespace 
#endif // GET_INSTRINFO_ENUM

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Instruction Descriptors                                              *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_INSTRINFO_MC_DESC
#undef GET_INSTRINFO_MC_DESC
namespace llvm {

static const uint16_t ImplicitList1[] = { AMDGPU::EXEC, 0 };
static const uint16_t ImplicitList2[] = { AMDGPU::OQAP, 0 };
static const uint16_t ImplicitList3[] = { AMDGPU::EXEC, AMDGPU::VCC, AMDGPU::M0, 0 };
static const uint16_t ImplicitList4[] = { AMDGPU::VCC, 0 };

static const MCOperandInfo OperandInfo2[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo3[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo4[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo5[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo6[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo7[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo8[] = { { AMDGPU::R600_Reg32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { AMDGPU::R600_Reg32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { AMDGPU::R600_Reg32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { AMDGPU::R600_PredicateRegClassID, 0|(1<<MCOI::Predicate), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo9[] = { { AMDGPU::R600_Reg32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { AMDGPU::R600_Reg32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { AMDGPU::R600_Reg32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { AMDGPU::R600_Reg32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { AMDGPU::R600_PredicateRegClassID, 0|(1<<MCOI::Predicate), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo10[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { AMDGPU::GPRF32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo11[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { AMDGPU::GPRI32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo12[] = { { AMDGPU::GPRF32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::GPRF32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo13[] = { { AMDGPU::GPRI32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::GPRI32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo14[] = { { AMDGPU::GPRF32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo15[] = { { AMDGPU::GPRI32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo16[] = { { AMDGPU::VReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo17[] = { { AMDGPU::VReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo18[] = { { AMDGPU::VReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo19[] = { { AMDGPU::VReg_128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo20[] = { { AMDGPU::VReg_128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo21[] = { { AMDGPU::VReg_128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo22[] = { { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo23[] = { { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo24[] = { { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo25[] = { { AMDGPU::R600_Reg32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { AMDGPU::R600_Reg32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { AMDGPU::R600_PredicateRegClassID, 0|(1<<MCOI::Predicate), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo26[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo27[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo28[] = { { AMDGPU::R600_Reg32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::R600_Reg32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo29[] = { { AMDGPU::R600_Reg32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo30[] = { { AMDGPU::R600_Reg128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::R600_Reg128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo31[] = { { AMDGPU::R600_Reg32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { AMDGPU::R600_TReg32_XRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { AMDGPU::R600_TReg32_XRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { AMDGPU::R600_PredicateRegClassID, 0|(1<<MCOI::Predicate), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { AMDGPU::R600_TReg32_YRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { AMDGPU::R600_TReg32_YRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { AMDGPU::R600_PredicateRegClassID, 0|(1<<MCOI::Predicate), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { AMDGPU::R600_TReg32_ZRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { AMDGPU::R600_TReg32_ZRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { AMDGPU::R600_PredicateRegClassID, 0|(1<<MCOI::Predicate), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { AMDGPU::R600_TReg32_WRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { AMDGPU::R600_TReg32_WRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { AMDGPU::R600_PredicateRegClassID, 0|(1<<MCOI::Predicate), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo32[] = { { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo33[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo34[] = { { AMDGPU::R600_Reg128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo35[] = { { AMDGPU::R600_Reg128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo36[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo37[] = { { AMDGPU::VReg_128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { AMDGPU::SReg_256RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo38[] = { { AMDGPU::VReg_128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { AMDGPU::SReg_256RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo39[] = { { AMDGPU::R600_TReg32_XRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::R600_TReg32_YRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { AMDGPU::R600_TReg32_YRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::R600_TReg32_XRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo40[] = { { AMDGPU::R600_TReg32_ZRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::R600_TReg32_WRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { AMDGPU::R600_TReg32_YRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::R600_TReg32_XRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo41[] = { { AMDGPU::R600_Reg128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo42[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { AMDGPU::R600_Predicate_BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo43[] = { { AMDGPU::R600_Reg32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::R600_Reg32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { AMDGPU::R600_PredicateRegClassID, 0|(1<<MCOI::Predicate), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo44[] = { { AMDGPU::R600_Reg32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { AMDGPU::R600_Reg32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { AMDGPU::R600_PredicateRegClassID, 0|(1<<MCOI::Predicate), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo45[] = { { AMDGPU::GPRF32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo46[] = { { AMDGPU::R600_Reg32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo47[] = { { AMDGPU::R600_Predicate_BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::R600_Reg32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo48[] = { { AMDGPU::R600_Reg32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::R600_Reg32RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo49[] = { { AMDGPU::R600_TReg32_XRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::R600_TReg32_XRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo50[] = { { AMDGPU::R600_Reg64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::R600_TReg32_XRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo51[] = { { AMDGPU::R600_Reg128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::R600_TReg32_XRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo52[] = { { AMDGPU::R600_TReg32_XRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::R600_TReg32_XRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo53[] = { { AMDGPU::R600_Reg64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::R600_TReg32_XRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo54[] = { { AMDGPU::SReg_128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo55[] = { { AMDGPU::SReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo56[] = { { AMDGPU::SReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo57[] = { { AMDGPU::SReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo58[] = { { AMDGPU::SReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo59[] = { { AMDGPU::SReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo60[] = { { AMDGPU::VReg_512RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { AMDGPU::VSrc_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo61[] = { { AMDGPU::VReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { AMDGPU::VSrc_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo62[] = { { AMDGPU::VReg_128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { AMDGPU::VSrc_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo63[] = { { AMDGPU::VReg_256RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { AMDGPU::VSrc_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo64[] = { { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { AMDGPU::VSrc_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo65[] = { { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo66[] = { { AMDGPU::SReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo67[] = { { AMDGPU::SReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SSrc_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SSrc_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo68[] = { { AMDGPU::SReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SSrc_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo69[] = { { AMDGPU::SReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo70[] = { { AMDGPU::SReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SSrc_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SSrc_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo71[] = { { AMDGPU::SReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SSrc_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo72[] = { { AMDGPU::SReg_512RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo73[] = { { AMDGPU::SReg_512RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo74[] = { { AMDGPU::SReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo75[] = { { AMDGPU::SReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo76[] = { { AMDGPU::SReg_128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo77[] = { { AMDGPU::SReg_128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo78[] = { { AMDGPU::SReg_256RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo79[] = { { AMDGPU::SReg_256RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo80[] = { { AMDGPU::SReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo81[] = { { AMDGPU::SReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo82[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { AMDGPU::EXECRegRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo83[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { AMDGPU::SCCRegRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo84[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { AMDGPU::VCCRegRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo85[] = { { AMDGPU::SCCRegRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SSrc_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SSrc_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo86[] = { { AMDGPU::SReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SCCRegRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo87[] = { { AMDGPU::SReg_512RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo88[] = { { AMDGPU::SReg_512RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo89[] = { { AMDGPU::SReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo90[] = { { AMDGPU::SReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo91[] = { { AMDGPU::SReg_128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo92[] = { { AMDGPU::SReg_128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo93[] = { { AMDGPU::SReg_256RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo94[] = { { AMDGPU::SReg_256RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo95[] = { { AMDGPU::SReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo96[] = { { AMDGPU::SReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo97[] = { { AMDGPU::VReg_128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SReg_128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { AMDGPU::SSrc_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo98[] = { { AMDGPU::R600_Reg128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::R600_Reg128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo99[] = { { AMDGPU::R600_Reg128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::R600_TReg32_XRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo100[] = { { AMDGPU::R600_Reg128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::R600_Reg128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::R600_Reg128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::R600_Reg128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo101[] = { { AMDGPU::R600_Reg128RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::R600_TReg32_XRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo102[] = { { AMDGPU::R600_TReg32_XRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::R600_TReg32_XRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo103[] = { { AMDGPU::R600_TReg32_XRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::R600_TReg32_XRegClassID, 0, MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo104[] = { { AMDGPU::R600_Reg64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::R600_TReg32_XRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo105[] = { { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VSrc_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo106[] = { { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VSrc_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VSrc_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo107[] = { { AMDGPU::VReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VSrc_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VSrc_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VSrc_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo108[] = { { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VSrc_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VSrc_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VSrc_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo109[] = { { AMDGPU::VReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VSrc_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VSrc_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo110[] = { { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VSrc_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo111[] = { { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VSrc_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo112[] = { { AMDGPU::VCCRegRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VSrc_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo113[] = { { AMDGPU::SReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VSrc_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VSrc_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo114[] = { { AMDGPU::VCCRegRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VSrc_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo115[] = { { AMDGPU::SReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VSrc_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VSrc_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo116[] = { { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VSrc_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VCCRegRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo117[] = { { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VSrc_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VSrc_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::SSrc_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo118[] = { { AMDGPU::VReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VSrc_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo119[] = { { AMDGPU::VReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VSrc_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo120[] = { { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { AMDGPU::M0RegRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo121[] = { { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { AMDGPU::M0RegRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo122[] = { { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { AMDGPU::VReg_32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { AMDGPU::M0RegRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo123[] = { { AMDGPU::VReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { AMDGPU::VReg_64RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };

extern const MCInstrDesc AMDGPUInsts[] = {
  { 0,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, 0 },  // Inst #0 = PHI
  { 1,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic), 0x0ULL, NULL, NULL, 0 },  // Inst #1 = INLINEASM
  { 2,	1,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::NotDuplicable)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #2 = PROLOG_LABEL
  { 3,	1,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::NotDuplicable)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #3 = EH_LABEL
  { 4,	1,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::NotDuplicable)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #4 = GC_LABEL
  { 5,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic), 0x0ULL, NULL, NULL, 0 },  // Inst #5 = KILL
  { 6,	3,	1,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo3 },  // Inst #6 = EXTRACT_SUBREG
  { 7,	4,	1,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo4 },  // Inst #7 = INSERT_SUBREG
  { 8,	1,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Rematerializable)|(1<<MCID::CheapAsAMove), 0x0ULL, NULL, NULL, OperandInfo5 },  // Inst #8 = IMPLICIT_DEF
  { 9,	4,	1,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo6 },  // Inst #9 = SUBREG_TO_REG
  { 10,	3,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::CheapAsAMove), 0x0ULL, NULL, NULL, OperandInfo3 },  // Inst #10 = COPY_TO_REGCLASS
  { 11,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic), 0x0ULL, NULL, NULL, 0 },  // Inst #11 = DBG_VALUE
  { 12,	1,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic)|(1<<MCID::CheapAsAMove), 0x0ULL, NULL, NULL, OperandInfo5 },  // Inst #12 = REG_SEQUENCE
  { 13,	2,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::CheapAsAMove), 0x0ULL, NULL, NULL, OperandInfo7 },  // Inst #13 = COPY
  { 14,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, 0 },  // Inst #14 = BUNDLE
  { 15,	1,	0,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #15 = LIFETIME_START
  { 16,	1,	0,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #16 = LIFETIME_END
  { 17,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #17 = ADD
  { 18,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #18 = ADD_INT
  { 19,	1,	0,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #19 = ALU_CLAUSE
  { 20,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #20 = AND_INT
  { 21,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #21 = ASHR_eg
  { 22,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #22 = ASHR_r600
  { 23,	19,	1,	3,	0,	0|(1<<MCID::Predicable), 0x4220ULL, NULL, NULL, OperandInfo9 },  // Inst #23 = BFE_UINT_eg
  { 24,	19,	1,	3,	0,	0|(1<<MCID::Predicable), 0x4220ULL, NULL, NULL, OperandInfo9 },  // Inst #24 = BFI_INT_eg
  { 25,	19,	1,	3,	0,	0|(1<<MCID::Predicable), 0x4220ULL, NULL, NULL, OperandInfo9 },  // Inst #25 = BIT_ALIGN_INT_eg
  { 26,	1,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, NULL, OperandInfo5 },  // Inst #26 = BRANCH
  { 27,	2,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, NULL, OperandInfo10 },  // Inst #27 = BRANCH_COND_f32
  { 28,	2,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, NULL, OperandInfo11 },  // Inst #28 = BRANCH_COND_i32
  { 29,	0,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, 0 },  // Inst #29 = BREAK
  { 30,	2,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo12 },  // Inst #30 = BREAKC_f32
  { 31,	2,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #31 = BREAKC_i32
  { 32,	1,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo14 },  // Inst #32 = BREAK_LOGICALNZ_f32
  { 33,	1,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo15 },  // Inst #33 = BREAK_LOGICALNZ_i32
  { 34,	1,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo14 },  // Inst #34 = BREAK_LOGICALZ_f32
  { 35,	1,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo15 },  // Inst #35 = BREAK_LOGICALZ_i32
  { 36,	4,	1,	2,	8,	0|(1<<MCID::MayLoad), 0x3ULL, ImplicitList1, NULL, OperandInfo16 },  // Inst #36 = BUFFER_LOAD_DWORDX2_ADDR64
  { 37,	4,	1,	2,	8,	0|(1<<MCID::MayLoad), 0x3ULL, ImplicitList1, NULL, OperandInfo17 },  // Inst #37 = BUFFER_LOAD_DWORDX2_IDXEN
  { 38,	3,	1,	2,	8,	0|(1<<MCID::MayLoad), 0x3ULL, ImplicitList1, NULL, OperandInfo18 },  // Inst #38 = BUFFER_LOAD_DWORDX2_OFFEN
  { 39,	4,	1,	2,	8,	0|(1<<MCID::MayLoad), 0x3ULL, ImplicitList1, NULL, OperandInfo19 },  // Inst #39 = BUFFER_LOAD_DWORDX4_ADDR64
  { 40,	4,	1,	2,	8,	0|(1<<MCID::MayLoad), 0x3ULL, ImplicitList1, NULL, OperandInfo20 },  // Inst #40 = BUFFER_LOAD_DWORDX4_IDXEN
  { 41,	3,	1,	2,	8,	0|(1<<MCID::MayLoad), 0x3ULL, ImplicitList1, NULL, OperandInfo21 },  // Inst #41 = BUFFER_LOAD_DWORDX4_OFFEN
  { 42,	4,	1,	2,	8,	0|(1<<MCID::MayLoad), 0x3ULL, ImplicitList1, NULL, OperandInfo22 },  // Inst #42 = BUFFER_LOAD_DWORD_ADDR64
  { 43,	4,	1,	2,	8,	0|(1<<MCID::MayLoad), 0x3ULL, ImplicitList1, NULL, OperandInfo23 },  // Inst #43 = BUFFER_LOAD_DWORD_IDXEN
  { 44,	3,	1,	2,	8,	0|(1<<MCID::MayLoad), 0x3ULL, ImplicitList1, NULL, OperandInfo24 },  // Inst #44 = BUFFER_LOAD_DWORD_OFFEN
  { 45,	4,	1,	2,	8,	0|(1<<MCID::MayLoad), 0x3ULL, ImplicitList1, NULL, OperandInfo19 },  // Inst #45 = BUFFER_LOAD_FORMAT_XYZW_ADDR64
  { 46,	4,	1,	2,	8,	0|(1<<MCID::MayLoad), 0x3ULL, ImplicitList1, NULL, OperandInfo20 },  // Inst #46 = BUFFER_LOAD_FORMAT_XYZW_IDXEN
  { 47,	3,	1,	2,	8,	0|(1<<MCID::MayLoad), 0x3ULL, ImplicitList1, NULL, OperandInfo21 },  // Inst #47 = BUFFER_LOAD_FORMAT_XYZW_OFFEN
  { 48,	4,	1,	2,	8,	0|(1<<MCID::MayLoad), 0x3ULL, ImplicitList1, NULL, OperandInfo22 },  // Inst #48 = BUFFER_LOAD_SBYTE_ADDR64
  { 49,	4,	1,	2,	8,	0|(1<<MCID::MayLoad), 0x3ULL, ImplicitList1, NULL, OperandInfo23 },  // Inst #49 = BUFFER_LOAD_SBYTE_IDXEN
  { 50,	3,	1,	2,	8,	0|(1<<MCID::MayLoad), 0x3ULL, ImplicitList1, NULL, OperandInfo24 },  // Inst #50 = BUFFER_LOAD_SBYTE_OFFEN
  { 51,	4,	1,	2,	8,	0|(1<<MCID::MayLoad), 0x3ULL, ImplicitList1, NULL, OperandInfo22 },  // Inst #51 = BUFFER_LOAD_SSHORT_ADDR64
  { 52,	4,	1,	2,	8,	0|(1<<MCID::MayLoad), 0x3ULL, ImplicitList1, NULL, OperandInfo23 },  // Inst #52 = BUFFER_LOAD_SSHORT_IDXEN
  { 53,	3,	1,	2,	8,	0|(1<<MCID::MayLoad), 0x3ULL, ImplicitList1, NULL, OperandInfo24 },  // Inst #53 = BUFFER_LOAD_SSHORT_OFFEN
  { 54,	4,	1,	2,	8,	0|(1<<MCID::MayLoad), 0x3ULL, ImplicitList1, NULL, OperandInfo22 },  // Inst #54 = BUFFER_LOAD_UBYTE_ADDR64
  { 55,	4,	1,	2,	8,	0|(1<<MCID::MayLoad), 0x3ULL, ImplicitList1, NULL, OperandInfo23 },  // Inst #55 = BUFFER_LOAD_UBYTE_IDXEN
  { 56,	3,	1,	2,	8,	0|(1<<MCID::MayLoad), 0x3ULL, ImplicitList1, NULL, OperandInfo24 },  // Inst #56 = BUFFER_LOAD_UBYTE_OFFEN
  { 57,	4,	1,	2,	8,	0|(1<<MCID::MayLoad), 0x3ULL, ImplicitList1, NULL, OperandInfo22 },  // Inst #57 = BUFFER_LOAD_USHORT_ADDR64
  { 58,	4,	1,	2,	8,	0|(1<<MCID::MayLoad), 0x3ULL, ImplicitList1, NULL, OperandInfo23 },  // Inst #58 = BUFFER_LOAD_USHORT_IDXEN
  { 59,	3,	1,	2,	8,	0|(1<<MCID::MayLoad), 0x3ULL, ImplicitList1, NULL, OperandInfo24 },  // Inst #59 = BUFFER_LOAD_USHORT_OFFEN
  { 60,	4,	0,	2,	8,	0|(1<<MCID::MayStore), 0x3ULL, ImplicitList1, NULL, OperandInfo22 },  // Inst #60 = BUFFER_STORE_DWORD
  { 61,	4,	0,	2,	8,	0|(1<<MCID::MayStore), 0x3ULL, ImplicitList1, NULL, OperandInfo16 },  // Inst #61 = BUFFER_STORE_DWORDX2
  { 62,	4,	0,	2,	8,	0|(1<<MCID::MayStore), 0x3ULL, ImplicitList1, NULL, OperandInfo19 },  // Inst #62 = BUFFER_STORE_DWORDX4
  { 63,	1,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo15 },  // Inst #63 = CASE
  { 64,	14,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4600ULL, NULL, NULL, OperandInfo25 },  // Inst #64 = CEIL
  { 65,	9,	0,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo26 },  // Inst #65 = CF_ALU
  { 66,	9,	0,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo26 },  // Inst #66 = CF_ALU_POP_AFTER
  { 67,	9,	0,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo26 },  // Inst #67 = CF_ALU_PUSH_BEFORE
  { 68,	0,	0,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, 0 },  // Inst #68 = CF_CALL_FS_EG
  { 69,	0,	0,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, 0 },  // Inst #69 = CF_CALL_FS_R600
  { 70,	1,	0,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #70 = CF_CONTINUE_EG
  { 71,	1,	0,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #71 = CF_CONTINUE_R600
  { 72,	2,	0,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo27 },  // Inst #72 = CF_ELSE_EG
  { 73,	2,	0,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo27 },  // Inst #73 = CF_ELSE_R600
  { 74,	0,	0,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, 0 },  // Inst #74 = CF_END_CM
  { 75,	0,	0,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, 0 },  // Inst #75 = CF_END_EG
  { 76,	0,	0,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, 0 },  // Inst #76 = CF_END_R600
  { 77,	2,	0,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo27 },  // Inst #77 = CF_JUMP_EG
  { 78,	2,	0,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo27 },  // Inst #78 = CF_JUMP_R600
  { 79,	2,	0,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo27 },  // Inst #79 = CF_TC_EG
  { 80,	2,	0,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo27 },  // Inst #80 = CF_TC_R600
  { 81,	2,	0,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo27 },  // Inst #81 = CF_VC_EG
  { 82,	2,	0,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo27 },  // Inst #82 = CF_VC_R600
  { 83,	2,	1,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, NULL, OperandInfo28 },  // Inst #83 = CLAMP_R600
  { 84,	19,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4220ULL, NULL, NULL, OperandInfo9 },  // Inst #84 = CNDE_INT
  { 85,	19,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4220ULL, NULL, NULL, OperandInfo9 },  // Inst #85 = CNDE_eg
  { 86,	19,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4220ULL, NULL, NULL, OperandInfo9 },  // Inst #86 = CNDE_r600
  { 87,	19,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4220ULL, NULL, NULL, OperandInfo9 },  // Inst #87 = CNDGE_INT
  { 88,	19,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4220ULL, NULL, NULL, OperandInfo9 },  // Inst #88 = CNDGE_eg
  { 89,	19,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4220ULL, NULL, NULL, OperandInfo9 },  // Inst #89 = CNDGE_r600
  { 90,	19,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4220ULL, NULL, NULL, OperandInfo9 },  // Inst #90 = CNDGT_INT
  { 91,	19,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4220ULL, NULL, NULL, OperandInfo9 },  // Inst #91 = CNDGT_eg
  { 92,	19,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4220ULL, NULL, NULL, OperandInfo9 },  // Inst #92 = CNDGT_r600
  { 93,	2,	1,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UsesCustomInserter)|(1<<MCID::CheapAsAMove), 0x0ULL, NULL, NULL, OperandInfo29 },  // Inst #93 = CONST_COPY
  { 94,	0,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, 0 },  // Inst #94 = CONTINUE
  { 95,	2,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo12 },  // Inst #95 = CONTINUEC_f32
  { 96,	2,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #96 = CONTINUEC_i32
  { 97,	1,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo14 },  // Inst #97 = CONTINUE_LOGICALNZ_f32
  { 98,	1,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo15 },  // Inst #98 = CONTINUE_LOGICALNZ_i32
  { 99,	1,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo14 },  // Inst #99 = CONTINUE_LOGICALZ_f32
  { 100,	1,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo15 },  // Inst #100 = CONTINUE_LOGICALZ_i32
  { 101,	14,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4651ULL, NULL, NULL, OperandInfo25 },  // Inst #101 = COS_cm
  { 102,	14,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4611ULL, NULL, NULL, OperandInfo25 },  // Inst #102 = COS_eg
  { 103,	14,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4611ULL, NULL, NULL, OperandInfo25 },  // Inst #103 = COS_r600
  { 104,	14,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4611ULL, NULL, NULL, OperandInfo25 },  // Inst #104 = COS_r700
  { 105,	2,	1,	3,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo30 },  // Inst #105 = CUBE_eg_pseudo
  { 106,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #106 = CUBE_eg_real
  { 107,	2,	1,	3,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo30 },  // Inst #107 = CUBE_r600_pseudo
  { 108,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #108 = CUBE_r600_real
  { 109,	0,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, 0 },  // Inst #109 = DEFAULT
  { 110,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #110 = DOT4_eg
  { 111,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #111 = DOT4_r600
  { 112,	71,	1,	1,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Predicable), 0x0ULL, NULL, NULL, OperandInfo31 },  // Inst #112 = DOT_4
  { 113,	7,	1,	2,	8,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x4ULL, ImplicitList1, NULL, OperandInfo32 },  // Inst #113 = DS_READ_B32
  { 114,	6,	0,	2,	8,	0|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x4ULL, ImplicitList1, NULL, OperandInfo33 },  // Inst #114 = DS_WRITE_B32
  { 115,	7,	0,	2,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo34 },  // Inst #115 = EG_ExportBuf
  { 116,	9,	0,	2,	0,	0|(1<<MCID::NotDuplicable)|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo35 },  // Inst #116 = EG_ExportSwz
  { 117,	0,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, 0 },  // Inst #117 = ELSE
  { 118,	0,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, 0 },  // Inst #118 = END
  { 119,	0,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, 0 },  // Inst #119 = ENDFUNC
  { 120,	0,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, 0 },  // Inst #120 = ENDIF
  { 121,	0,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, 0 },  // Inst #121 = ENDLOOP
  { 122,	0,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, 0 },  // Inst #122 = ENDMAIN
  { 123,	0,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, 0 },  // Inst #123 = ENDSWITCH
  { 124,	1,	0,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #124 = END_LOOP_EG
  { 125,	1,	0,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #125 = END_LOOP_R600
  { 126,	9,	0,	2,	8,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, ImplicitList1, NULL, OperandInfo36 },  // Inst #126 = EXP
  { 127,	14,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4641ULL, NULL, NULL, OperandInfo25 },  // Inst #127 = EXP_IEEE_cm
  { 128,	14,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4601ULL, NULL, NULL, OperandInfo25 },  // Inst #128 = EXP_IEEE_eg
  { 129,	14,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4601ULL, NULL, NULL, OperandInfo25 },  // Inst #129 = EXP_IEEE_r600
  { 130,	2,	1,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, NULL, OperandInfo28 },  // Inst #130 = FABS_R600
  { 131,	1,	0,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #131 = FETCH_CLAUSE
  { 132,	14,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4600ULL, NULL, NULL, OperandInfo25 },  // Inst #132 = FLOOR
  { 133,	14,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4600ULL, NULL, NULL, OperandInfo25 },  // Inst #133 = FLT_TO_INT_eg
  { 134,	14,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4601ULL, NULL, NULL, OperandInfo25 },  // Inst #134 = FLT_TO_INT_r600
  { 135,	14,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4601ULL, NULL, NULL, OperandInfo25 },  // Inst #135 = FLT_TO_UINT_eg
  { 136,	14,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4601ULL, NULL, NULL, OperandInfo25 },  // Inst #136 = FLT_TO_UINT_r600
  { 137,	2,	1,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, NULL, OperandInfo28 },  // Inst #137 = FNEG_R600
  { 138,	14,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4600ULL, NULL, NULL, OperandInfo25 },  // Inst #138 = FRACT
  { 139,	0,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, 0 },  // Inst #139 = FUNC
  { 140,	0,	0,	1,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x4000ULL, NULL, NULL, 0 },  // Inst #140 = GROUP_BARRIER
  { 141,	2,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo12 },  // Inst #141 = IFC_f32
  { 142,	2,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #142 = IFC_i32
  { 143,	1,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo14 },  // Inst #143 = IF_LOGICALNZ_f32
  { 144,	1,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo15 },  // Inst #144 = IF_LOGICALNZ_i32
  { 145,	1,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo14 },  // Inst #145 = IF_LOGICALZ_f32
  { 146,	1,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo15 },  // Inst #146 = IF_LOGICALZ_i32
  { 147,	1,	0,	2,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo15 },  // Inst #147 = IF_PREDICATE_SET
  { 148,	11,	1,	2,	8,	0|(1<<MCID::MayLoad)|(1<<MCID::HasPostISelHook)|(1<<MCID::UnmodeledSideEffects), 0x3ULL, ImplicitList1, NULL, OperandInfo37 },  // Inst #148 = IMAGE_GET_RESINFO
  { 149,	11,	1,	2,	8,	0|(1<<MCID::MayLoad)|(1<<MCID::HasPostISelHook), 0x3ULL, ImplicitList1, NULL, OperandInfo37 },  // Inst #149 = IMAGE_LOAD_MIP
  { 150,	12,	1,	2,	8,	0|(1<<MCID::MayLoad)|(1<<MCID::HasPostISelHook), 0x3ULL, ImplicitList1, NULL, OperandInfo38 },  // Inst #150 = IMAGE_SAMPLE
  { 151,	12,	1,	2,	8,	0|(1<<MCID::MayLoad)|(1<<MCID::HasPostISelHook), 0x3ULL, ImplicitList1, NULL, OperandInfo38 },  // Inst #151 = IMAGE_SAMPLE_B
  { 152,	12,	1,	2,	8,	0|(1<<MCID::MayLoad)|(1<<MCID::HasPostISelHook), 0x3ULL, ImplicitList1, NULL, OperandInfo38 },  // Inst #152 = IMAGE_SAMPLE_C
  { 153,	12,	1,	2,	8,	0|(1<<MCID::MayLoad)|(1<<MCID::HasPostISelHook), 0x3ULL, ImplicitList1, NULL, OperandInfo38 },  // Inst #153 = IMAGE_SAMPLE_C_B
  { 154,	12,	1,	2,	8,	0|(1<<MCID::MayLoad)|(1<<MCID::HasPostISelHook), 0x3ULL, ImplicitList1, NULL, OperandInfo38 },  // Inst #154 = IMAGE_SAMPLE_C_D
  { 155,	12,	1,	2,	8,	0|(1<<MCID::MayLoad)|(1<<MCID::HasPostISelHook), 0x3ULL, ImplicitList1, NULL, OperandInfo38 },  // Inst #155 = IMAGE_SAMPLE_C_L
  { 156,	12,	1,	2,	8,	0|(1<<MCID::MayLoad)|(1<<MCID::HasPostISelHook), 0x3ULL, ImplicitList1, NULL, OperandInfo38 },  // Inst #156 = IMAGE_SAMPLE_D
  { 157,	12,	1,	2,	8,	0|(1<<MCID::MayLoad)|(1<<MCID::HasPostISelHook), 0x3ULL, ImplicitList1, NULL, OperandInfo38 },  // Inst #157 = IMAGE_SAMPLE_L
  { 158,	14,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4600ULL, NULL, NULL, OperandInfo25 },  // Inst #158 = INTERP_LOAD_P0
  { 159,	5,	2,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo39 },  // Inst #159 = INTERP_PAIR_XY
  { 160,	5,	2,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo40 },  // Inst #160 = INTERP_PAIR_ZW
  { 161,	2,	1,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo41 },  // Inst #161 = INTERP_VEC_LOAD
  { 162,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #162 = INTERP_XY
  { 163,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #163 = INTERP_ZW
  { 164,	14,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4601ULL, NULL, NULL, OperandInfo25 },  // Inst #164 = INT_TO_FLT_eg
  { 165,	14,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4601ULL, NULL, NULL, OperandInfo25 },  // Inst #165 = INT_TO_FLT_r600
  { 166,	1,	0,	1,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Predicable)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo5 },  // Inst #166 = JUMP
  { 167,	2,	0,	1,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo42 },  // Inst #167 = JUMP_COND
  { 168,	21,	1,	1,	0,	0|(1<<MCID::Predicable)|(1<<MCID::UnmodeledSideEffects), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #168 = KILLGT
  { 169,	7,	1,	5,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::Predicable)|(1<<MCID::UsesCustomInserter), 0xc200ULL, NULL, ImplicitList2, OperandInfo43 },  // Inst #169 = LDS_READ_RET
  { 170,	9,	0,	5,	0,	0|(1<<MCID::MayStore)|(1<<MCID::Predicable), 0x14200ULL, NULL, NULL, OperandInfo44 },  // Inst #170 = LDS_WRITE
  { 171,	2,	0,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo7 },  // Inst #171 = LITERALS
  { 172,	2,	1,	2,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo45 },  // Inst #172 = LOAD_CONST
  { 173,	14,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4600ULL, NULL, NULL, OperandInfo25 },  // Inst #173 = LOG_CLAMPED_eg
  { 174,	14,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4600ULL, NULL, NULL, OperandInfo25 },  // Inst #174 = LOG_CLAMPED_r600
  { 175,	14,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4641ULL, NULL, NULL, OperandInfo25 },  // Inst #175 = LOG_IEEE_cm
  { 176,	14,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4601ULL, NULL, NULL, OperandInfo25 },  // Inst #176 = LOG_IEEE_eg
  { 177,	14,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4601ULL, NULL, NULL, OperandInfo25 },  // Inst #177 = LOG_IEEE_r600
  { 178,	1,	0,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #178 = LOOP_BREAK_EG
  { 179,	1,	0,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #179 = LOOP_BREAK_R600
  { 180,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #180 = LSHL_eg
  { 181,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #181 = LSHL_r600
  { 182,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #182 = LSHR_eg
  { 183,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #183 = LSHR_r600
  { 184,	1,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo46 },  // Inst #184 = MASK_WRITE
  { 185,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #185 = MAX
  { 186,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #186 = MAX_INT
  { 187,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #187 = MAX_UINT
  { 188,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #188 = MIN
  { 189,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #189 = MIN_INT
  { 190,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #190 = MIN_UINT
  { 191,	14,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4600ULL, NULL, NULL, OperandInfo25 },  // Inst #191 = MOV
  { 192,	14,	1,	1,	0,	0|(1<<MCID::Predicable)|(1<<MCID::UnmodeledSideEffects), 0x4600ULL, NULL, NULL, OperandInfo25 },  // Inst #192 = MOVA_INT_eg
  { 193,	2,	1,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, NULL, OperandInfo29 },  // Inst #193 = MOV_IMM_F32
  { 194,	2,	1,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, NULL, OperandInfo29 },  // Inst #194 = MOV_IMM_I32
  { 195,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #195 = MUL
  { 196,	19,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4220ULL, NULL, NULL, OperandInfo9 },  // Inst #196 = MULADD_IEEE_eg
  { 197,	19,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4220ULL, NULL, NULL, OperandInfo9 },  // Inst #197 = MULADD_IEEE_r600
  { 198,	19,	1,	3,	0,	0|(1<<MCID::Predicable), 0x4220ULL, NULL, NULL, OperandInfo9 },  // Inst #198 = MULADD_INT24_cm
  { 199,	19,	1,	3,	0,	0|(1<<MCID::Predicable), 0x4220ULL, NULL, NULL, OperandInfo9 },  // Inst #199 = MULADD_UINT24_eg
  { 200,	19,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4220ULL, NULL, NULL, OperandInfo9 },  // Inst #200 = MULADD_eg
  { 201,	19,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4220ULL, NULL, NULL, OperandInfo9 },  // Inst #201 = MULADD_r600
  { 202,	21,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4a41ULL, NULL, NULL, OperandInfo8 },  // Inst #202 = MULHI_INT_cm
  { 203,	21,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4a01ULL, NULL, NULL, OperandInfo8 },  // Inst #203 = MULHI_INT_eg
  { 204,	21,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4a01ULL, NULL, NULL, OperandInfo8 },  // Inst #204 = MULHI_INT_r600
  { 205,	21,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4a41ULL, NULL, NULL, OperandInfo8 },  // Inst #205 = MULHI_UINT_cm
  { 206,	21,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4a01ULL, NULL, NULL, OperandInfo8 },  // Inst #206 = MULHI_UINT_eg
  { 207,	21,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4a01ULL, NULL, NULL, OperandInfo8 },  // Inst #207 = MULHI_UINT_r600
  { 208,	21,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4a41ULL, NULL, NULL, OperandInfo8 },  // Inst #208 = MULLO_INT_cm
  { 209,	21,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4a01ULL, NULL, NULL, OperandInfo8 },  // Inst #209 = MULLO_INT_eg
  { 210,	21,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4a01ULL, NULL, NULL, OperandInfo8 },  // Inst #210 = MULLO_INT_r600
  { 211,	21,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4a41ULL, NULL, NULL, OperandInfo8 },  // Inst #211 = MULLO_UINT_cm
  { 212,	21,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4a01ULL, NULL, NULL, OperandInfo8 },  // Inst #212 = MULLO_UINT_eg
  { 213,	21,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4a01ULL, NULL, NULL, OperandInfo8 },  // Inst #213 = MULLO_UINT_r600
  { 214,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #214 = MUL_IEEE
  { 215,	21,	1,	3,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #215 = MUL_INT24_cm
  { 216,	19,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4220ULL, NULL, NULL, OperandInfo9 },  // Inst #216 = MUL_LIT_eg
  { 217,	19,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4220ULL, NULL, NULL, OperandInfo9 },  // Inst #217 = MUL_LIT_r600
  { 218,	21,	1,	3,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #218 = MUL_UINT24_eg
  { 219,	14,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4600ULL, NULL, NULL, OperandInfo25 },  // Inst #219 = NOT_INT
  { 220,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #220 = OR_INT
  { 221,	0,	0,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, 0 },  // Inst #221 = PAD
  { 222,	2,	0,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo27 },  // Inst #222 = POP_EG
  { 223,	2,	0,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo27 },  // Inst #223 = POP_R600
  { 224,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #224 = PRED_SETE
  { 225,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #225 = PRED_SETE_INT
  { 226,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #226 = PRED_SETGE
  { 227,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #227 = PRED_SETGE_INT
  { 228,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #228 = PRED_SETGT
  { 229,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #229 = PRED_SETGT_INT
  { 230,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #230 = PRED_SETNE
  { 231,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #231 = PRED_SETNE_INT
  { 232,	4,	1,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x180ULL, NULL, NULL, OperandInfo47 },  // Inst #232 = PRED_X
  { 233,	7,	0,	2,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo34 },  // Inst #233 = R600_ExportBuf
  { 234,	9,	0,	2,	0,	0|(1<<MCID::NotDuplicable)|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo35 },  // Inst #234 = R600_ExportSwz
  { 235,	4,	1,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::MayLoad), 0x8000000000000000ULL, NULL, NULL, OperandInfo48 },  // Inst #235 = R600_RegisterLoad
  { 236,	4,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::MayStore), 0x4000000000000000ULL, NULL, NULL, OperandInfo48 },  // Inst #236 = R600_RegisterStore
  { 237,	2,	0,	2,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, NULL, OperandInfo49 },  // Inst #237 = RAT_STORE_DWORD32_cm
  { 238,	2,	0,	2,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, NULL, OperandInfo50 },  // Inst #238 = RAT_STORE_DWORD64_cm
  { 239,	3,	0,	2,	0,	0|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, NULL, OperandInfo51 },  // Inst #239 = RAT_WRITE_CACHELESS_128_eg
  { 240,	3,	0,	2,	0,	0|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, NULL, OperandInfo52 },  // Inst #240 = RAT_WRITE_CACHELESS_32_eg
  { 241,	3,	0,	2,	0,	0|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, NULL, OperandInfo53 },  // Inst #241 = RAT_WRITE_CACHELESS_64_eg
  { 242,	14,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4641ULL, NULL, NULL, OperandInfo25 },  // Inst #242 = RECIPSQRT_CLAMPED_cm
  { 243,	14,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4601ULL, NULL, NULL, OperandInfo25 },  // Inst #243 = RECIPSQRT_CLAMPED_eg
  { 244,	14,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4601ULL, NULL, NULL, OperandInfo25 },  // Inst #244 = RECIPSQRT_CLAMPED_r600
  { 245,	14,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4641ULL, NULL, NULL, OperandInfo25 },  // Inst #245 = RECIPSQRT_IEEE_cm
  { 246,	14,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4601ULL, NULL, NULL, OperandInfo25 },  // Inst #246 = RECIPSQRT_IEEE_eg
  { 247,	14,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4601ULL, NULL, NULL, OperandInfo25 },  // Inst #247 = RECIPSQRT_IEEE_r600
  { 248,	14,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4641ULL, NULL, NULL, OperandInfo25 },  // Inst #248 = RECIP_CLAMPED_cm
  { 249,	14,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4601ULL, NULL, NULL, OperandInfo25 },  // Inst #249 = RECIP_CLAMPED_eg
  { 250,	14,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4601ULL, NULL, NULL, OperandInfo25 },  // Inst #250 = RECIP_CLAMPED_r600
  { 251,	14,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4641ULL, NULL, NULL, OperandInfo25 },  // Inst #251 = RECIP_IEEE_cm
  { 252,	14,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4601ULL, NULL, NULL, OperandInfo25 },  // Inst #252 = RECIP_IEEE_eg
  { 253,	14,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4601ULL, NULL, NULL, OperandInfo25 },  // Inst #253 = RECIP_IEEE_r600
  { 254,	14,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4601ULL, NULL, NULL, OperandInfo25 },  // Inst #254 = RECIP_UINT_eg
  { 255,	14,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4601ULL, NULL, NULL, OperandInfo25 },  // Inst #255 = RECIP_UINT_r600
  { 256,	0,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, 0 },  // Inst #256 = RETDYN
  { 257,	0,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Return)|(1<<MCID::Terminator)|(1<<MCID::UsesCustomInserter)|(1<<MCID::Variadic), 0x0ULL, NULL, NULL, 0 },  // Inst #257 = RETURN
  { 258,	14,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4600ULL, NULL, NULL, OperandInfo25 },  // Inst #258 = RNDNE
  { 259,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #259 = SETE
  { 260,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #260 = SETE_DX10
  { 261,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #261 = SETE_INT
  { 262,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #262 = SETGE_DX10
  { 263,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #263 = SETGE_INT
  { 264,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #264 = SETGE_UINT
  { 265,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #265 = SETGT_DX10
  { 266,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #266 = SETGT_INT
  { 267,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #267 = SETGT_UINT
  { 268,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #268 = SETNE_DX10
  { 269,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #269 = SETNE_INT
  { 270,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #270 = SGE
  { 271,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #271 = SGT
  { 272,	14,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4651ULL, NULL, NULL, OperandInfo25 },  // Inst #272 = SIN_cm
  { 273,	14,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4611ULL, NULL, NULL, OperandInfo25 },  // Inst #273 = SIN_eg
  { 274,	14,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4611ULL, NULL, NULL, OperandInfo25 },  // Inst #274 = SIN_r600
  { 275,	14,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4611ULL, NULL, NULL, OperandInfo25 },  // Inst #275 = SIN_r700
  { 276,	2,	1,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo54 },  // Inst #276 = SI_ADDR64_RSRC
  { 277,	2,	1,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo55 },  // Inst #277 = SI_BREAK
  { 278,	3,	1,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Branch)|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo56 },  // Inst #278 = SI_ELSE
  { 279,	3,	1,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo57 },  // Inst #279 = SI_ELSE_BREAK
  { 280,	1,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo58 },  // Inst #280 = SI_END_CF
  { 281,	3,	1,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Branch)|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo59 },  // Inst #281 = SI_IF
  { 282,	3,	1,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo57 },  // Inst #282 = SI_IF_BREAK
  { 283,	6,	2,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList3, OperandInfo60 },  // Inst #283 = SI_INDIRECT_DST_V16
  { 284,	6,	2,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList3, OperandInfo61 },  // Inst #284 = SI_INDIRECT_DST_V2
  { 285,	6,	2,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList3, OperandInfo62 },  // Inst #285 = SI_INDIRECT_DST_V4
  { 286,	6,	2,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList3, OperandInfo63 },  // Inst #286 = SI_INDIRECT_DST_V8
  { 287,	5,	2,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList3, OperandInfo64 },  // Inst #287 = SI_INDIRECT_SRC
  { 288,	1,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo65 },  // Inst #288 = SI_KILL
  { 289,	2,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Branch)|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo66 },  // Inst #289 = SI_LOOP
  { 290,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #290 = SNE
  { 291,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #291 = SUB_INT
  { 292,	1,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo15 },  // Inst #292 = SWITCH
  { 293,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo67 },  // Inst #293 = S_ABSDIFF_I32
  { 294,	2,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo68 },  // Inst #294 = S_ABS_I32
  { 295,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo67 },  // Inst #295 = S_ADDC_U32
  { 296,	2,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo69 },  // Inst #296 = S_ADDK_I32
  { 297,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo67 },  // Inst #297 = S_ADD_I32
  { 298,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo67 },  // Inst #298 = S_ADD_U32
  { 299,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo67 },  // Inst #299 = S_ANDN2_B32
  { 300,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo70 },  // Inst #300 = S_ANDN2_B64
  { 301,	2,	1,	2,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo71 },  // Inst #301 = S_ANDN2_SAVEEXEC_B64
  { 302,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo67 },  // Inst #302 = S_AND_B32
  { 303,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo70 },  // Inst #303 = S_AND_B64
  { 304,	2,	1,	2,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo71 },  // Inst #304 = S_AND_SAVEEXEC_B64
  { 305,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo67 },  // Inst #305 = S_ASHR_I32
  { 306,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo70 },  // Inst #306 = S_ASHR_I64
  { 307,	0,	0,	2,	4,	0|(1<<MCID::Barrier)|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, 0 },  // Inst #307 = S_BARRIER
  { 308,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo67 },  // Inst #308 = S_BFE_I32
  { 309,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo70 },  // Inst #309 = S_BFE_I64
  { 310,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo67 },  // Inst #310 = S_BFE_U32
  { 311,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo70 },  // Inst #311 = S_BFE_U64
  { 312,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo67 },  // Inst #312 = S_BFM_B32
  { 313,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo70 },  // Inst #313 = S_BFM_B64
  { 314,	1,	0,	2,	4,	0|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo5 },  // Inst #314 = S_BRANCH
  { 315,	2,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo68 },  // Inst #315 = S_BREV_B32
  { 316,	2,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo71 },  // Inst #316 = S_BREV_B64
  { 317,	3,	1,	2,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x4ULL, NULL, NULL, OperandInfo72 },  // Inst #317 = S_BUFFER_LOAD_DWORDX16_IMM
  { 318,	3,	1,	2,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x4ULL, NULL, NULL, OperandInfo73 },  // Inst #318 = S_BUFFER_LOAD_DWORDX16_SGPR
  { 319,	3,	1,	2,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x4ULL, NULL, NULL, OperandInfo74 },  // Inst #319 = S_BUFFER_LOAD_DWORDX2_IMM
  { 320,	3,	1,	2,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x4ULL, NULL, NULL, OperandInfo75 },  // Inst #320 = S_BUFFER_LOAD_DWORDX2_SGPR
  { 321,	3,	1,	2,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x4ULL, NULL, NULL, OperandInfo76 },  // Inst #321 = S_BUFFER_LOAD_DWORDX4_IMM
  { 322,	3,	1,	2,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x4ULL, NULL, NULL, OperandInfo77 },  // Inst #322 = S_BUFFER_LOAD_DWORDX4_SGPR
  { 323,	3,	1,	2,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x4ULL, NULL, NULL, OperandInfo78 },  // Inst #323 = S_BUFFER_LOAD_DWORDX8_IMM
  { 324,	3,	1,	2,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x4ULL, NULL, NULL, OperandInfo79 },  // Inst #324 = S_BUFFER_LOAD_DWORDX8_SGPR
  { 325,	3,	1,	2,	4,	0|(1<<MCID::MayLoad), 0x4ULL, NULL, NULL, OperandInfo80 },  // Inst #325 = S_BUFFER_LOAD_DWORD_IMM
  { 326,	3,	1,	2,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x4ULL, NULL, NULL, OperandInfo81 },  // Inst #326 = S_BUFFER_LOAD_DWORD_SGPR
  { 327,	2,	0,	2,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo82 },  // Inst #327 = S_CBRANCH_EXECNZ
  { 328,	2,	0,	2,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo82 },  // Inst #328 = S_CBRANCH_EXECZ
  { 329,	2,	0,	2,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo83 },  // Inst #329 = S_CBRANCH_SCC0
  { 330,	2,	0,	2,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo83 },  // Inst #330 = S_CBRANCH_SCC1
  { 331,	2,	0,	2,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo84 },  // Inst #331 = S_CBRANCH_VCCNZ
  { 332,	2,	0,	2,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo84 },  // Inst #332 = S_CBRANCH_VCCZ
  { 333,	2,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo69 },  // Inst #333 = S_CMOVK_I32
  { 334,	2,	1,	2,	4,	0|(1<<MCID::MoveImm), 0x0ULL, NULL, NULL, OperandInfo68 },  // Inst #334 = S_CMOV_B32
  { 335,	2,	1,	2,	4,	0|(1<<MCID::MoveImm), 0x0ULL, NULL, NULL, OperandInfo71 },  // Inst #335 = S_CMOV_B64
  { 336,	2,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, NULL, NULL, OperandInfo69 },  // Inst #336 = S_CMPK_EQ_U32
  { 337,	2,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, NULL, NULL, OperandInfo69 },  // Inst #337 = S_CMPK_GE_I32
  { 338,	2,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, NULL, NULL, OperandInfo69 },  // Inst #338 = S_CMPK_GE_U32
  { 339,	2,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, NULL, NULL, OperandInfo69 },  // Inst #339 = S_CMPK_GT_I32
  { 340,	2,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, NULL, NULL, OperandInfo69 },  // Inst #340 = S_CMPK_GT_U32
  { 341,	2,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, NULL, NULL, OperandInfo69 },  // Inst #341 = S_CMPK_LE_I32
  { 342,	2,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, NULL, NULL, OperandInfo69 },  // Inst #342 = S_CMPK_LE_U32
  { 343,	2,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, NULL, NULL, OperandInfo69 },  // Inst #343 = S_CMPK_LG_I32
  { 344,	2,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, NULL, NULL, OperandInfo69 },  // Inst #344 = S_CMPK_LG_U32
  { 345,	2,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, NULL, NULL, OperandInfo69 },  // Inst #345 = S_CMPK_LT_I32
  { 346,	2,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, NULL, NULL, OperandInfo69 },  // Inst #346 = S_CMPK_LT_U32
  { 347,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo85 },  // Inst #347 = S_CMP_EQ_I32
  { 348,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo85 },  // Inst #348 = S_CMP_EQ_U32
  { 349,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo85 },  // Inst #349 = S_CMP_GE_I32
  { 350,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo85 },  // Inst #350 = S_CMP_GE_U32
  { 351,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo85 },  // Inst #351 = S_CMP_GT_I32
  { 352,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo85 },  // Inst #352 = S_CMP_GT_U32
  { 353,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo85 },  // Inst #353 = S_CMP_LE_I32
  { 354,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo85 },  // Inst #354 = S_CMP_LE_U32
  { 355,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo85 },  // Inst #355 = S_CMP_LG_I32
  { 356,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo85 },  // Inst #356 = S_CMP_LG_U32
  { 357,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo85 },  // Inst #357 = S_CMP_LT_I32
  { 358,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo85 },  // Inst #358 = S_CMP_LT_U32
  { 359,	4,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo86 },  // Inst #359 = S_CSELECT_B32
  { 360,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo70 },  // Inst #360 = S_CSELECT_B64
  { 361,	0,	0,	2,	4,	0|(1<<MCID::Barrier)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, 0 },  // Inst #361 = S_ENDPGM
  { 362,	2,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo68 },  // Inst #362 = S_FLBIT_I32
  { 363,	2,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo71 },  // Inst #363 = S_GETPC_B64
  { 364,	2,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo69 },  // Inst #364 = S_GETREG_B32
  { 365,	2,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo69 },  // Inst #365 = S_GETREG_REGRD_B32
  { 366,	3,	1,	2,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x4ULL, NULL, NULL, OperandInfo87 },  // Inst #366 = S_LOAD_DWORDX16_IMM
  { 367,	3,	1,	2,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x4ULL, NULL, NULL, OperandInfo88 },  // Inst #367 = S_LOAD_DWORDX16_SGPR
  { 368,	3,	1,	2,	4,	0|(1<<MCID::MayLoad), 0x4ULL, NULL, NULL, OperandInfo89 },  // Inst #368 = S_LOAD_DWORDX2_IMM
  { 369,	3,	1,	2,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x4ULL, NULL, NULL, OperandInfo90 },  // Inst #369 = S_LOAD_DWORDX2_SGPR
  { 370,	3,	1,	2,	4,	0|(1<<MCID::MayLoad), 0x4ULL, NULL, NULL, OperandInfo91 },  // Inst #370 = S_LOAD_DWORDX4_IMM
  { 371,	3,	1,	2,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x4ULL, NULL, NULL, OperandInfo92 },  // Inst #371 = S_LOAD_DWORDX4_SGPR
  { 372,	3,	1,	2,	4,	0|(1<<MCID::MayLoad), 0x4ULL, NULL, NULL, OperandInfo93 },  // Inst #372 = S_LOAD_DWORDX8_IMM
  { 373,	3,	1,	2,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x4ULL, NULL, NULL, OperandInfo94 },  // Inst #373 = S_LOAD_DWORDX8_SGPR
  { 374,	3,	1,	2,	4,	0|(1<<MCID::MayLoad), 0x4ULL, NULL, NULL, OperandInfo95 },  // Inst #374 = S_LOAD_DWORD_IMM
  { 375,	3,	1,	2,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x4ULL, NULL, NULL, OperandInfo96 },  // Inst #375 = S_LOAD_DWORD_SGPR
  { 376,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo67 },  // Inst #376 = S_LSHL_B32
  { 377,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo70 },  // Inst #377 = S_LSHL_B64
  { 378,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo67 },  // Inst #378 = S_LSHR_B32
  { 379,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo70 },  // Inst #379 = S_LSHR_B64
  { 380,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo67 },  // Inst #380 = S_MAX_I32
  { 381,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo67 },  // Inst #381 = S_MAX_U32
  { 382,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo67 },  // Inst #382 = S_MIN_I32
  { 383,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo67 },  // Inst #383 = S_MIN_U32
  { 384,	2,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo69 },  // Inst #384 = S_MOVK_I32
  { 385,	2,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo68 },  // Inst #385 = S_MOVRELD_B32
  { 386,	2,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo71 },  // Inst #386 = S_MOVRELD_B64
  { 387,	2,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo68 },  // Inst #387 = S_MOVRELS_B32
  { 388,	2,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo71 },  // Inst #388 = S_MOVRELS_B64
  { 389,	2,	1,	2,	4,	0|(1<<MCID::MoveImm), 0x0ULL, NULL, NULL, OperandInfo68 },  // Inst #389 = S_MOV_B32
  { 390,	2,	1,	2,	4,	0|(1<<MCID::MoveImm), 0x0ULL, NULL, NULL, OperandInfo71 },  // Inst #390 = S_MOV_B64
  { 391,	2,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo68 },  // Inst #391 = S_MOV_FED_B32
  { 392,	2,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo68 },  // Inst #392 = S_MOV_REGRD_B32
  { 393,	2,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo69 },  // Inst #393 = S_MULK_I32
  { 394,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo67 },  // Inst #394 = S_MUL_I32
  { 395,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo67 },  // Inst #395 = S_NAND_B32
  { 396,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo70 },  // Inst #396 = S_NAND_B64
  { 397,	2,	1,	2,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo71 },  // Inst #397 = S_NAND_SAVEEXEC_B64
  { 398,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo67 },  // Inst #398 = S_NOR_B32
  { 399,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo70 },  // Inst #399 = S_NOR_B64
  { 400,	2,	1,	2,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo71 },  // Inst #400 = S_NOR_SAVEEXEC_B64
  { 401,	2,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo68 },  // Inst #401 = S_NOT_B32
  { 402,	2,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo71 },  // Inst #402 = S_NOT_B64
  { 403,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo67 },  // Inst #403 = S_ORN2_B32
  { 404,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo70 },  // Inst #404 = S_ORN2_B64
  { 405,	2,	1,	2,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo71 },  // Inst #405 = S_ORN2_SAVEEXEC_B64
  { 406,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo67 },  // Inst #406 = S_OR_B32
  { 407,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo70 },  // Inst #407 = S_OR_B64
  { 408,	2,	1,	2,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo71 },  // Inst #408 = S_OR_SAVEEXEC_B64
  { 409,	2,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo68 },  // Inst #409 = S_QUADMASK_B32
  { 410,	2,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo71 },  // Inst #410 = S_QUADMASK_B64
  { 411,	2,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo71 },  // Inst #411 = S_RFE_B64
  { 412,	2,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo71 },  // Inst #412 = S_SETPC_B64
  { 413,	2,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo69 },  // Inst #413 = S_SETREG_B32
  { 414,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo67 },  // Inst #414 = S_SUBB_U32
  { 415,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo67 },  // Inst #415 = S_SUB_I32
  { 416,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo67 },  // Inst #416 = S_SUB_U32
  { 417,	2,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo71 },  // Inst #417 = S_SWAPPC_B64
  { 418,	1,	0,	2,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #418 = S_WAITCNT
  { 419,	2,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo68 },  // Inst #419 = S_WQM_B32
  { 420,	2,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo71 },  // Inst #420 = S_WQM_B64
  { 421,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo67 },  // Inst #421 = S_XNOR_B32
  { 422,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo70 },  // Inst #422 = S_XNOR_B64
  { 423,	2,	1,	2,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo71 },  // Inst #423 = S_XNOR_SAVEEXEC_B64
  { 424,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo67 },  // Inst #424 = S_XOR_B32
  { 425,	3,	1,	2,	4,	0, 0x0ULL, NULL, NULL, OperandInfo70 },  // Inst #425 = S_XOR_B64
  { 426,	2,	1,	2,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo71 },  // Inst #426 = S_XOR_SAVEEXEC_B64
  { 427,	13,	1,	2,	8,	0|(1<<MCID::MayLoad), 0x3ULL, ImplicitList1, NULL, OperandInfo97 },  // Inst #427 = TBUFFER_LOAD_FORMAT_XYZW
  { 428,	19,	1,	2,	0,	0, 0x2000ULL, NULL, NULL, OperandInfo98 },  // Inst #428 = TEX_GET_GRADIENTS_H
  { 429,	19,	1,	2,	0,	0, 0x2000ULL, NULL, NULL, OperandInfo98 },  // Inst #429 = TEX_GET_GRADIENTS_V
  { 430,	19,	1,	2,	0,	0, 0x2000ULL, NULL, NULL, OperandInfo98 },  // Inst #430 = TEX_GET_TEXTURE_RESINFO
  { 431,	19,	1,	2,	0,	0, 0x2000ULL, NULL, NULL, OperandInfo98 },  // Inst #431 = TEX_LD
  { 432,	19,	1,	2,	0,	0, 0x2000ULL, NULL, NULL, OperandInfo98 },  // Inst #432 = TEX_SAMPLE
  { 433,	19,	1,	2,	0,	0, 0x2000ULL, NULL, NULL, OperandInfo98 },  // Inst #433 = TEX_SAMPLE_C
  { 434,	19,	1,	2,	0,	0, 0x2000ULL, NULL, NULL, OperandInfo98 },  // Inst #434 = TEX_SAMPLE_C_G
  { 435,	19,	1,	2,	0,	0, 0x2000ULL, NULL, NULL, OperandInfo98 },  // Inst #435 = TEX_SAMPLE_C_L
  { 436,	19,	1,	2,	0,	0, 0x2000ULL, NULL, NULL, OperandInfo98 },  // Inst #436 = TEX_SAMPLE_C_LB
  { 437,	19,	1,	2,	0,	0, 0x2000ULL, NULL, NULL, OperandInfo98 },  // Inst #437 = TEX_SAMPLE_G
  { 438,	19,	1,	2,	0,	0, 0x2000ULL, NULL, NULL, OperandInfo98 },  // Inst #438 = TEX_SAMPLE_L
  { 439,	19,	1,	2,	0,	0, 0x2000ULL, NULL, NULL, OperandInfo98 },  // Inst #439 = TEX_SAMPLE_LB
  { 440,	19,	1,	2,	0,	0, 0x2000ULL, NULL, NULL, OperandInfo98 },  // Inst #440 = TEX_SET_GRADIENTS_H
  { 441,	19,	1,	2,	0,	0, 0x2000ULL, NULL, NULL, OperandInfo98 },  // Inst #441 = TEX_SET_GRADIENTS_V
  { 442,	4,	1,	2,	0,	0, 0x1000ULL, NULL, NULL, OperandInfo99 },  // Inst #442 = TEX_VTX_CONSTBUF
  { 443,	4,	1,	2,	0,	0, 0x1000ULL, NULL, NULL, OperandInfo99 },  // Inst #443 = TEX_VTX_TEXBUF
  { 444,	14,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4600ULL, NULL, NULL, OperandInfo25 },  // Inst #444 = TRUNC
  { 445,	7,	1,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UsesCustomInserter), 0x2000ULL, NULL, NULL, OperandInfo100 },  // Inst #445 = TXD
  { 446,	7,	1,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UsesCustomInserter), 0x2000ULL, NULL, NULL, OperandInfo100 },  // Inst #446 = TXD_SHADOW
  { 447,	14,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4601ULL, NULL, NULL, OperandInfo25 },  // Inst #447 = UINT_TO_FLT_eg
  { 448,	14,	1,	4,	0,	0|(1<<MCID::Predicable), 0x4601ULL, NULL, NULL, OperandInfo25 },  // Inst #448 = UINT_TO_FLT_r600
  { 449,	3,	1,	2,	0,	0|(1<<MCID::MayLoad), 0x1000ULL, NULL, NULL, OperandInfo101 },  // Inst #449 = VTX_READ_GLOBAL_128_cm
  { 450,	3,	1,	2,	0,	0|(1<<MCID::MayLoad), 0x1000ULL, NULL, NULL, OperandInfo101 },  // Inst #450 = VTX_READ_GLOBAL_128_eg
  { 451,	3,	1,	2,	0,	0|(1<<MCID::MayLoad), 0x1000ULL, NULL, NULL, OperandInfo102 },  // Inst #451 = VTX_READ_GLOBAL_16_cm
  { 452,	3,	1,	2,	0,	0|(1<<MCID::MayLoad), 0x1000ULL, NULL, NULL, OperandInfo102 },  // Inst #452 = VTX_READ_GLOBAL_16_eg
  { 453,	3,	1,	2,	0,	0|(1<<MCID::MayLoad), 0x1000ULL, NULL, NULL, OperandInfo103 },  // Inst #453 = VTX_READ_GLOBAL_32_cm
  { 454,	3,	1,	2,	0,	0|(1<<MCID::MayLoad), 0x1000ULL, NULL, NULL, OperandInfo103 },  // Inst #454 = VTX_READ_GLOBAL_32_eg
  { 455,	3,	1,	2,	0,	0|(1<<MCID::MayLoad), 0x1000ULL, NULL, NULL, OperandInfo104 },  // Inst #455 = VTX_READ_GLOBAL_64_cm
  { 456,	3,	1,	2,	0,	0|(1<<MCID::MayLoad), 0x1000ULL, NULL, NULL, OperandInfo104 },  // Inst #456 = VTX_READ_GLOBAL_64_eg
  { 457,	3,	1,	2,	0,	0|(1<<MCID::MayLoad), 0x1000ULL, NULL, NULL, OperandInfo102 },  // Inst #457 = VTX_READ_GLOBAL_8_cm
  { 458,	3,	1,	2,	0,	0|(1<<MCID::MayLoad), 0x1000ULL, NULL, NULL, OperandInfo102 },  // Inst #458 = VTX_READ_GLOBAL_8_eg
  { 459,	3,	1,	2,	0,	0|(1<<MCID::MayLoad), 0x1000ULL, NULL, NULL, OperandInfo101 },  // Inst #459 = VTX_READ_PARAM_128_cm
  { 460,	3,	1,	2,	0,	0|(1<<MCID::MayLoad), 0x1000ULL, NULL, NULL, OperandInfo101 },  // Inst #460 = VTX_READ_PARAM_128_eg
  { 461,	3,	1,	2,	0,	0|(1<<MCID::MayLoad), 0x1000ULL, NULL, NULL, OperandInfo102 },  // Inst #461 = VTX_READ_PARAM_16_cm
  { 462,	3,	1,	2,	0,	0|(1<<MCID::MayLoad), 0x1000ULL, NULL, NULL, OperandInfo102 },  // Inst #462 = VTX_READ_PARAM_16_eg
  { 463,	3,	1,	2,	0,	0|(1<<MCID::MayLoad), 0x1000ULL, NULL, NULL, OperandInfo103 },  // Inst #463 = VTX_READ_PARAM_32_cm
  { 464,	3,	1,	2,	0,	0|(1<<MCID::MayLoad), 0x1000ULL, NULL, NULL, OperandInfo103 },  // Inst #464 = VTX_READ_PARAM_32_eg
  { 465,	3,	1,	2,	0,	0|(1<<MCID::MayLoad), 0x1000ULL, NULL, NULL, OperandInfo104 },  // Inst #465 = VTX_READ_PARAM_64_cm
  { 466,	3,	1,	2,	0,	0|(1<<MCID::MayLoad), 0x1000ULL, NULL, NULL, OperandInfo104 },  // Inst #466 = VTX_READ_PARAM_64_eg
  { 467,	3,	1,	2,	0,	0|(1<<MCID::MayLoad), 0x1000ULL, NULL, NULL, OperandInfo102 },  // Inst #467 = VTX_READ_PARAM_8_cm
  { 468,	3,	1,	2,	0,	0|(1<<MCID::MayLoad), 0x1000ULL, NULL, NULL, OperandInfo102 },  // Inst #468 = VTX_READ_PARAM_8_eg
  { 469,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList4, ImplicitList4, OperandInfo105 },  // Inst #469 = V_ADDC_U32_e32
  { 470,	7,	1,	2,	8,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList4, ImplicitList4, OperandInfo106 },  // Inst #470 = V_ADDC_U32_e64
  { 471,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo105 },  // Inst #471 = V_ADD_F32_e32
  { 472,	7,	1,	2,	8,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo106 },  // Inst #472 = V_ADD_F32_e64
  { 473,	8,	1,	2,	8,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo107 },  // Inst #473 = V_ADD_F64
  { 474,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, ImplicitList4, OperandInfo105 },  // Inst #474 = V_ADD_I32_e32
  { 475,	7,	1,	2,	8,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, ImplicitList4, OperandInfo106 },  // Inst #475 = V_ADD_I32_e64
  { 476,	8,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo108 },  // Inst #476 = V_ALIGNBIT_B32
  { 477,	8,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo108 },  // Inst #477 = V_ALIGNBYTE_B32
  { 478,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo105 },  // Inst #478 = V_AND_B32_e32
  { 479,	7,	1,	2,	8,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo106 },  // Inst #479 = V_AND_B32_e64
  { 480,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo105 },  // Inst #480 = V_ASHRREV_I32_e32
  { 481,	7,	1,	2,	8,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo106 },  // Inst #481 = V_ASHRREV_I32_e64
  { 482,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo105 },  // Inst #482 = V_ASHR_I32_e32
  { 483,	7,	1,	2,	8,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo106 },  // Inst #483 = V_ASHR_I32_e64
  { 484,	3,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo109 },  // Inst #484 = V_ASHR_I64
  { 485,	8,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo108 },  // Inst #485 = V_BFE_I32
  { 486,	8,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo108 },  // Inst #486 = V_BFE_U32
  { 487,	8,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo108 },  // Inst #487 = V_BFI_B32
  { 488,	3,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo105 },  // Inst #488 = V_BFM_B32_e32
  { 489,	7,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo106 },  // Inst #489 = V_BFM_B32_e64
  { 490,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo110 },  // Inst #490 = V_BFREV_B32_e32
  { 491,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo111 },  // Inst #491 = V_BFREV_B32_e64
  { 492,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo110 },  // Inst #492 = V_CEIL_F32_e32
  { 493,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo111 },  // Inst #493 = V_CEIL_F32_e64
  { 494,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #494 = V_CMPSX_EQ_F32_e32
  { 495,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #495 = V_CMPSX_EQ_F32_e64
  { 496,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #496 = V_CMPSX_EQ_F64_e32
  { 497,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #497 = V_CMPSX_EQ_F64_e64
  { 498,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #498 = V_CMPSX_F_F32_e32
  { 499,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #499 = V_CMPSX_F_F32_e64
  { 500,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #500 = V_CMPSX_F_F64_e32
  { 501,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #501 = V_CMPSX_F_F64_e64
  { 502,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #502 = V_CMPSX_GE_F32_e32
  { 503,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #503 = V_CMPSX_GE_F32_e64
  { 504,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #504 = V_CMPSX_GE_F64_e32
  { 505,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #505 = V_CMPSX_GE_F64_e64
  { 506,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #506 = V_CMPSX_GT_F32_e32
  { 507,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #507 = V_CMPSX_GT_F32_e64
  { 508,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #508 = V_CMPSX_GT_F64_e32
  { 509,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #509 = V_CMPSX_GT_F64_e64
  { 510,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #510 = V_CMPSX_LE_F32_e32
  { 511,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #511 = V_CMPSX_LE_F32_e64
  { 512,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #512 = V_CMPSX_LE_F64_e32
  { 513,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #513 = V_CMPSX_LE_F64_e64
  { 514,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #514 = V_CMPSX_LG_F32_e32
  { 515,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #515 = V_CMPSX_LG_F32_e64
  { 516,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #516 = V_CMPSX_LG_F64_e32
  { 517,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #517 = V_CMPSX_LG_F64_e64
  { 518,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #518 = V_CMPSX_LT_F32_e32
  { 519,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #519 = V_CMPSX_LT_F32_e64
  { 520,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #520 = V_CMPSX_LT_F64_e32
  { 521,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #521 = V_CMPSX_LT_F64_e64
  { 522,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #522 = V_CMPSX_NEQ_F32_e32
  { 523,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #523 = V_CMPSX_NEQ_F32_e64
  { 524,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #524 = V_CMPSX_NEQ_F64_e32
  { 525,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #525 = V_CMPSX_NEQ_F64_e64
  { 526,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #526 = V_CMPSX_NGE_F32_e32
  { 527,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #527 = V_CMPSX_NGE_F32_e64
  { 528,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #528 = V_CMPSX_NGE_F64_e32
  { 529,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #529 = V_CMPSX_NGE_F64_e64
  { 530,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #530 = V_CMPSX_NGT_F32_e32
  { 531,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #531 = V_CMPSX_NGT_F32_e64
  { 532,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #532 = V_CMPSX_NGT_F64_e32
  { 533,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #533 = V_CMPSX_NGT_F64_e64
  { 534,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #534 = V_CMPSX_NLE_F32_e32
  { 535,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #535 = V_CMPSX_NLE_F32_e64
  { 536,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #536 = V_CMPSX_NLE_F64_e32
  { 537,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #537 = V_CMPSX_NLE_F64_e64
  { 538,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #538 = V_CMPSX_NLG_F32_e32
  { 539,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #539 = V_CMPSX_NLG_F32_e64
  { 540,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #540 = V_CMPSX_NLG_F64_e32
  { 541,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #541 = V_CMPSX_NLG_F64_e64
  { 542,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #542 = V_CMPSX_NLT_F32_e32
  { 543,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #543 = V_CMPSX_NLT_F32_e64
  { 544,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #544 = V_CMPSX_NLT_F64_e32
  { 545,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #545 = V_CMPSX_NLT_F64_e64
  { 546,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #546 = V_CMPSX_O_F32_e32
  { 547,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #547 = V_CMPSX_O_F32_e64
  { 548,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #548 = V_CMPSX_O_F64_e32
  { 549,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #549 = V_CMPSX_O_F64_e64
  { 550,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #550 = V_CMPSX_TRU_F32_e32
  { 551,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #551 = V_CMPSX_TRU_F32_e64
  { 552,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #552 = V_CMPSX_TRU_F64_e32
  { 553,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #553 = V_CMPSX_TRU_F64_e64
  { 554,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #554 = V_CMPSX_U_F32_e32
  { 555,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #555 = V_CMPSX_U_F32_e64
  { 556,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #556 = V_CMPSX_U_F64_e32
  { 557,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #557 = V_CMPSX_U_F64_e64
  { 558,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #558 = V_CMPS_EQ_F32_e32
  { 559,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #559 = V_CMPS_EQ_F32_e64
  { 560,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #560 = V_CMPS_EQ_F64_e32
  { 561,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #561 = V_CMPS_EQ_F64_e64
  { 562,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #562 = V_CMPS_F_F32_e32
  { 563,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #563 = V_CMPS_F_F32_e64
  { 564,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #564 = V_CMPS_F_F64_e32
  { 565,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #565 = V_CMPS_F_F64_e64
  { 566,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #566 = V_CMPS_GE_F32_e32
  { 567,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #567 = V_CMPS_GE_F32_e64
  { 568,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #568 = V_CMPS_GE_F64_e32
  { 569,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #569 = V_CMPS_GE_F64_e64
  { 570,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #570 = V_CMPS_GT_F32_e32
  { 571,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #571 = V_CMPS_GT_F32_e64
  { 572,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #572 = V_CMPS_GT_F64_e32
  { 573,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #573 = V_CMPS_GT_F64_e64
  { 574,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #574 = V_CMPS_LE_F32_e32
  { 575,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #575 = V_CMPS_LE_F32_e64
  { 576,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #576 = V_CMPS_LE_F64_e32
  { 577,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #577 = V_CMPS_LE_F64_e64
  { 578,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #578 = V_CMPS_LG_F32_e32
  { 579,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #579 = V_CMPS_LG_F32_e64
  { 580,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #580 = V_CMPS_LG_F64_e32
  { 581,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #581 = V_CMPS_LG_F64_e64
  { 582,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #582 = V_CMPS_LT_F32_e32
  { 583,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #583 = V_CMPS_LT_F32_e64
  { 584,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #584 = V_CMPS_LT_F64_e32
  { 585,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #585 = V_CMPS_LT_F64_e64
  { 586,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #586 = V_CMPS_NEQ_F32_e32
  { 587,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #587 = V_CMPS_NEQ_F32_e64
  { 588,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #588 = V_CMPS_NEQ_F64_e32
  { 589,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #589 = V_CMPS_NEQ_F64_e64
  { 590,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #590 = V_CMPS_NGE_F32_e32
  { 591,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #591 = V_CMPS_NGE_F32_e64
  { 592,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #592 = V_CMPS_NGE_F64_e32
  { 593,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #593 = V_CMPS_NGE_F64_e64
  { 594,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #594 = V_CMPS_NGT_F32_e32
  { 595,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #595 = V_CMPS_NGT_F32_e64
  { 596,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #596 = V_CMPS_NGT_F64_e32
  { 597,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #597 = V_CMPS_NGT_F64_e64
  { 598,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #598 = V_CMPS_NLE_F32_e32
  { 599,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #599 = V_CMPS_NLE_F32_e64
  { 600,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #600 = V_CMPS_NLE_F64_e32
  { 601,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #601 = V_CMPS_NLE_F64_e64
  { 602,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #602 = V_CMPS_NLG_F32_e32
  { 603,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #603 = V_CMPS_NLG_F32_e64
  { 604,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #604 = V_CMPS_NLG_F64_e32
  { 605,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #605 = V_CMPS_NLG_F64_e64
  { 606,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #606 = V_CMPS_NLT_F32_e32
  { 607,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #607 = V_CMPS_NLT_F32_e64
  { 608,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #608 = V_CMPS_NLT_F64_e32
  { 609,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #609 = V_CMPS_NLT_F64_e64
  { 610,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #610 = V_CMPS_O_F32_e32
  { 611,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #611 = V_CMPS_O_F32_e64
  { 612,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #612 = V_CMPS_O_F64_e32
  { 613,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #613 = V_CMPS_O_F64_e64
  { 614,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #614 = V_CMPS_TRU_F32_e32
  { 615,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #615 = V_CMPS_TRU_F32_e64
  { 616,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #616 = V_CMPS_TRU_F64_e32
  { 617,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #617 = V_CMPS_TRU_F64_e64
  { 618,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #618 = V_CMPS_U_F32_e32
  { 619,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #619 = V_CMPS_U_F32_e64
  { 620,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #620 = V_CMPS_U_F64_e32
  { 621,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #621 = V_CMPS_U_F64_e64
  { 622,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #622 = V_CMPX_CLASS_F32_e32
  { 623,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #623 = V_CMPX_CLASS_F32_e64
  { 624,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #624 = V_CMPX_CLASS_F64_e32
  { 625,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #625 = V_CMPX_CLASS_F64_e64
  { 626,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #626 = V_CMPX_EQ_F32_e32
  { 627,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #627 = V_CMPX_EQ_F32_e64
  { 628,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #628 = V_CMPX_EQ_F64_e32
  { 629,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #629 = V_CMPX_EQ_F64_e64
  { 630,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #630 = V_CMPX_EQ_I32_e32
  { 631,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #631 = V_CMPX_EQ_I32_e64
  { 632,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #632 = V_CMPX_EQ_I64_e32
  { 633,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #633 = V_CMPX_EQ_I64_e64
  { 634,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #634 = V_CMPX_EQ_U32_e32
  { 635,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #635 = V_CMPX_EQ_U32_e64
  { 636,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #636 = V_CMPX_EQ_U64_e32
  { 637,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #637 = V_CMPX_EQ_U64_e64
  { 638,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #638 = V_CMPX_F_F32_e32
  { 639,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #639 = V_CMPX_F_F32_e64
  { 640,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #640 = V_CMPX_F_F64_e32
  { 641,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #641 = V_CMPX_F_F64_e64
  { 642,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #642 = V_CMPX_F_I32_e32
  { 643,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #643 = V_CMPX_F_I32_e64
  { 644,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #644 = V_CMPX_F_I64_e32
  { 645,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #645 = V_CMPX_F_I64_e64
  { 646,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #646 = V_CMPX_F_U32_e32
  { 647,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #647 = V_CMPX_F_U32_e64
  { 648,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #648 = V_CMPX_F_U64_e32
  { 649,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #649 = V_CMPX_F_U64_e64
  { 650,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #650 = V_CMPX_GE_F32_e32
  { 651,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #651 = V_CMPX_GE_F32_e64
  { 652,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #652 = V_CMPX_GE_F64_e32
  { 653,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #653 = V_CMPX_GE_F64_e64
  { 654,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #654 = V_CMPX_GE_I32_e32
  { 655,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #655 = V_CMPX_GE_I32_e64
  { 656,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #656 = V_CMPX_GE_I64_e32
  { 657,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #657 = V_CMPX_GE_I64_e64
  { 658,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #658 = V_CMPX_GE_U32_e32
  { 659,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #659 = V_CMPX_GE_U32_e64
  { 660,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #660 = V_CMPX_GE_U64_e32
  { 661,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #661 = V_CMPX_GE_U64_e64
  { 662,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #662 = V_CMPX_GT_F32_e32
  { 663,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #663 = V_CMPX_GT_F32_e64
  { 664,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #664 = V_CMPX_GT_F64_e32
  { 665,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #665 = V_CMPX_GT_F64_e64
  { 666,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #666 = V_CMPX_GT_I32_e32
  { 667,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #667 = V_CMPX_GT_I32_e64
  { 668,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #668 = V_CMPX_GT_I64_e32
  { 669,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #669 = V_CMPX_GT_I64_e64
  { 670,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #670 = V_CMPX_GT_U32_e32
  { 671,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #671 = V_CMPX_GT_U32_e64
  { 672,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #672 = V_CMPX_GT_U64_e32
  { 673,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #673 = V_CMPX_GT_U64_e64
  { 674,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #674 = V_CMPX_LE_F32_e32
  { 675,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #675 = V_CMPX_LE_F32_e64
  { 676,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #676 = V_CMPX_LE_F64_e32
  { 677,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #677 = V_CMPX_LE_F64_e64
  { 678,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #678 = V_CMPX_LE_I32_e32
  { 679,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #679 = V_CMPX_LE_I32_e64
  { 680,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #680 = V_CMPX_LE_I64_e32
  { 681,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #681 = V_CMPX_LE_I64_e64
  { 682,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #682 = V_CMPX_LE_U32_e32
  { 683,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #683 = V_CMPX_LE_U32_e64
  { 684,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #684 = V_CMPX_LE_U64_e32
  { 685,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #685 = V_CMPX_LE_U64_e64
  { 686,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #686 = V_CMPX_LG_F32_e32
  { 687,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #687 = V_CMPX_LG_F32_e64
  { 688,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #688 = V_CMPX_LG_F64_e32
  { 689,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #689 = V_CMPX_LG_F64_e64
  { 690,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #690 = V_CMPX_LT_F32_e32
  { 691,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #691 = V_CMPX_LT_F32_e64
  { 692,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #692 = V_CMPX_LT_F64_e32
  { 693,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #693 = V_CMPX_LT_F64_e64
  { 694,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #694 = V_CMPX_LT_I32_e32
  { 695,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #695 = V_CMPX_LT_I32_e64
  { 696,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #696 = V_CMPX_LT_I64_e32
  { 697,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #697 = V_CMPX_LT_I64_e64
  { 698,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #698 = V_CMPX_LT_U32_e32
  { 699,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #699 = V_CMPX_LT_U32_e64
  { 700,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #700 = V_CMPX_LT_U64_e32
  { 701,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #701 = V_CMPX_LT_U64_e64
  { 702,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #702 = V_CMPX_NEQ_F32_e32
  { 703,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #703 = V_CMPX_NEQ_F32_e64
  { 704,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #704 = V_CMPX_NEQ_F64_e32
  { 705,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #705 = V_CMPX_NEQ_F64_e64
  { 706,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #706 = V_CMPX_NE_I32_e32
  { 707,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #707 = V_CMPX_NE_I32_e64
  { 708,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #708 = V_CMPX_NE_I64_e32
  { 709,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #709 = V_CMPX_NE_I64_e64
  { 710,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #710 = V_CMPX_NE_U32_e32
  { 711,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #711 = V_CMPX_NE_U32_e64
  { 712,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #712 = V_CMPX_NE_U64_e32
  { 713,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #713 = V_CMPX_NE_U64_e64
  { 714,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #714 = V_CMPX_NGE_F32_e32
  { 715,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #715 = V_CMPX_NGE_F32_e64
  { 716,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #716 = V_CMPX_NGE_F64_e32
  { 717,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #717 = V_CMPX_NGE_F64_e64
  { 718,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #718 = V_CMPX_NGT_F32_e32
  { 719,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #719 = V_CMPX_NGT_F32_e64
  { 720,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #720 = V_CMPX_NGT_F64_e32
  { 721,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #721 = V_CMPX_NGT_F64_e64
  { 722,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #722 = V_CMPX_NLE_F32_e32
  { 723,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #723 = V_CMPX_NLE_F32_e64
  { 724,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #724 = V_CMPX_NLE_F64_e32
  { 725,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #725 = V_CMPX_NLE_F64_e64
  { 726,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #726 = V_CMPX_NLG_F32_e32
  { 727,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #727 = V_CMPX_NLG_F32_e64
  { 728,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #728 = V_CMPX_NLG_F64_e32
  { 729,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #729 = V_CMPX_NLG_F64_e64
  { 730,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #730 = V_CMPX_NLT_F32_e32
  { 731,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #731 = V_CMPX_NLT_F32_e64
  { 732,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #732 = V_CMPX_NLT_F64_e32
  { 733,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #733 = V_CMPX_NLT_F64_e64
  { 734,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #734 = V_CMPX_O_F32_e32
  { 735,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #735 = V_CMPX_O_F32_e64
  { 736,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #736 = V_CMPX_O_F64_e32
  { 737,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #737 = V_CMPX_O_F64_e64
  { 738,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #738 = V_CMPX_TRU_F32_e32
  { 739,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #739 = V_CMPX_TRU_F32_e64
  { 740,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #740 = V_CMPX_TRU_F64_e32
  { 741,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #741 = V_CMPX_TRU_F64_e64
  { 742,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #742 = V_CMPX_T_I32_e32
  { 743,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #743 = V_CMPX_T_I32_e64
  { 744,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #744 = V_CMPX_T_I64_e32
  { 745,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #745 = V_CMPX_T_I64_e64
  { 746,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #746 = V_CMPX_T_U32_e32
  { 747,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #747 = V_CMPX_T_U32_e64
  { 748,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #748 = V_CMPX_T_U64_e32
  { 749,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #749 = V_CMPX_T_U64_e64
  { 750,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo112 },  // Inst #750 = V_CMPX_U_F32_e32
  { 751,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo113 },  // Inst #751 = V_CMPX_U_F32_e64
  { 752,	3,	1,	2,	4,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo114 },  // Inst #752 = V_CMPX_U_F64_e32
  { 753,	7,	1,	2,	8,	0|(1<<MCID::Compare)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo115 },  // Inst #753 = V_CMPX_U_F64_e64
  { 754,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #754 = V_CMP_CLASS_F32_e32
  { 755,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #755 = V_CMP_CLASS_F32_e64
  { 756,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #756 = V_CMP_CLASS_F64_e32
  { 757,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #757 = V_CMP_CLASS_F64_e64
  { 758,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #758 = V_CMP_EQ_F32_e32
  { 759,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #759 = V_CMP_EQ_F32_e64
  { 760,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #760 = V_CMP_EQ_F64_e32
  { 761,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #761 = V_CMP_EQ_F64_e64
  { 762,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #762 = V_CMP_EQ_I32_e32
  { 763,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #763 = V_CMP_EQ_I32_e64
  { 764,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #764 = V_CMP_EQ_I64_e32
  { 765,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #765 = V_CMP_EQ_I64_e64
  { 766,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #766 = V_CMP_EQ_U32_e32
  { 767,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #767 = V_CMP_EQ_U32_e64
  { 768,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #768 = V_CMP_EQ_U64_e32
  { 769,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #769 = V_CMP_EQ_U64_e64
  { 770,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #770 = V_CMP_F_F32_e32
  { 771,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #771 = V_CMP_F_F32_e64
  { 772,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #772 = V_CMP_F_F64_e32
  { 773,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #773 = V_CMP_F_F64_e64
  { 774,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #774 = V_CMP_F_I32_e32
  { 775,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #775 = V_CMP_F_I32_e64
  { 776,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #776 = V_CMP_F_I64_e32
  { 777,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #777 = V_CMP_F_I64_e64
  { 778,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #778 = V_CMP_F_U32_e32
  { 779,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #779 = V_CMP_F_U32_e64
  { 780,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #780 = V_CMP_F_U64_e32
  { 781,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #781 = V_CMP_F_U64_e64
  { 782,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #782 = V_CMP_GE_F32_e32
  { 783,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #783 = V_CMP_GE_F32_e64
  { 784,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #784 = V_CMP_GE_F64_e32
  { 785,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #785 = V_CMP_GE_F64_e64
  { 786,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #786 = V_CMP_GE_I32_e32
  { 787,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #787 = V_CMP_GE_I32_e64
  { 788,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #788 = V_CMP_GE_I64_e32
  { 789,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #789 = V_CMP_GE_I64_e64
  { 790,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #790 = V_CMP_GE_U32_e32
  { 791,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #791 = V_CMP_GE_U32_e64
  { 792,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #792 = V_CMP_GE_U64_e32
  { 793,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #793 = V_CMP_GE_U64_e64
  { 794,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #794 = V_CMP_GT_F32_e32
  { 795,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #795 = V_CMP_GT_F32_e64
  { 796,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #796 = V_CMP_GT_F64_e32
  { 797,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #797 = V_CMP_GT_F64_e64
  { 798,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #798 = V_CMP_GT_I32_e32
  { 799,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #799 = V_CMP_GT_I32_e64
  { 800,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #800 = V_CMP_GT_I64_e32
  { 801,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #801 = V_CMP_GT_I64_e64
  { 802,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #802 = V_CMP_GT_U32_e32
  { 803,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #803 = V_CMP_GT_U32_e64
  { 804,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #804 = V_CMP_GT_U64_e32
  { 805,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #805 = V_CMP_GT_U64_e64
  { 806,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #806 = V_CMP_LE_F32_e32
  { 807,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #807 = V_CMP_LE_F32_e64
  { 808,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #808 = V_CMP_LE_F64_e32
  { 809,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #809 = V_CMP_LE_F64_e64
  { 810,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #810 = V_CMP_LE_I32_e32
  { 811,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #811 = V_CMP_LE_I32_e64
  { 812,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #812 = V_CMP_LE_I64_e32
  { 813,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #813 = V_CMP_LE_I64_e64
  { 814,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #814 = V_CMP_LE_U32_e32
  { 815,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #815 = V_CMP_LE_U32_e64
  { 816,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #816 = V_CMP_LE_U64_e32
  { 817,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #817 = V_CMP_LE_U64_e64
  { 818,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #818 = V_CMP_LG_F32_e32
  { 819,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #819 = V_CMP_LG_F32_e64
  { 820,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #820 = V_CMP_LG_F64_e32
  { 821,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #821 = V_CMP_LG_F64_e64
  { 822,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #822 = V_CMP_LT_F32_e32
  { 823,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #823 = V_CMP_LT_F32_e64
  { 824,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #824 = V_CMP_LT_F64_e32
  { 825,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #825 = V_CMP_LT_F64_e64
  { 826,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #826 = V_CMP_LT_I32_e32
  { 827,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #827 = V_CMP_LT_I32_e64
  { 828,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #828 = V_CMP_LT_I64_e32
  { 829,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #829 = V_CMP_LT_I64_e64
  { 830,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #830 = V_CMP_LT_U32_e32
  { 831,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #831 = V_CMP_LT_U32_e64
  { 832,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #832 = V_CMP_LT_U64_e32
  { 833,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #833 = V_CMP_LT_U64_e64
  { 834,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #834 = V_CMP_NEQ_F32_e32
  { 835,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #835 = V_CMP_NEQ_F32_e64
  { 836,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #836 = V_CMP_NEQ_F64_e32
  { 837,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #837 = V_CMP_NEQ_F64_e64
  { 838,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #838 = V_CMP_NE_I32_e32
  { 839,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #839 = V_CMP_NE_I32_e64
  { 840,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #840 = V_CMP_NE_I64_e32
  { 841,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #841 = V_CMP_NE_I64_e64
  { 842,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #842 = V_CMP_NE_U32_e32
  { 843,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #843 = V_CMP_NE_U32_e64
  { 844,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #844 = V_CMP_NE_U64_e32
  { 845,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #845 = V_CMP_NE_U64_e64
  { 846,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #846 = V_CMP_NGE_F32_e32
  { 847,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #847 = V_CMP_NGE_F32_e64
  { 848,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #848 = V_CMP_NGE_F64_e32
  { 849,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #849 = V_CMP_NGE_F64_e64
  { 850,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #850 = V_CMP_NGT_F32_e32
  { 851,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #851 = V_CMP_NGT_F32_e64
  { 852,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #852 = V_CMP_NGT_F64_e32
  { 853,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #853 = V_CMP_NGT_F64_e64
  { 854,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #854 = V_CMP_NLE_F32_e32
  { 855,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #855 = V_CMP_NLE_F32_e64
  { 856,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #856 = V_CMP_NLE_F64_e32
  { 857,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #857 = V_CMP_NLE_F64_e64
  { 858,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #858 = V_CMP_NLG_F32_e32
  { 859,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #859 = V_CMP_NLG_F32_e64
  { 860,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #860 = V_CMP_NLG_F64_e32
  { 861,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #861 = V_CMP_NLG_F64_e64
  { 862,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #862 = V_CMP_NLT_F32_e32
  { 863,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #863 = V_CMP_NLT_F32_e64
  { 864,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #864 = V_CMP_NLT_F64_e32
  { 865,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #865 = V_CMP_NLT_F64_e64
  { 866,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #866 = V_CMP_O_F32_e32
  { 867,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #867 = V_CMP_O_F32_e64
  { 868,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #868 = V_CMP_O_F64_e32
  { 869,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #869 = V_CMP_O_F64_e64
  { 870,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #870 = V_CMP_TRU_F32_e32
  { 871,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #871 = V_CMP_TRU_F32_e64
  { 872,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #872 = V_CMP_TRU_F64_e32
  { 873,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #873 = V_CMP_TRU_F64_e64
  { 874,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #874 = V_CMP_T_I32_e32
  { 875,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #875 = V_CMP_T_I32_e64
  { 876,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #876 = V_CMP_T_I64_e32
  { 877,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #877 = V_CMP_T_I64_e64
  { 878,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #878 = V_CMP_T_U32_e32
  { 879,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #879 = V_CMP_T_U32_e64
  { 880,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #880 = V_CMP_T_U64_e32
  { 881,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #881 = V_CMP_T_U64_e64
  { 882,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo112 },  // Inst #882 = V_CMP_U_F32_e32
  { 883,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo113 },  // Inst #883 = V_CMP_U_F32_e64
  { 884,	3,	1,	2,	4,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo114 },  // Inst #884 = V_CMP_U_F64_e32
  { 885,	7,	1,	2,	8,	0|(1<<MCID::Compare), 0x0ULL, ImplicitList1, NULL, OperandInfo115 },  // Inst #885 = V_CMP_U_F64_e64
  { 886,	4,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo116 },  // Inst #886 = V_CNDMASK_B32_e32
  { 887,	8,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo117 },  // Inst #887 = V_CNDMASK_B32_e64
  { 888,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo110 },  // Inst #888 = V_COS_F32_e32
  { 889,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo111 },  // Inst #889 = V_COS_F32_e64
  { 890,	8,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo108 },  // Inst #890 = V_CUBEID_F32
  { 891,	8,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo108 },  // Inst #891 = V_CUBEMA_F32
  { 892,	8,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo108 },  // Inst #892 = V_CUBESC_F32
  { 893,	8,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo108 },  // Inst #893 = V_CUBETC_F32
  { 894,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo110 },  // Inst #894 = V_CVT_F32_I32_e32
  { 895,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo111 },  // Inst #895 = V_CVT_F32_I32_e64
  { 896,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo110 },  // Inst #896 = V_CVT_F32_U32_e32
  { 897,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo111 },  // Inst #897 = V_CVT_F32_U32_e64
  { 898,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo110 },  // Inst #898 = V_CVT_I32_F32_e32
  { 899,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo111 },  // Inst #899 = V_CVT_I32_F32_e64
  { 900,	3,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo105 },  // Inst #900 = V_CVT_PKRTZ_F16_F32_e32
  { 901,	7,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo106 },  // Inst #901 = V_CVT_PKRTZ_F16_F32_e64
  { 902,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo110 },  // Inst #902 = V_CVT_U32_F32_e32
  { 903,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo111 },  // Inst #903 = V_CVT_U32_F32_e64
  { 904,	8,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo108 },  // Inst #904 = V_DIV_FIXUP_F32
  { 905,	8,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo107 },  // Inst #905 = V_DIV_FIXUP_F64
  { 906,	8,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo108 },  // Inst #906 = V_DIV_FMAS_F32
  { 907,	8,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo107 },  // Inst #907 = V_DIV_FMAS_F64
  { 908,	8,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo108 },  // Inst #908 = V_DIV_SCALE_F32
  { 909,	8,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo107 },  // Inst #909 = V_DIV_SCALE_F64
  { 910,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo110 },  // Inst #910 = V_EXP_F32_e32
  { 911,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo111 },  // Inst #911 = V_EXP_F32_e64
  { 912,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo110 },  // Inst #912 = V_FFBH_I32_e32
  { 913,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo111 },  // Inst #913 = V_FFBH_I32_e64
  { 914,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo110 },  // Inst #914 = V_FFBH_U32_e32
  { 915,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo111 },  // Inst #915 = V_FFBH_U32_e64
  { 916,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo110 },  // Inst #916 = V_FFBL_B32_e32
  { 917,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo111 },  // Inst #917 = V_FFBL_B32_e64
  { 918,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo110 },  // Inst #918 = V_FLOOR_F32_e32
  { 919,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo111 },  // Inst #919 = V_FLOOR_F32_e64
  { 920,	8,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo108 },  // Inst #920 = V_FMA_F32
  { 921,	8,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo107 },  // Inst #921 = V_FMA_F64
  { 922,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo110 },  // Inst #922 = V_FRACT_F32_e32
  { 923,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo111 },  // Inst #923 = V_FRACT_F32_e64
  { 924,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo118 },  // Inst #924 = V_FRACT_F64_e32
  { 925,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo119 },  // Inst #925 = V_FRACT_F64_e64
  { 926,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo110 },  // Inst #926 = V_FREXP_MANT_F32_e32
  { 927,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo111 },  // Inst #927 = V_FREXP_MANT_F32_e64
  { 928,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo118 },  // Inst #928 = V_FREXP_MANT_F64_e32
  { 929,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo119 },  // Inst #929 = V_FREXP_MANT_F64_e64
  { 930,	5,	1,	2,	4,	0|(1<<MCID::MayLoad), 0x0ULL, ImplicitList1, NULL, OperandInfo120 },  // Inst #930 = V_INTERP_MOV_F32
  { 931,	5,	1,	2,	4,	0|(1<<MCID::MayLoad), 0x0ULL, ImplicitList1, NULL, OperandInfo121 },  // Inst #931 = V_INTERP_P1_F32
  { 932,	6,	1,	2,	4,	0|(1<<MCID::MayLoad), 0x0ULL, ImplicitList1, NULL, OperandInfo122 },  // Inst #932 = V_INTERP_P2_F32
  { 933,	3,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo105 },  // Inst #933 = V_LDEXP_F32_e32
  { 934,	7,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo106 },  // Inst #934 = V_LDEXP_F32_e64
  { 935,	8,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo107 },  // Inst #935 = V_LDEXP_F64
  { 936,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo110 },  // Inst #936 = V_LOG_CLAMP_F32_e32
  { 937,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo111 },  // Inst #937 = V_LOG_CLAMP_F32_e64
  { 938,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo110 },  // Inst #938 = V_LOG_F32_e32
  { 939,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo111 },  // Inst #939 = V_LOG_F32_e64
  { 940,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo105 },  // Inst #940 = V_LSHLREV_B32_e32
  { 941,	7,	1,	2,	8,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo106 },  // Inst #941 = V_LSHLREV_B32_e64
  { 942,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo105 },  // Inst #942 = V_LSHL_B32_e32
  { 943,	7,	1,	2,	8,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo106 },  // Inst #943 = V_LSHL_B32_e64
  { 944,	3,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo109 },  // Inst #944 = V_LSHL_B64
  { 945,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo105 },  // Inst #945 = V_LSHRREV_B32_e32
  { 946,	7,	1,	2,	8,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo106 },  // Inst #946 = V_LSHRREV_B32_e64
  { 947,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo105 },  // Inst #947 = V_LSHR_B32_e32
  { 948,	7,	1,	2,	8,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo106 },  // Inst #948 = V_LSHR_B32_e64
  { 949,	3,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo109 },  // Inst #949 = V_LSHR_B64
  { 950,	3,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo105 },  // Inst #950 = V_MAC_F32_e32
  { 951,	7,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo106 },  // Inst #951 = V_MAC_F32_e64
  { 952,	3,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo105 },  // Inst #952 = V_MAC_LEGACY_F32_e32
  { 953,	7,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo106 },  // Inst #953 = V_MAC_LEGACY_F32_e64
  { 954,	3,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo105 },  // Inst #954 = V_MADAK_F32_e32
  { 955,	7,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo106 },  // Inst #955 = V_MADAK_F32_e64
  { 956,	3,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo105 },  // Inst #956 = V_MADMK_F32_e32
  { 957,	7,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo106 },  // Inst #957 = V_MADMK_F32_e64
  { 958,	8,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo108 },  // Inst #958 = V_MAD_F32
  { 959,	8,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo108 },  // Inst #959 = V_MAD_I32_I24
  { 960,	8,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo108 },  // Inst #960 = V_MAD_LEGACY_F32
  { 961,	8,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo108 },  // Inst #961 = V_MAD_U32_U24
  { 962,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo105 },  // Inst #962 = V_MAX_F32_e32
  { 963,	7,	1,	2,	8,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo106 },  // Inst #963 = V_MAX_F32_e64
  { 964,	8,	1,	2,	8,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo107 },  // Inst #964 = V_MAX_F64
  { 965,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo105 },  // Inst #965 = V_MAX_I32_e32
  { 966,	7,	1,	2,	8,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo106 },  // Inst #966 = V_MAX_I32_e64
  { 967,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo105 },  // Inst #967 = V_MAX_LEGACY_F32_e32
  { 968,	7,	1,	2,	8,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo106 },  // Inst #968 = V_MAX_LEGACY_F32_e64
  { 969,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo105 },  // Inst #969 = V_MAX_U32_e32
  { 970,	7,	1,	2,	8,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo106 },  // Inst #970 = V_MAX_U32_e64
  { 971,	3,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo105 },  // Inst #971 = V_MBCNT_HI_U32_B32_e32
  { 972,	7,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo106 },  // Inst #972 = V_MBCNT_HI_U32_B32_e64
  { 973,	3,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo105 },  // Inst #973 = V_MBCNT_LO_U32_B32_e32
  { 974,	7,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo106 },  // Inst #974 = V_MBCNT_LO_U32_B32_e64
  { 975,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo105 },  // Inst #975 = V_MIN_F32_e32
  { 976,	7,	1,	2,	8,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo106 },  // Inst #976 = V_MIN_F32_e64
  { 977,	8,	1,	2,	8,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo107 },  // Inst #977 = V_MIN_F64
  { 978,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo105 },  // Inst #978 = V_MIN_I32_e32
  { 979,	7,	1,	2,	8,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo106 },  // Inst #979 = V_MIN_I32_e64
  { 980,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo105 },  // Inst #980 = V_MIN_LEGACY_F32_e32
  { 981,	7,	1,	2,	8,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo106 },  // Inst #981 = V_MIN_LEGACY_F32_e64
  { 982,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo105 },  // Inst #982 = V_MIN_U32_e32
  { 983,	7,	1,	2,	8,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo106 },  // Inst #983 = V_MIN_U32_e64
  { 984,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo110 },  // Inst #984 = V_MOVRELD_B32_e32
  { 985,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo111 },  // Inst #985 = V_MOVRELD_B32_e64
  { 986,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo110 },  // Inst #986 = V_MOVRELSD_B32_e32
  { 987,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo111 },  // Inst #987 = V_MOVRELSD_B32_e64
  { 988,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo110 },  // Inst #988 = V_MOVRELS_B32_e32
  { 989,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo111 },  // Inst #989 = V_MOVRELS_B32_e64
  { 990,	2,	1,	2,	4,	0|(1<<MCID::MoveImm), 0x0ULL, ImplicitList1, NULL, OperandInfo110 },  // Inst #990 = V_MOV_B32_e32
  { 991,	6,	1,	2,	8,	0|(1<<MCID::MoveImm), 0x0ULL, ImplicitList1, NULL, OperandInfo111 },  // Inst #991 = V_MOV_B32_e64
  { 992,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo110 },  // Inst #992 = V_MOV_FED_B32_e32
  { 993,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo111 },  // Inst #993 = V_MOV_FED_B32_e64
  { 994,	8,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo108 },  // Inst #994 = V_MULLIT_F32
  { 995,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo105 },  // Inst #995 = V_MUL_F32_e32
  { 996,	7,	1,	2,	8,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo106 },  // Inst #996 = V_MUL_F32_e64
  { 997,	8,	1,	2,	8,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo107 },  // Inst #997 = V_MUL_F64
  { 998,	8,	1,	2,	8,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo108 },  // Inst #998 = V_MUL_HI_I32
  { 999,	8,	1,	2,	8,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo108 },  // Inst #999 = V_MUL_HI_U32
  { 1000,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo105 },  // Inst #1000 = V_MUL_I32_I24_e32
  { 1001,	7,	1,	2,	8,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo106 },  // Inst #1001 = V_MUL_I32_I24_e64
  { 1002,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo105 },  // Inst #1002 = V_MUL_LEGACY_F32_e32
  { 1003,	7,	1,	2,	8,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo106 },  // Inst #1003 = V_MUL_LEGACY_F32_e64
  { 1004,	8,	1,	2,	8,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo108 },  // Inst #1004 = V_MUL_LO_I32
  { 1005,	8,	1,	2,	8,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo108 },  // Inst #1005 = V_MUL_LO_U32
  { 1006,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo105 },  // Inst #1006 = V_MUL_U32_U24_e32
  { 1007,	7,	1,	2,	8,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo106 },  // Inst #1007 = V_MUL_U32_U24_e64
  { 1008,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo110 },  // Inst #1008 = V_NOT_B32_e32
  { 1009,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo111 },  // Inst #1009 = V_NOT_B32_e64
  { 1010,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo105 },  // Inst #1010 = V_OR_B32_e32
  { 1011,	7,	1,	2,	8,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo106 },  // Inst #1011 = V_OR_B32_e64
  { 1012,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo110 },  // Inst #1012 = V_RCP_CLAMP_F32_e32
  { 1013,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo111 },  // Inst #1013 = V_RCP_CLAMP_F32_e64
  { 1014,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo118 },  // Inst #1014 = V_RCP_CLAMP_F64_e32
  { 1015,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo119 },  // Inst #1015 = V_RCP_CLAMP_F64_e64
  { 1016,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo110 },  // Inst #1016 = V_RCP_F32_e32
  { 1017,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo111 },  // Inst #1017 = V_RCP_F32_e64
  { 1018,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo118 },  // Inst #1018 = V_RCP_F64_e32
  { 1019,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo119 },  // Inst #1019 = V_RCP_F64_e64
  { 1020,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo110 },  // Inst #1020 = V_RCP_IFLAG_F32_e32
  { 1021,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo111 },  // Inst #1021 = V_RCP_IFLAG_F32_e64
  { 1022,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo110 },  // Inst #1022 = V_RCP_LEGACY_F32_e32
  { 1023,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo111 },  // Inst #1023 = V_RCP_LEGACY_F32_e64
  { 1024,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo110 },  // Inst #1024 = V_READFIRSTLANE_B32_e32
  { 1025,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo111 },  // Inst #1025 = V_READFIRSTLANE_B32_e64
  { 1026,	3,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo105 },  // Inst #1026 = V_READLANE_B32_e32
  { 1027,	7,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo106 },  // Inst #1027 = V_READLANE_B32_e64
  { 1028,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo110 },  // Inst #1028 = V_RNDNE_F32_e32
  { 1029,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo111 },  // Inst #1029 = V_RNDNE_F32_e64
  { 1030,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo110 },  // Inst #1030 = V_RSQ_CLAMP_F32_e32
  { 1031,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo111 },  // Inst #1031 = V_RSQ_CLAMP_F32_e64
  { 1032,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo118 },  // Inst #1032 = V_RSQ_CLAMP_F64_e32
  { 1033,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo119 },  // Inst #1033 = V_RSQ_CLAMP_F64_e64
  { 1034,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo110 },  // Inst #1034 = V_RSQ_F32_e32
  { 1035,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo111 },  // Inst #1035 = V_RSQ_F32_e64
  { 1036,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo118 },  // Inst #1036 = V_RSQ_F64_e32
  { 1037,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo119 },  // Inst #1037 = V_RSQ_F64_e64
  { 1038,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo110 },  // Inst #1038 = V_RSQ_LEGACY_F32_e32
  { 1039,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo111 },  // Inst #1039 = V_RSQ_LEGACY_F32_e64
  { 1040,	8,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo108 },  // Inst #1040 = V_SAD_U32
  { 1041,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo110 },  // Inst #1041 = V_SIN_F32_e32
  { 1042,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo111 },  // Inst #1042 = V_SIN_F32_e64
  { 1043,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo110 },  // Inst #1043 = V_SQRT_F32_e32
  { 1044,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo111 },  // Inst #1044 = V_SQRT_F32_e64
  { 1045,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo118 },  // Inst #1045 = V_SQRT_F64_e32
  { 1046,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo119 },  // Inst #1046 = V_SQRT_F64_e64
  { 1047,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList4, ImplicitList4, OperandInfo105 },  // Inst #1047 = V_SUBBREV_U32_e32
  { 1048,	7,	1,	2,	8,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList4, ImplicitList4, OperandInfo106 },  // Inst #1048 = V_SUBBREV_U32_e64
  { 1049,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList4, ImplicitList4, OperandInfo105 },  // Inst #1049 = V_SUBB_U32_e32
  { 1050,	7,	1,	2,	8,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList4, ImplicitList4, OperandInfo106 },  // Inst #1050 = V_SUBB_U32_e64
  { 1051,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo105 },  // Inst #1051 = V_SUBREV_F32_e32
  { 1052,	7,	1,	2,	8,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo106 },  // Inst #1052 = V_SUBREV_F32_e64
  { 1053,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, ImplicitList4, OperandInfo105 },  // Inst #1053 = V_SUBREV_I32_e32
  { 1054,	7,	1,	2,	8,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, ImplicitList4, OperandInfo106 },  // Inst #1054 = V_SUBREV_I32_e64
  { 1055,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo105 },  // Inst #1055 = V_SUB_F32_e32
  { 1056,	7,	1,	2,	8,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo106 },  // Inst #1056 = V_SUB_F32_e64
  { 1057,	3,	1,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, NULL, OperandInfo123 },  // Inst #1057 = V_SUB_F64
  { 1058,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, ImplicitList4, OperandInfo105 },  // Inst #1058 = V_SUB_I32_e32
  { 1059,	7,	1,	2,	8,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, ImplicitList4, OperandInfo106 },  // Inst #1059 = V_SUB_I32_e64
  { 1060,	8,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo107 },  // Inst #1060 = V_TRIG_PREOP_F64
  { 1061,	2,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo110 },  // Inst #1061 = V_TRUNC_F32_e32
  { 1062,	6,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo111 },  // Inst #1062 = V_TRUNC_F32_e64
  { 1063,	3,	1,	2,	4,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo105 },  // Inst #1063 = V_WRITELANE_B32_e32
  { 1064,	7,	1,	2,	8,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo106 },  // Inst #1064 = V_WRITELANE_B32_e64
  { 1065,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo105 },  // Inst #1065 = V_XOR_B32_e32
  { 1066,	7,	1,	2,	8,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList1, NULL, OperandInfo106 },  // Inst #1066 = V_XOR_B32_e64
  { 1067,	0,	0,	2,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, 0 },  // Inst #1067 = WHILELOOP
  { 1068,	1,	0,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #1068 = WHILE_LOOP_EG
  { 1069,	1,	0,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #1069 = WHILE_LOOP_R600
  { 1070,	21,	1,	1,	0,	0|(1<<MCID::Predicable), 0x4a00ULL, NULL, NULL, OperandInfo8 },  // Inst #1070 = XOR_INT
};

extern const char AMDGPUInstrNameData[] = {
  /* 0 */ 'C', 'F', '_', 'T', 'C', '_', 'R', '6', '0', '0', 0,
  /* 11 */ 'C', 'F', '_', 'V', 'C', '_', 'R', '6', '0', '0', 0,
  /* 22 */ 'C', 'F', '_', 'E', 'N', 'D', '_', 'R', '6', '0', '0', 0,
  /* 34 */ 'C', 'F', '_', 'E', 'L', 'S', 'E', '_', 'R', '6', '0', '0', 0,
  /* 47 */ 'C', 'F', '_', 'C', 'O', 'N', 'T', 'I', 'N', 'U', 'E', '_', 'R', '6', '0', '0', 0,
  /* 64 */ 'F', 'N', 'E', 'G', '_', 'R', '6', '0', '0', 0,
  /* 74 */ 'L', 'O', 'O', 'P', '_', 'B', 'R', 'E', 'A', 'K', '_', 'R', '6', '0', '0', 0,
  /* 90 */ 'C', 'L', 'A', 'M', 'P', '_', 'R', '6', '0', '0', 0,
  /* 101 */ 'C', 'F', '_', 'J', 'U', 'M', 'P', '_', 'R', '6', '0', '0', 0,
  /* 114 */ 'E', 'N', 'D', '_', 'L', 'O', 'O', 'P', '_', 'R', '6', '0', '0', 0,
  /* 128 */ 'W', 'H', 'I', 'L', 'E', '_', 'L', 'O', 'O', 'P', '_', 'R', '6', '0', '0', 0,
  /* 144 */ 'P', 'O', 'P', '_', 'R', '6', '0', '0', 0,
  /* 153 */ 'F', 'A', 'B', 'S', '_', 'R', '6', '0', '0', 0,
  /* 163 */ 'C', 'F', '_', 'C', 'A', 'L', 'L', '_', 'F', 'S', '_', 'R', '6', '0', '0', 0,
  /* 179 */ 'D', 'O', 'T', '4', '_', 'r', '6', '0', '0', 0,
  /* 189 */ 'M', 'U', 'L', 'A', 'D', 'D', '_', 'r', '6', '0', '0', 0,
  /* 201 */ 'L', 'O', 'G', '_', 'C', 'L', 'A', 'M', 'P', 'E', 'D', '_', 'r', '6', '0', '0', 0,
  /* 218 */ 'R', 'E', 'C', 'I', 'P', '_', 'C', 'L', 'A', 'M', 'P', 'E', 'D', '_', 'r', '6', '0', '0', 0,
  /* 237 */ 'R', 'E', 'C', 'I', 'P', 'S', 'Q', 'R', 'T', '_', 'C', 'L', 'A', 'M', 'P', 'E', 'D', '_', 'r', '6', '0', '0', 0,
  /* 260 */ 'C', 'N', 'D', 'E', '_', 'r', '6', '0', '0', 0,
  /* 270 */ 'M', 'U', 'L', 'A', 'D', 'D', '_', 'I', 'E', 'E', 'E', '_', 'r', '6', '0', '0', 0,
  /* 287 */ 'L', 'O', 'G', '_', 'I', 'E', 'E', 'E', '_', 'r', '6', '0', '0', 0,
  /* 301 */ 'R', 'E', 'C', 'I', 'P', '_', 'I', 'E', 'E', 'E', '_', 'r', '6', '0', '0', 0,
  /* 317 */ 'E', 'X', 'P', '_', 'I', 'E', 'E', 'E', '_', 'r', '6', '0', '0', 0,
  /* 331 */ 'R', 'E', 'C', 'I', 'P', 'S', 'Q', 'R', 'T', '_', 'I', 'E', 'E', 'E', '_', 'r', '6', '0', '0', 0,
  /* 351 */ 'C', 'N', 'D', 'G', 'E', '_', 'r', '6', '0', '0', 0,
  /* 362 */ 'L', 'S', 'H', 'L', '_', 'r', '6', '0', '0', 0,
  /* 372 */ 'S', 'I', 'N', '_', 'r', '6', '0', '0', 0,
  /* 381 */ 'A', 'S', 'H', 'R', '_', 'r', '6', '0', '0', 0,
  /* 391 */ 'L', 'S', 'H', 'R', '_', 'r', '6', '0', '0', 0,
  /* 401 */ 'C', 'O', 'S', '_', 'r', '6', '0', '0', 0,
  /* 410 */ 'C', 'N', 'D', 'G', 'T', '_', 'r', '6', '0', '0', 0,
  /* 421 */ 'M', 'U', 'L', '_', 'L', 'I', 'T', '_', 'r', '6', '0', '0', 0,
  /* 434 */ 'U', 'I', 'N', 'T', '_', 'T', 'O', '_', 'F', 'L', 'T', '_', 'r', '6', '0', '0', 0,
  /* 451 */ 'M', 'U', 'L', 'H', 'I', '_', 'U', 'I', 'N', 'T', '_', 'r', '6', '0', '0', 0,
  /* 467 */ 'M', 'U', 'L', 'L', 'O', '_', 'U', 'I', 'N', 'T', '_', 'r', '6', '0', '0', 0,
  /* 483 */ 'F', 'L', 'T', '_', 'T', 'O', '_', 'U', 'I', 'N', 'T', '_', 'r', '6', '0', '0', 0,
  /* 500 */ 'R', 'E', 'C', 'I', 'P', '_', 'U', 'I', 'N', 'T', '_', 'r', '6', '0', '0', 0,
  /* 516 */ 'M', 'U', 'L', 'H', 'I', '_', 'I', 'N', 'T', '_', 'r', '6', '0', '0', 0,
  /* 531 */ 'M', 'U', 'L', 'L', 'O', '_', 'I', 'N', 'T', '_', 'r', '6', '0', '0', 0,
  /* 546 */ 'F', 'L', 'T', '_', 'T', 'O', '_', 'I', 'N', 'T', '_', 'r', '6', '0', '0', 0,
  /* 562 */ 'S', 'I', 'N', '_', 'r', '7', '0', '0', 0,
  /* 571 */ 'C', 'O', 'S', '_', 'r', '7', '0', '0', 0,
  /* 580 */ 'S', 'E', 'T', 'G', 'E', '_', 'D', 'X', '1', '0', 0,
  /* 591 */ 'S', 'E', 'T', 'N', 'E', '_', 'D', 'X', '1', '0', 0,
  /* 602 */ 'S', 'E', 'T', 'E', '_', 'D', 'X', '1', '0', 0,
  /* 612 */ 'S', 'E', 'T', 'G', 'T', '_', 'D', 'X', '1', '0', 0,
  /* 623 */ 'S', '_', 'C', 'B', 'R', 'A', 'N', 'C', 'H', '_', 'S', 'C', 'C', '0', 0,
  /* 638 */ 'I', 'N', 'T', 'E', 'R', 'P', '_', 'L', 'O', 'A', 'D', '_', 'P', '0', 0,
  /* 653 */ 'S', '_', 'C', 'B', 'R', 'A', 'N', 'C', 'H', '_', 'S', 'C', 'C', '1', 0,
  /* 668 */ 'S', '_', 'A', 'N', 'D', 'N', '2', '_', 'B', '3', '2', 0,
  /* 680 */ 'S', '_', 'O', 'R', 'N', '2', '_', 'B', '3', '2', 0,
  /* 691 */ 'D', 'S', '_', 'R', 'E', 'A', 'D', '_', 'B', '3', '2', 0,
  /* 703 */ 'S', '_', 'M', 'O', 'V', '_', 'F', 'E', 'D', '_', 'B', '3', '2', 0,
  /* 717 */ 'S', '_', 'M', 'O', 'V', 'R', 'E', 'L', 'D', '_', 'B', '3', '2', 0,
  /* 731 */ 'S', '_', 'N', 'A', 'N', 'D', '_', 'B', '3', '2', 0,
  /* 742 */ 'S', '_', 'A', 'N', 'D', '_', 'B', '3', '2', 0,
  /* 752 */ 'S', '_', 'G', 'E', 'T', 'R', 'E', 'G', '_', 'R', 'E', 'G', 'R', 'D', '_', 'B', '3', '2', 0,
  /* 771 */ 'S', '_', 'M', 'O', 'V', '_', 'R', 'E', 'G', 'R', 'D', '_', 'B', '3', '2', 0,
  /* 787 */ 'D', 'S', '_', 'W', 'R', 'I', 'T', 'E', '_', 'B', '3', '2', 0,
  /* 800 */ 'V', '_', 'A', 'L', 'I', 'G', 'N', 'B', 'Y', 'T', 'E', '_', 'B', '3', '2', 0,
  /* 816 */ 'S', '_', 'G', 'E', 'T', 'R', 'E', 'G', '_', 'B', '3', '2', 0,
  /* 829 */ 'S', '_', 'S', 'E', 'T', 'R', 'E', 'G', '_', 'B', '3', '2', 0,
  /* 842 */ 'V', '_', 'B', 'F', 'I', '_', 'B', '3', '2', 0,
  /* 852 */ 'S', '_', 'Q', 'U', 'A', 'D', 'M', 'A', 'S', 'K', '_', 'B', '3', '2', 0,
  /* 867 */ 'S', '_', 'L', 'S', 'H', 'L', '_', 'B', '3', '2', 0,
  /* 878 */ 'S', '_', 'B', 'F', 'M', '_', 'B', '3', '2', 0,
  /* 888 */ 'S', '_', 'W', 'Q', 'M', '_', 'B', '3', '2', 0,
  /* 898 */ 'S', '_', 'L', 'S', 'H', 'R', '_', 'B', '3', '2', 0,
  /* 909 */ 'S', '_', 'X', 'N', 'O', 'R', '_', 'B', '3', '2', 0,
  /* 920 */ 'S', '_', 'N', 'O', 'R', '_', 'B', '3', '2', 0,
  /* 930 */ 'S', '_', 'X', 'O', 'R', '_', 'B', '3', '2', 0,
  /* 940 */ 'S', '_', 'O', 'R', '_', 'B', '3', '2', 0,
  /* 949 */ 'S', '_', 'M', 'O', 'V', 'R', 'E', 'L', 'S', '_', 'B', '3', '2', 0,
  /* 963 */ 'S', '_', 'C', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'B', '3', '2', 0,
  /* 977 */ 'V', '_', 'A', 'L', 'I', 'G', 'N', 'B', 'I', 'T', '_', 'B', '3', '2', 0,
  /* 992 */ 'S', '_', 'N', 'O', 'T', '_', 'B', '3', '2', 0,
  /* 1002 */ 'S', '_', 'B', 'R', 'E', 'V', '_', 'B', '3', '2', 0,
  /* 1013 */ 'S', '_', 'C', 'M', 'O', 'V', '_', 'B', '3', '2', 0,
  /* 1024 */ 'S', '_', 'M', 'O', 'V', '_', 'B', '3', '2', 0,
  /* 1034 */ 'V', '_', 'I', 'N', 'T', 'E', 'R', 'P', '_', 'P', '1', '_', 'F', '3', '2', 0,
  /* 1050 */ 'V', '_', 'I', 'N', 'T', 'E', 'R', 'P', '_', 'P', '2', '_', 'F', '3', '2', 0,
  /* 1066 */ 'V', '_', 'C', 'U', 'B', 'E', 'M', 'A', '_', 'F', '3', '2', 0,
  /* 1079 */ 'V', '_', 'F', 'M', 'A', '_', 'F', '3', '2', 0,
  /* 1089 */ 'V', '_', 'C', 'U', 'B', 'E', 'S', 'C', '_', 'F', '3', '2', 0,
  /* 1102 */ 'V', '_', 'C', 'U', 'B', 'E', 'T', 'C', '_', 'F', '3', '2', 0,
  /* 1115 */ 'V', '_', 'M', 'A', 'D', '_', 'F', '3', '2', 0,
  /* 1125 */ 'V', '_', 'C', 'U', 'B', 'E', 'I', 'D', '_', 'F', '3', '2', 0,
  /* 1138 */ 'V', '_', 'D', 'I', 'V', '_', 'S', 'C', 'A', 'L', 'E', '_', 'F', '3', '2', 0,
  /* 1154 */ 'M', 'O', 'V', '_', 'I', 'M', 'M', '_', 'F', '3', '2', 0,
  /* 1166 */ 'V', '_', 'D', 'I', 'V', '_', 'F', 'I', 'X', 'U', 'P', '_', 'F', '3', '2', 0,
  /* 1182 */ 'V', '_', 'D', 'I', 'V', '_', 'F', 'M', 'A', 'S', '_', 'F', '3', '2', 0,
  /* 1197 */ 'V', '_', 'M', 'U', 'L', 'L', 'I', 'T', '_', 'F', '3', '2', 0,
  /* 1210 */ 'V', '_', 'I', 'N', 'T', 'E', 'R', 'P', '_', 'M', 'O', 'V', '_', 'F', '3', '2', 0,
  /* 1227 */ 'V', '_', 'M', 'A', 'D', '_', 'L', 'E', 'G', 'A', 'C', 'Y', '_', 'F', '3', '2', 0,
  /* 1244 */ 'S', '_', 'S', 'U', 'B', '_', 'I', '3', '2', 0,
  /* 1254 */ 'S', '_', 'A', 'D', 'D', '_', 'I', '3', '2', 0,
  /* 1264 */ 'S', '_', 'B', 'F', 'E', '_', 'I', '3', '2', 0,
  /* 1274 */ 'V', '_', 'B', 'F', 'E', '_', 'I', '3', '2', 0,
  /* 1284 */ 'S', '_', 'C', 'M', 'P', 'K', '_', 'G', 'E', '_', 'I', '3', '2', 0,
  /* 1298 */ 'S', '_', 'C', 'M', 'P', '_', 'G', 'E', '_', 'I', '3', '2', 0,
  /* 1311 */ 'S', '_', 'C', 'M', 'P', 'K', '_', 'L', 'E', '_', 'I', '3', '2', 0,
  /* 1325 */ 'S', '_', 'C', 'M', 'P', '_', 'L', 'E', '_', 'I', '3', '2', 0,
  /* 1338 */ 'S', '_', 'A', 'B', 'S', 'D', 'I', 'F', 'F', '_', 'I', '3', '2', 0,
  /* 1352 */ 'S', '_', 'C', 'M', 'P', 'K', '_', 'L', 'G', '_', 'I', '3', '2', 0,
  /* 1366 */ 'S', '_', 'C', 'M', 'P', '_', 'L', 'G', '_', 'I', '3', '2', 0,
  /* 1379 */ 'V', '_', 'M', 'U', 'L', '_', 'H', 'I', '_', 'I', '3', '2', 0,
  /* 1392 */ 'S', '_', 'A', 'D', 'D', 'K', '_', 'I', '3', '2', 0,
  /* 1403 */ 'S', '_', 'M', 'U', 'L', 'K', '_', 'I', '3', '2', 0,
  /* 1414 */ 'S', '_', 'C', 'M', 'O', 'V', 'K', '_', 'I', '3', '2', 0,
  /* 1426 */ 'S', '_', 'M', 'O', 'V', 'K', '_', 'I', '3', '2', 0,
  /* 1437 */ 'S', '_', 'M', 'U', 'L', '_', 'I', '3', '2', 0,
  /* 1447 */ 'M', 'O', 'V', '_', 'I', 'M', 'M', '_', 'I', '3', '2', 0,
  /* 1459 */ 'S', '_', 'M', 'I', 'N', '_', 'I', '3', '2', 0,
  /* 1469 */ 'V', '_', 'M', 'U', 'L', '_', 'L', 'O', '_', 'I', '3', '2', 0,
  /* 1482 */ 'S', '_', 'C', 'M', 'P', '_', 'E', 'Q', '_', 'I', '3', '2', 0,
  /* 1495 */ 'S', '_', 'A', 'S', 'H', 'R', '_', 'I', '3', '2', 0,
  /* 1506 */ 'S', '_', 'A', 'B', 'S', '_', 'I', '3', '2', 0,
  /* 1516 */ 'S', '_', 'C', 'M', 'P', 'K', '_', 'G', 'T', '_', 'I', '3', '2', 0,
  /* 1530 */ 'S', '_', 'C', 'M', 'P', '_', 'G', 'T', '_', 'I', '3', '2', 0,
  /* 1543 */ 'S', '_', 'F', 'L', 'B', 'I', 'T', '_', 'I', '3', '2', 0,
  /* 1555 */ 'S', '_', 'C', 'M', 'P', 'K', '_', 'L', 'T', '_', 'I', '3', '2', 0,
  /* 1569 */ 'S', '_', 'C', 'M', 'P', '_', 'L', 'T', '_', 'I', '3', '2', 0,
  /* 1582 */ 'S', '_', 'M', 'A', 'X', '_', 'I', '3', '2', 0,
  /* 1592 */ 'S', '_', 'S', 'U', 'B', 'B', '_', 'U', '3', '2', 0,
  /* 1603 */ 'S', '_', 'S', 'U', 'B', '_', 'U', '3', '2', 0,
  /* 1613 */ 'S', '_', 'A', 'D', 'D', 'C', '_', 'U', '3', '2', 0,
  /* 1624 */ 'V', '_', 'S', 'A', 'D', '_', 'U', '3', '2', 0,
  /* 1634 */ 'S', '_', 'A', 'D', 'D', '_', 'U', '3', '2', 0,
  /* 1644 */ 'S', '_', 'B', 'F', 'E', '_', 'U', '3', '2', 0,
  /* 1654 */ 'V', '_', 'B', 'F', 'E', '_', 'U', '3', '2', 0,
  /* 1664 */ 'S', '_', 'C', 'M', 'P', 'K', '_', 'G', 'E', '_', 'U', '3', '2', 0,
  /* 1678 */ 'S', '_', 'C', 'M', 'P', '_', 'G', 'E', '_', 'U', '3', '2', 0,
  /* 1691 */ 'S', '_', 'C', 'M', 'P', 'K', '_', 'L', 'E', '_', 'U', '3', '2', 0,
  /* 1705 */ 'S', '_', 'C', 'M', 'P', '_', 'L', 'E', '_', 'U', '3', '2', 0,
  /* 1718 */ 'S', '_', 'C', 'M', 'P', 'K', '_', 'L', 'G', '_', 'U', '3', '2', 0,
  /* 1732 */ 'S', '_', 'C', 'M', 'P', '_', 'L', 'G', '_', 'U', '3', '2', 0,
  /* 1745 */ 'V', '_', 'M', 'U', 'L', '_', 'H', 'I', '_', 'U', '3', '2', 0,
  /* 1758 */ 'S', '_', 'M', 'I', 'N', '_', 'U', '3', '2', 0,
  /* 1768 */ 'V', '_', 'M', 'U', 'L', '_', 'L', 'O', '_', 'U', '3', '2', 0,
  /* 1781 */ 'S', '_', 'C', 'M', 'P', 'K', '_', 'E', 'Q', '_', 'U', '3', '2', 0,
  /* 1795 */ 'S', '_', 'C', 'M', 'P', '_', 'E', 'Q', '_', 'U', '3', '2', 0,
  /* 1808 */ 'S', '_', 'C', 'M', 'P', 'K', '_', 'G', 'T', '_', 'U', '3', '2', 0,
  /* 1822 */ 'S', '_', 'C', 'M', 'P', '_', 'G', 'T', '_', 'U', '3', '2', 0,
  /* 1835 */ 'S', '_', 'C', 'M', 'P', 'K', '_', 'L', 'T', '_', 'U', '3', '2', 0,
  /* 1849 */ 'S', '_', 'C', 'M', 'P', '_', 'L', 'T', '_', 'U', '3', '2', 0,
  /* 1862 */ 'S', '_', 'M', 'A', 'X', '_', 'U', '3', '2', 0,
  /* 1872 */ 'V', '_', 'M', 'B', 'C', 'N', 'T', '_', 'H', 'I', '_', 'U', '3', '2', '_', 'B', '3', '2', '_', 'e', '3', '2', 0,
  /* 1895 */ 'V', '_', 'M', 'B', 'C', 'N', 'T', '_', 'L', 'O', '_', 'U', '3', '2', '_', 'B', '3', '2', '_', 'e', '3', '2', 0,
  /* 1918 */ 'V', '_', 'M', 'O', 'V', '_', 'F', 'E', 'D', '_', 'B', '3', '2', '_', 'e', '3', '2', 0,
  /* 1936 */ 'V', '_', 'M', 'O', 'V', 'R', 'E', 'L', 'D', '_', 'B', '3', '2', '_', 'e', '3', '2', 0,
  /* 1954 */ 'V', '_', 'A', 'N', 'D', '_', 'B', '3', '2', '_', 'e', '3', '2', 0,
  /* 1968 */ 'V', '_', 'M', 'O', 'V', 'R', 'E', 'L', 'S', 'D', '_', 'B', '3', '2', '_', 'e', '3', '2', 0,
  /* 1987 */ 'V', '_', 'R', 'E', 'A', 'D', 'L', 'A', 'N', 'E', '_', 'B', '3', '2', '_', 'e', '3', '2', 0,
  /* 2006 */ 'V', '_', 'W', 'R', 'I', 'T', 'E', 'L', 'A', 'N', 'E', '_', 'B', '3', '2', '_', 'e', '3', '2', 0,
  /* 2026 */ 'V', '_', 'R', 'E', 'A', 'D', 'F', 'I', 'R', 'S', 'T', 'L', 'A', 'N', 'E', '_', 'B', '3', '2', '_', 'e', '3', '2', 0,
  /* 2050 */ 'V', '_', 'C', 'N', 'D', 'M', 'A', 'S', 'K', '_', 'B', '3', '2', '_', 'e', '3', '2', 0,
  /* 2068 */ 'V', '_', 'F', 'F', 'B', 'L', '_', 'B', '3', '2', '_', 'e', '3', '2', 0,
  /* 2083 */ 'V', '_', 'L', 'S', 'H', 'L', '_', 'B', '3', '2', '_', 'e', '3', '2', 0,
  /* 2098 */ 'V', '_', 'B', 'F', 'M', '_', 'B', '3', '2', '_', 'e', '3', '2', 0,
  /* 2112 */ 'V', '_', 'L', 'S', 'H', 'R', '_', 'B', '3', '2', '_', 'e', '3', '2', 0,
  /* 2127 */ 'V', '_', 'X', 'O', 'R', '_', 'B', '3', '2', '_', 'e', '3', '2', 0,
  /* 2141 */ 'V', '_', 'O', 'R', '_', 'B', '3', '2', '_', 'e', '3', '2', 0,
  /* 2154 */ 'V', '_', 'M', 'O', 'V', 'R', 'E', 'L', 'S', '_', 'B', '3', '2', '_', 'e', '3', '2', 0,
  /* 2172 */ 'V', '_', 'N', 'O', 'T', '_', 'B', '3', '2', '_', 'e', '3', '2', 0,
  /* 2186 */ 'V', '_', 'B', 'F', 'R', 'E', 'V', '_', 'B', '3', '2', '_', 'e', '3', '2', 0,
  /* 2202 */ 'V', '_', 'L', 'S', 'H', 'L', 'R', 'E', 'V', '_', 'B', '3', '2', '_', 'e', '3', '2', 0,
  /* 2220 */ 'V', '_', 'L', 'S', 'H', 'R', 'R', 'E', 'V', '_', 'B', '3', '2', '_', 'e', '3', '2', 0,
  /* 2238 */ 'V', '_', 'M', 'O', 'V', '_', 'B', '3', '2', '_', 'e', '3', '2', 0,
  /* 2252 */ 'V', '_', 'C', 'V', 'T', '_', 'I', '3', '2', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2270 */ 'V', '_', 'C', 'V', 'T', '_', 'U', '3', '2', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2288 */ 'V', '_', 'C', 'V', 'T', '_', 'P', 'K', 'R', 'T', 'Z', '_', 'F', '1', '6', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2312 */ 'V', '_', 'S', 'U', 'B', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2326 */ 'V', '_', 'M', 'A', 'C', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2340 */ 'V', '_', 'T', 'R', 'U', 'N', 'C', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2356 */ 'V', '_', 'A', 'D', 'D', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2370 */ 'V', '_', 'C', 'M', 'P', '_', 'N', 'G', 'E', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2388 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'N', 'G', 'E', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2407 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'N', 'G', 'E', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2426 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'N', 'G', 'E', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2446 */ 'V', '_', 'C', 'M', 'P', '_', 'G', 'E', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2463 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'G', 'E', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2481 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'G', 'E', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2499 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'G', 'E', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2518 */ 'V', '_', 'C', 'M', 'P', '_', 'N', 'L', 'E', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2536 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'N', 'L', 'E', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2555 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'N', 'L', 'E', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2574 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'N', 'L', 'E', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2594 */ 'V', '_', 'C', 'M', 'P', '_', 'L', 'E', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2611 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'L', 'E', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2629 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'L', 'E', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2647 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'L', 'E', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2666 */ 'V', '_', 'R', 'N', 'D', 'N', 'E', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2682 */ 'V', '_', 'C', 'M', 'P', '_', 'F', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2698 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'F', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2715 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'F', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2732 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'F', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2750 */ 'V', '_', 'R', 'C', 'P', '_', 'I', 'F', 'L', 'A', 'G', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2770 */ 'V', '_', 'C', 'M', 'P', '_', 'N', 'L', 'G', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2788 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'N', 'L', 'G', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2807 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'N', 'L', 'G', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2826 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'N', 'L', 'G', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2846 */ 'V', '_', 'C', 'M', 'P', '_', 'L', 'G', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2863 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'L', 'G', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2881 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'L', 'G', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2899 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'L', 'G', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2918 */ 'V', '_', 'L', 'O', 'G', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2932 */ 'V', '_', 'M', 'A', 'D', 'A', 'K', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2948 */ 'V', '_', 'M', 'A', 'D', 'M', 'K', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2964 */ 'V', '_', 'C', 'E', 'I', 'L', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2979 */ 'V', '_', 'M', 'U', 'L', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 2993 */ 'V', '_', 'M', 'I', 'N', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3007 */ 'V', '_', 'S', 'I', 'N', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3021 */ 'V', '_', 'C', 'M', 'P', '_', 'O', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3037 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'O', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3054 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'O', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3071 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'O', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3089 */ 'V', '_', 'R', 'C', 'P', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3103 */ 'V', '_', 'L', 'O', 'G', '_', 'C', 'L', 'A', 'M', 'P', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3123 */ 'V', '_', 'R', 'C', 'P', '_', 'C', 'L', 'A', 'M', 'P', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3143 */ 'V', '_', 'R', 'S', 'Q', '_', 'C', 'L', 'A', 'M', 'P', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3163 */ 'V', '_', 'L', 'D', 'E', 'X', 'P', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3179 */ 'V', '_', 'E', 'X', 'P', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3193 */ 'V', '_', 'C', 'M', 'P', '_', 'N', 'E', 'Q', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3211 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'N', 'E', 'Q', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3230 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'N', 'E', 'Q', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3249 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'N', 'E', 'Q', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3269 */ 'V', '_', 'C', 'M', 'P', '_', 'E', 'Q', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3286 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'E', 'Q', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3304 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'E', 'Q', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3322 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'E', 'Q', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3341 */ 'V', '_', 'R', 'S', 'Q', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3355 */ 'V', '_', 'F', 'L', 'O', 'O', 'R', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3371 */ 'V', '_', 'C', 'O', 'S', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3385 */ 'V', '_', 'C', 'M', 'P', '_', 'C', 'L', 'A', 'S', 'S', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3405 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'C', 'L', 'A', 'S', 'S', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3426 */ 'V', '_', 'F', 'R', 'A', 'C', 'T', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3442 */ 'V', '_', 'C', 'M', 'P', '_', 'N', 'G', 'T', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3460 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'N', 'G', 'T', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3479 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'N', 'G', 'T', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3498 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'N', 'G', 'T', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3518 */ 'V', '_', 'C', 'M', 'P', '_', 'G', 'T', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3535 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'G', 'T', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3553 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'G', 'T', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3571 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'G', 'T', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3590 */ 'V', '_', 'C', 'M', 'P', '_', 'N', 'L', 'T', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3608 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'N', 'L', 'T', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3627 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'N', 'L', 'T', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3646 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'N', 'L', 'T', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3666 */ 'V', '_', 'C', 'M', 'P', '_', 'L', 'T', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3683 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'L', 'T', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3701 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'L', 'T', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3719 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'L', 'T', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3738 */ 'V', '_', 'F', 'R', 'E', 'X', 'P', '_', 'M', 'A', 'N', 'T', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3759 */ 'V', '_', 'S', 'Q', 'R', 'T', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3774 */ 'V', '_', 'C', 'M', 'P', '_', 'T', 'R', 'U', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3792 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'T', 'R', 'U', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3811 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'T', 'R', 'U', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3830 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'T', 'R', 'U', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3850 */ 'V', '_', 'C', 'M', 'P', '_', 'U', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3866 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'U', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3883 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'U', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3900 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'U', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3918 */ 'V', '_', 'S', 'U', 'B', 'R', 'E', 'V', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3935 */ 'V', '_', 'M', 'A', 'X', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3949 */ 'V', '_', 'M', 'A', 'C', '_', 'L', 'E', 'G', 'A', 'C', 'Y', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3970 */ 'V', '_', 'M', 'U', 'L', '_', 'L', 'E', 'G', 'A', 'C', 'Y', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 3991 */ 'V', '_', 'M', 'I', 'N', '_', 'L', 'E', 'G', 'A', 'C', 'Y', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 4012 */ 'V', '_', 'R', 'C', 'P', '_', 'L', 'E', 'G', 'A', 'C', 'Y', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 4033 */ 'V', '_', 'R', 'S', 'Q', '_', 'L', 'E', 'G', 'A', 'C', 'Y', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 4054 */ 'V', '_', 'M', 'A', 'X', '_', 'L', 'E', 'G', 'A', 'C', 'Y', '_', 'F', '3', '2', '_', 'e', '3', '2', 0,
  /* 4075 */ 'V', '_', 'C', 'V', 'T', '_', 'F', '3', '2', '_', 'I', '3', '2', '_', 'e', '3', '2', 0,
  /* 4093 */ 'V', '_', 'S', 'U', 'B', '_', 'I', '3', '2', '_', 'e', '3', '2', 0,
  /* 4107 */ 'V', '_', 'A', 'D', 'D', '_', 'I', '3', '2', '_', 'e', '3', '2', 0,
  /* 4121 */ 'V', '_', 'C', 'M', 'P', '_', 'G', 'E', '_', 'I', '3', '2', '_', 'e', '3', '2', 0,
  /* 4138 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'G', 'E', '_', 'I', '3', '2', '_', 'e', '3', '2', 0,
  /* 4156 */ 'V', '_', 'C', 'M', 'P', '_', 'L', 'E', '_', 'I', '3', '2', '_', 'e', '3', '2', 0,
  /* 4173 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'L', 'E', '_', 'I', '3', '2', '_', 'e', '3', '2', 0,
  /* 4191 */ 'V', '_', 'C', 'M', 'P', '_', 'N', 'E', '_', 'I', '3', '2', '_', 'e', '3', '2', 0,
  /* 4208 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'N', 'E', '_', 'I', '3', '2', '_', 'e', '3', '2', 0,
  /* 4226 */ 'V', '_', 'C', 'M', 'P', '_', 'F', '_', 'I', '3', '2', '_', 'e', '3', '2', 0,
  /* 4242 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'F', '_', 'I', '3', '2', '_', 'e', '3', '2', 0,
  /* 4259 */ 'V', '_', 'F', 'F', 'B', 'H', '_', 'I', '3', '2', '_', 'e', '3', '2', 0,
  /* 4274 */ 'V', '_', 'M', 'I', 'N', '_', 'I', '3', '2', '_', 'e', '3', '2', 0,
  /* 4288 */ 'V', '_', 'C', 'M', 'P', '_', 'E', 'Q', '_', 'I', '3', '2', '_', 'e', '3', '2', 0,
  /* 4305 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'E', 'Q', '_', 'I', '3', '2', '_', 'e', '3', '2', 0,
  /* 4323 */ 'V', '_', 'A', 'S', 'H', 'R', '_', 'I', '3', '2', '_', 'e', '3', '2', 0,
  /* 4338 */ 'V', '_', 'C', 'M', 'P', '_', 'G', 'T', '_', 'I', '3', '2', '_', 'e', '3', '2', 0,
  /* 4355 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'G', 'T', '_', 'I', '3', '2', '_', 'e', '3', '2', 0,
  /* 4373 */ 'V', '_', 'C', 'M', 'P', '_', 'L', 'T', '_', 'I', '3', '2', '_', 'e', '3', '2', 0,
  /* 4390 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'L', 'T', '_', 'I', '3', '2', '_', 'e', '3', '2', 0,
  /* 4408 */ 'V', '_', 'C', 'M', 'P', '_', 'T', '_', 'I', '3', '2', '_', 'e', '3', '2', 0,
  /* 4424 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'T', '_', 'I', '3', '2', '_', 'e', '3', '2', 0,
  /* 4441 */ 'V', '_', 'S', 'U', 'B', 'R', 'E', 'V', '_', 'I', '3', '2', '_', 'e', '3', '2', 0,
  /* 4458 */ 'V', '_', 'A', 'S', 'H', 'R', 'R', 'E', 'V', '_', 'I', '3', '2', '_', 'e', '3', '2', 0,
  /* 4476 */ 'V', '_', 'M', 'A', 'X', '_', 'I', '3', '2', '_', 'e', '3', '2', 0,
  /* 4490 */ 'V', '_', 'C', 'V', 'T', '_', 'F', '3', '2', '_', 'U', '3', '2', '_', 'e', '3', '2', 0,
  /* 4508 */ 'V', '_', 'S', 'U', 'B', 'B', '_', 'U', '3', '2', '_', 'e', '3', '2', 0,
  /* 4523 */ 'V', '_', 'A', 'D', 'D', 'C', '_', 'U', '3', '2', '_', 'e', '3', '2', 0,
  /* 4538 */ 'V', '_', 'C', 'M', 'P', '_', 'G', 'E', '_', 'U', '3', '2', '_', 'e', '3', '2', 0,
  /* 4555 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'G', 'E', '_', 'U', '3', '2', '_', 'e', '3', '2', 0,
  /* 4573 */ 'V', '_', 'C', 'M', 'P', '_', 'L', 'E', '_', 'U', '3', '2', '_', 'e', '3', '2', 0,
  /* 4590 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'L', 'E', '_', 'U', '3', '2', '_', 'e', '3', '2', 0,
  /* 4608 */ 'V', '_', 'C', 'M', 'P', '_', 'N', 'E', '_', 'U', '3', '2', '_', 'e', '3', '2', 0,
  /* 4625 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'N', 'E', '_', 'U', '3', '2', '_', 'e', '3', '2', 0,
  /* 4643 */ 'V', '_', 'C', 'M', 'P', '_', 'F', '_', 'U', '3', '2', '_', 'e', '3', '2', 0,
  /* 4659 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'F', '_', 'U', '3', '2', '_', 'e', '3', '2', 0,
  /* 4676 */ 'V', '_', 'F', 'F', 'B', 'H', '_', 'U', '3', '2', '_', 'e', '3', '2', 0,
  /* 4691 */ 'V', '_', 'M', 'I', 'N', '_', 'U', '3', '2', '_', 'e', '3', '2', 0,
  /* 4705 */ 'V', '_', 'C', 'M', 'P', '_', 'E', 'Q', '_', 'U', '3', '2', '_', 'e', '3', '2', 0,
  /* 4722 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'E', 'Q', '_', 'U', '3', '2', '_', 'e', '3', '2', 0,
  /* 4740 */ 'V', '_', 'C', 'M', 'P', '_', 'G', 'T', '_', 'U', '3', '2', '_', 'e', '3', '2', 0,
  /* 4757 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'G', 'T', '_', 'U', '3', '2', '_', 'e', '3', '2', 0,
  /* 4775 */ 'V', '_', 'C', 'M', 'P', '_', 'L', 'T', '_', 'U', '3', '2', '_', 'e', '3', '2', 0,
  /* 4792 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'L', 'T', '_', 'U', '3', '2', '_', 'e', '3', '2', 0,
  /* 4810 */ 'V', '_', 'C', 'M', 'P', '_', 'T', '_', 'U', '3', '2', '_', 'e', '3', '2', 0,
  /* 4826 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'T', '_', 'U', '3', '2', '_', 'e', '3', '2', 0,
  /* 4843 */ 'V', '_', 'S', 'U', 'B', 'B', 'R', 'E', 'V', '_', 'U', '3', '2', '_', 'e', '3', '2', 0,
  /* 4861 */ 'V', '_', 'M', 'A', 'X', '_', 'U', '3', '2', '_', 'e', '3', '2', 0,
  /* 4875 */ 'V', '_', 'M', 'U', 'L', '_', 'I', '3', '2', '_', 'I', '2', '4', '_', 'e', '3', '2', 0,
  /* 4893 */ 'V', '_', 'M', 'U', 'L', '_', 'U', '3', '2', '_', 'U', '2', '4', '_', 'e', '3', '2', 0,
  /* 4911 */ 'V', '_', 'C', 'M', 'P', '_', 'N', 'G', 'E', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 4929 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'N', 'G', 'E', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 4948 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'N', 'G', 'E', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 4967 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'N', 'G', 'E', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 4987 */ 'V', '_', 'C', 'M', 'P', '_', 'G', 'E', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5004 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'G', 'E', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5022 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'G', 'E', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5040 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'G', 'E', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5059 */ 'V', '_', 'C', 'M', 'P', '_', 'N', 'L', 'E', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5077 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'N', 'L', 'E', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5096 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'N', 'L', 'E', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5115 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'N', 'L', 'E', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5135 */ 'V', '_', 'C', 'M', 'P', '_', 'L', 'E', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5152 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'L', 'E', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5170 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'L', 'E', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5188 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'L', 'E', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5207 */ 'V', '_', 'C', 'M', 'P', '_', 'F', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5223 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'F', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5240 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'F', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5257 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'F', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5275 */ 'V', '_', 'C', 'M', 'P', '_', 'N', 'L', 'G', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5293 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'N', 'L', 'G', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5312 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'N', 'L', 'G', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5331 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'N', 'L', 'G', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5351 */ 'V', '_', 'C', 'M', 'P', '_', 'L', 'G', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5368 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'L', 'G', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5386 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'L', 'G', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5404 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'L', 'G', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5423 */ 'V', '_', 'C', 'M', 'P', '_', 'O', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5439 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'O', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5456 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'O', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5473 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'O', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5491 */ 'V', '_', 'R', 'C', 'P', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5505 */ 'V', '_', 'R', 'C', 'P', '_', 'C', 'L', 'A', 'M', 'P', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5525 */ 'V', '_', 'R', 'S', 'Q', '_', 'C', 'L', 'A', 'M', 'P', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5545 */ 'V', '_', 'C', 'M', 'P', '_', 'N', 'E', 'Q', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5563 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'N', 'E', 'Q', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5582 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'N', 'E', 'Q', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5601 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'N', 'E', 'Q', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5621 */ 'V', '_', 'C', 'M', 'P', '_', 'E', 'Q', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5638 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'E', 'Q', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5656 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'E', 'Q', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5674 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'E', 'Q', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5693 */ 'V', '_', 'R', 'S', 'Q', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5707 */ 'V', '_', 'C', 'M', 'P', '_', 'C', 'L', 'A', 'S', 'S', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5727 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'C', 'L', 'A', 'S', 'S', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5748 */ 'V', '_', 'F', 'R', 'A', 'C', 'T', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5764 */ 'V', '_', 'C', 'M', 'P', '_', 'N', 'G', 'T', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5782 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'N', 'G', 'T', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5801 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'N', 'G', 'T', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5820 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'N', 'G', 'T', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5840 */ 'V', '_', 'C', 'M', 'P', '_', 'G', 'T', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5857 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'G', 'T', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5875 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'G', 'T', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5893 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'G', 'T', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5912 */ 'V', '_', 'C', 'M', 'P', '_', 'N', 'L', 'T', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5930 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'N', 'L', 'T', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5949 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'N', 'L', 'T', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5968 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'N', 'L', 'T', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 5988 */ 'V', '_', 'C', 'M', 'P', '_', 'L', 'T', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 6005 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'L', 'T', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 6023 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'L', 'T', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 6041 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'L', 'T', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 6060 */ 'V', '_', 'F', 'R', 'E', 'X', 'P', '_', 'M', 'A', 'N', 'T', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 6081 */ 'V', '_', 'S', 'Q', 'R', 'T', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 6096 */ 'V', '_', 'C', 'M', 'P', '_', 'T', 'R', 'U', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 6114 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'T', 'R', 'U', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 6133 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'T', 'R', 'U', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 6152 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'T', 'R', 'U', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 6172 */ 'V', '_', 'C', 'M', 'P', '_', 'U', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 6188 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'U', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 6205 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'U', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 6222 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'U', '_', 'F', '6', '4', '_', 'e', '3', '2', 0,
  /* 6240 */ 'V', '_', 'C', 'M', 'P', '_', 'G', 'E', '_', 'I', '6', '4', '_', 'e', '3', '2', 0,
  /* 6257 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'G', 'E', '_', 'I', '6', '4', '_', 'e', '3', '2', 0,
  /* 6275 */ 'V', '_', 'C', 'M', 'P', '_', 'L', 'E', '_', 'I', '6', '4', '_', 'e', '3', '2', 0,
  /* 6292 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'L', 'E', '_', 'I', '6', '4', '_', 'e', '3', '2', 0,
  /* 6310 */ 'V', '_', 'C', 'M', 'P', '_', 'N', 'E', '_', 'I', '6', '4', '_', 'e', '3', '2', 0,
  /* 6327 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'N', 'E', '_', 'I', '6', '4', '_', 'e', '3', '2', 0,
  /* 6345 */ 'V', '_', 'C', 'M', 'P', '_', 'F', '_', 'I', '6', '4', '_', 'e', '3', '2', 0,
  /* 6361 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'F', '_', 'I', '6', '4', '_', 'e', '3', '2', 0,
  /* 6378 */ 'V', '_', 'C', 'M', 'P', '_', 'E', 'Q', '_', 'I', '6', '4', '_', 'e', '3', '2', 0,
  /* 6395 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'E', 'Q', '_', 'I', '6', '4', '_', 'e', '3', '2', 0,
  /* 6413 */ 'V', '_', 'C', 'M', 'P', '_', 'G', 'T', '_', 'I', '6', '4', '_', 'e', '3', '2', 0,
  /* 6430 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'G', 'T', '_', 'I', '6', '4', '_', 'e', '3', '2', 0,
  /* 6448 */ 'V', '_', 'C', 'M', 'P', '_', 'L', 'T', '_', 'I', '6', '4', '_', 'e', '3', '2', 0,
  /* 6465 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'L', 'T', '_', 'I', '6', '4', '_', 'e', '3', '2', 0,
  /* 6483 */ 'V', '_', 'C', 'M', 'P', '_', 'T', '_', 'I', '6', '4', '_', 'e', '3', '2', 0,
  /* 6499 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'T', '_', 'I', '6', '4', '_', 'e', '3', '2', 0,
  /* 6516 */ 'V', '_', 'C', 'M', 'P', '_', 'G', 'E', '_', 'U', '6', '4', '_', 'e', '3', '2', 0,
  /* 6533 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'G', 'E', '_', 'U', '6', '4', '_', 'e', '3', '2', 0,
  /* 6551 */ 'V', '_', 'C', 'M', 'P', '_', 'L', 'E', '_', 'U', '6', '4', '_', 'e', '3', '2', 0,
  /* 6568 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'L', 'E', '_', 'U', '6', '4', '_', 'e', '3', '2', 0,
  /* 6586 */ 'V', '_', 'C', 'M', 'P', '_', 'N', 'E', '_', 'U', '6', '4', '_', 'e', '3', '2', 0,
  /* 6603 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'N', 'E', '_', 'U', '6', '4', '_', 'e', '3', '2', 0,
  /* 6621 */ 'V', '_', 'C', 'M', 'P', '_', 'F', '_', 'U', '6', '4', '_', 'e', '3', '2', 0,
  /* 6637 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'F', '_', 'U', '6', '4', '_', 'e', '3', '2', 0,
  /* 6654 */ 'V', '_', 'C', 'M', 'P', '_', 'E', 'Q', '_', 'U', '6', '4', '_', 'e', '3', '2', 0,
  /* 6671 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'E', 'Q', '_', 'U', '6', '4', '_', 'e', '3', '2', 0,
  /* 6689 */ 'V', '_', 'C', 'M', 'P', '_', 'G', 'T', '_', 'U', '6', '4', '_', 'e', '3', '2', 0,
  /* 6706 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'G', 'T', '_', 'U', '6', '4', '_', 'e', '3', '2', 0,
  /* 6724 */ 'V', '_', 'C', 'M', 'P', '_', 'L', 'T', '_', 'U', '6', '4', '_', 'e', '3', '2', 0,
  /* 6741 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'L', 'T', '_', 'U', '6', '4', '_', 'e', '3', '2', 0,
  /* 6759 */ 'V', '_', 'C', 'M', 'P', '_', 'T', '_', 'U', '6', '4', '_', 'e', '3', '2', 0,
  /* 6775 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'T', '_', 'U', '6', '4', '_', 'e', '3', '2', 0,
  /* 6792 */ 'C', 'O', 'N', 'T', 'I', 'N', 'U', 'E', 'C', '_', 'f', '3', '2', 0,
  /* 6806 */ 'I', 'F', 'C', '_', 'f', '3', '2', 0,
  /* 6814 */ 'B', 'R', 'E', 'A', 'K', 'C', '_', 'f', '3', '2', 0,
  /* 6825 */ 'B', 'R', 'A', 'N', 'C', 'H', '_', 'C', 'O', 'N', 'D', '_', 'f', '3', '2', 0,
  /* 6841 */ 'C', 'O', 'N', 'T', 'I', 'N', 'U', 'E', '_', 'L', 'O', 'G', 'I', 'C', 'A', 'L', 'Z', '_', 'f', '3', '2', 0,
  /* 6863 */ 'I', 'F', '_', 'L', 'O', 'G', 'I', 'C', 'A', 'L', 'Z', '_', 'f', '3', '2', 0,
  /* 6879 */ 'B', 'R', 'E', 'A', 'K', '_', 'L', 'O', 'G', 'I', 'C', 'A', 'L', 'Z', '_', 'f', '3', '2', 0,
  /* 6898 */ 'C', 'O', 'N', 'T', 'I', 'N', 'U', 'E', '_', 'L', 'O', 'G', 'I', 'C', 'A', 'L', 'N', 'Z', '_', 'f', '3', '2', 0,
  /* 6921 */ 'I', 'F', '_', 'L', 'O', 'G', 'I', 'C', 'A', 'L', 'N', 'Z', '_', 'f', '3', '2', 0,
  /* 6938 */ 'B', 'R', 'E', 'A', 'K', '_', 'L', 'O', 'G', 'I', 'C', 'A', 'L', 'N', 'Z', '_', 'f', '3', '2', 0,
  /* 6958 */ 'C', 'O', 'N', 'T', 'I', 'N', 'U', 'E', 'C', '_', 'i', '3', '2', 0,
  /* 6972 */ 'I', 'F', 'C', '_', 'i', '3', '2', 0,
  /* 6980 */ 'B', 'R', 'E', 'A', 'K', 'C', '_', 'i', '3', '2', 0,
  /* 6991 */ 'B', 'R', 'A', 'N', 'C', 'H', '_', 'C', 'O', 'N', 'D', '_', 'i', '3', '2', 0,
  /* 7007 */ 'C', 'O', 'N', 'T', 'I', 'N', 'U', 'E', '_', 'L', 'O', 'G', 'I', 'C', 'A', 'L', 'Z', '_', 'i', '3', '2', 0,
  /* 7029 */ 'I', 'F', '_', 'L', 'O', 'G', 'I', 'C', 'A', 'L', 'Z', '_', 'i', '3', '2', 0,
  /* 7045 */ 'B', 'R', 'E', 'A', 'K', '_', 'L', 'O', 'G', 'I', 'C', 'A', 'L', 'Z', '_', 'i', '3', '2', 0,
  /* 7064 */ 'C', 'O', 'N', 'T', 'I', 'N', 'U', 'E', '_', 'L', 'O', 'G', 'I', 'C', 'A', 'L', 'N', 'Z', '_', 'i', '3', '2', 0,
  /* 7087 */ 'I', 'F', '_', 'L', 'O', 'G', 'I', 'C', 'A', 'L', 'N', 'Z', '_', 'i', '3', '2', 0,
  /* 7104 */ 'B', 'R', 'E', 'A', 'K', '_', 'L', 'O', 'G', 'I', 'C', 'A', 'L', 'N', 'Z', '_', 'i', '3', '2', 0,
  /* 7124 */ 'S', 'I', '_', 'I', 'N', 'D', 'I', 'R', 'E', 'C', 'T', '_', 'D', 'S', 'T', '_', 'V', '2', 0,
  /* 7143 */ 'B', 'U', 'F', 'F', 'E', 'R', '_', 'S', 'T', 'O', 'R', 'E', '_', 'D', 'W', 'O', 'R', 'D', 'X', '2', 0,
  /* 7164 */ 'V', '_', 'M', 'A', 'D', '_', 'I', '3', '2', '_', 'I', '2', '4', 0,
  /* 7178 */ 'V', '_', 'M', 'A', 'D', '_', 'U', '3', '2', '_', 'U', '2', '4', 0,
  /* 7192 */ 'S', '_', 'A', 'N', 'D', 'N', '2', '_', 'B', '6', '4', 0,
  /* 7204 */ 'S', '_', 'O', 'R', 'N', '2', '_', 'B', '6', '4', 0,
  /* 7215 */ 'S', '_', 'A', 'N', 'D', 'N', '2', '_', 'S', 'A', 'V', 'E', 'E', 'X', 'E', 'C', '_', 'B', '6', '4', 0,
  /* 7236 */ 'S', '_', 'O', 'R', 'N', '2', '_', 'S', 'A', 'V', 'E', 'E', 'X', 'E', 'C', '_', 'B', '6', '4', 0,
  /* 7256 */ 'S', '_', 'N', 'A', 'N', 'D', '_', 'S', 'A', 'V', 'E', 'E', 'X', 'E', 'C', '_', 'B', '6', '4', 0,
  /* 7276 */ 'S', '_', 'A', 'N', 'D', '_', 'S', 'A', 'V', 'E', 'E', 'X', 'E', 'C', '_', 'B', '6', '4', 0,
  /* 7295 */ 'S', '_', 'X', 'N', 'O', 'R', '_', 'S', 'A', 'V', 'E', 'E', 'X', 'E', 'C', '_', 'B', '6', '4', 0,
  /* 7315 */ 'S', '_', 'N', 'O', 'R', '_', 'S', 'A', 'V', 'E', 'E', 'X', 'E', 'C', '_', 'B', '6', '4', 0,
  /* 7334 */ 'S', '_', 'X', 'O', 'R', '_', 'S', 'A', 'V', 'E', 'E', 'X', 'E', 'C', '_', 'B', '6', '4', 0,
  /* 7353 */ 'S', '_', 'O', 'R', '_', 'S', 'A', 'V', 'E', 'E', 'X', 'E', 'C', '_', 'B', '6', '4', 0,
  /* 7371 */ 'S', '_', 'S', 'W', 'A', 'P', 'P', 'C', '_', 'B', '6', '4', 0,
  /* 7384 */ 'S', '_', 'G', 'E', 'T', 'P', 'C', '_', 'B', '6', '4', 0,
  /* 7396 */ 'S', '_', 'S', 'E', 'T', 'P', 'C', '_', 'B', '6', '4', 0,
  /* 7408 */ 'S', '_', 'M', 'O', 'V', 'R', 'E', 'L', 'D', '_', 'B', '6', '4', 0,
  /* 7422 */ 'S', '_', 'N', 'A', 'N', 'D', '_', 'B', '6', '4', 0,
  /* 7433 */ 'S', '_', 'A', 'N', 'D', '_', 'B', '6', '4', 0,
  /* 7443 */ 'S', '_', 'R', 'F', 'E', '_', 'B', '6', '4', 0,
  /* 7453 */ 'S', '_', 'Q', 'U', 'A', 'D', 'M', 'A', 'S', 'K', '_', 'B', '6', '4', 0,
  /* 7468 */ 'S', '_', 'L', 'S', 'H', 'L', '_', 'B', '6', '4', 0,
  /* 7479 */ 'V', '_', 'L', 'S', 'H', 'L', '_', 'B', '6', '4', 0,
  /* 7490 */ 'S', '_', 'B', 'F', 'M', '_', 'B', '6', '4', 0,
  /* 7500 */ 'S', '_', 'W', 'Q', 'M', '_', 'B', '6', '4', 0,
  /* 7510 */ 'S', '_', 'L', 'S', 'H', 'R', '_', 'B', '6', '4', 0,
  /* 7521 */ 'V', '_', 'L', 'S', 'H', 'R', '_', 'B', '6', '4', 0,
  /* 7532 */ 'S', '_', 'X', 'N', 'O', 'R', '_', 'B', '6', '4', 0,
  /* 7543 */ 'S', '_', 'N', 'O', 'R', '_', 'B', '6', '4', 0,
  /* 7553 */ 'S', '_', 'X', 'O', 'R', '_', 'B', '6', '4', 0,
  /* 7563 */ 'S', '_', 'O', 'R', '_', 'B', '6', '4', 0,
  /* 7572 */ 'S', '_', 'M', 'O', 'V', 'R', 'E', 'L', 'S', '_', 'B', '6', '4', 0,
  /* 7586 */ 'S', '_', 'C', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'B', '6', '4', 0,
  /* 7600 */ 'S', '_', 'N', 'O', 'T', '_', 'B', '6', '4', 0,
  /* 7610 */ 'S', '_', 'B', 'R', 'E', 'V', '_', 'B', '6', '4', 0,
  /* 7621 */ 'S', '_', 'C', 'M', 'O', 'V', '_', 'B', '6', '4', 0,
  /* 7632 */ 'S', '_', 'M', 'O', 'V', '_', 'B', '6', '4', 0,
  /* 7642 */ 'V', '_', 'F', 'M', 'A', '_', 'F', '6', '4', 0,
  /* 7652 */ 'V', '_', 'S', 'U', 'B', '_', 'F', '6', '4', 0,
  /* 7662 */ 'V', '_', 'A', 'D', 'D', '_', 'F', '6', '4', 0,
  /* 7672 */ 'V', '_', 'D', 'I', 'V', '_', 'S', 'C', 'A', 'L', 'E', '_', 'F', '6', '4', 0,
  /* 7688 */ 'V', '_', 'M', 'U', 'L', '_', 'F', '6', '4', 0,
  /* 7698 */ 'V', '_', 'M', 'I', 'N', '_', 'F', '6', '4', 0,
  /* 7708 */ 'V', '_', 'T', 'R', 'I', 'G', '_', 'P', 'R', 'E', 'O', 'P', '_', 'F', '6', '4', 0,
  /* 7725 */ 'V', '_', 'D', 'I', 'V', '_', 'F', 'I', 'X', 'U', 'P', '_', 'F', '6', '4', 0,
  /* 7741 */ 'V', '_', 'L', 'D', 'E', 'X', 'P', '_', 'F', '6', '4', 0,
  /* 7753 */ 'V', '_', 'D', 'I', 'V', '_', 'F', 'M', 'A', 'S', '_', 'F', '6', '4', 0,
  /* 7768 */ 'V', '_', 'M', 'A', 'X', '_', 'F', '6', '4', 0,
  /* 7778 */ 'S', '_', 'B', 'F', 'E', '_', 'I', '6', '4', 0,
  /* 7788 */ 'S', '_', 'A', 'S', 'H', 'R', '_', 'I', '6', '4', 0,
  /* 7799 */ 'V', '_', 'A', 'S', 'H', 'R', '_', 'I', '6', '4', 0,
  /* 7810 */ 'B', 'U', 'F', 'F', 'E', 'R', '_', 'L', 'O', 'A', 'D', '_', 'D', 'W', 'O', 'R', 'D', 'X', '2', '_', 'A', 'D', 'D', 'R', '6', '4', 0,
  /* 7837 */ 'B', 'U', 'F', 'F', 'E', 'R', '_', 'L', 'O', 'A', 'D', '_', 'D', 'W', 'O', 'R', 'D', 'X', '4', '_', 'A', 'D', 'D', 'R', '6', '4', 0,
  /* 7864 */ 'B', 'U', 'F', 'F', 'E', 'R', '_', 'L', 'O', 'A', 'D', '_', 'D', 'W', 'O', 'R', 'D', '_', 'A', 'D', 'D', 'R', '6', '4', 0,
  /* 7889 */ 'B', 'U', 'F', 'F', 'E', 'R', '_', 'L', 'O', 'A', 'D', '_', 'S', 'B', 'Y', 'T', 'E', '_', 'A', 'D', 'D', 'R', '6', '4', 0,
  /* 7914 */ 'B', 'U', 'F', 'F', 'E', 'R', '_', 'L', 'O', 'A', 'D', '_', 'U', 'B', 'Y', 'T', 'E', '_', 'A', 'D', 'D', 'R', '6', '4', 0,
  /* 7939 */ 'B', 'U', 'F', 'F', 'E', 'R', '_', 'L', 'O', 'A', 'D', '_', 'S', 'S', 'H', 'O', 'R', 'T', '_', 'A', 'D', 'D', 'R', '6', '4', 0,
  /* 7965 */ 'B', 'U', 'F', 'F', 'E', 'R', '_', 'L', 'O', 'A', 'D', '_', 'U', 'S', 'H', 'O', 'R', 'T', '_', 'A', 'D', 'D', 'R', '6', '4', 0,
  /* 7991 */ 'B', 'U', 'F', 'F', 'E', 'R', '_', 'L', 'O', 'A', 'D', '_', 'F', 'O', 'R', 'M', 'A', 'T', '_', 'X', 'Y', 'Z', 'W', '_', 'A', 'D', 'D', 'R', '6', '4', 0,
  /* 8022 */ 'S', '_', 'B', 'F', 'E', '_', 'U', '6', '4', 0,
  /* 8032 */ 'V', '_', 'M', 'B', 'C', 'N', 'T', '_', 'H', 'I', '_', 'U', '3', '2', '_', 'B', '3', '2', '_', 'e', '6', '4', 0,
  /* 8055 */ 'V', '_', 'M', 'B', 'C', 'N', 'T', '_', 'L', 'O', '_', 'U', '3', '2', '_', 'B', '3', '2', '_', 'e', '6', '4', 0,
  /* 8078 */ 'V', '_', 'M', 'O', 'V', '_', 'F', 'E', 'D', '_', 'B', '3', '2', '_', 'e', '6', '4', 0,
  /* 8096 */ 'V', '_', 'M', 'O', 'V', 'R', 'E', 'L', 'D', '_', 'B', '3', '2', '_', 'e', '6', '4', 0,
  /* 8114 */ 'V', '_', 'A', 'N', 'D', '_', 'B', '3', '2', '_', 'e', '6', '4', 0,
  /* 8128 */ 'V', '_', 'M', 'O', 'V', 'R', 'E', 'L', 'S', 'D', '_', 'B', '3', '2', '_', 'e', '6', '4', 0,
  /* 8147 */ 'V', '_', 'R', 'E', 'A', 'D', 'L', 'A', 'N', 'E', '_', 'B', '3', '2', '_', 'e', '6', '4', 0,
  /* 8166 */ 'V', '_', 'W', 'R', 'I', 'T', 'E', 'L', 'A', 'N', 'E', '_', 'B', '3', '2', '_', 'e', '6', '4', 0,
  /* 8186 */ 'V', '_', 'R', 'E', 'A', 'D', 'F', 'I', 'R', 'S', 'T', 'L', 'A', 'N', 'E', '_', 'B', '3', '2', '_', 'e', '6', '4', 0,
  /* 8210 */ 'V', '_', 'C', 'N', 'D', 'M', 'A', 'S', 'K', '_', 'B', '3', '2', '_', 'e', '6', '4', 0,
  /* 8228 */ 'V', '_', 'F', 'F', 'B', 'L', '_', 'B', '3', '2', '_', 'e', '6', '4', 0,
  /* 8243 */ 'V', '_', 'L', 'S', 'H', 'L', '_', 'B', '3', '2', '_', 'e', '6', '4', 0,
  /* 8258 */ 'V', '_', 'B', 'F', 'M', '_', 'B', '3', '2', '_', 'e', '6', '4', 0,
  /* 8272 */ 'V', '_', 'L', 'S', 'H', 'R', '_', 'B', '3', '2', '_', 'e', '6', '4', 0,
  /* 8287 */ 'V', '_', 'X', 'O', 'R', '_', 'B', '3', '2', '_', 'e', '6', '4', 0,
  /* 8301 */ 'V', '_', 'O', 'R', '_', 'B', '3', '2', '_', 'e', '6', '4', 0,
  /* 8314 */ 'V', '_', 'M', 'O', 'V', 'R', 'E', 'L', 'S', '_', 'B', '3', '2', '_', 'e', '6', '4', 0,
  /* 8332 */ 'V', '_', 'N', 'O', 'T', '_', 'B', '3', '2', '_', 'e', '6', '4', 0,
  /* 8346 */ 'V', '_', 'B', 'F', 'R', 'E', 'V', '_', 'B', '3', '2', '_', 'e', '6', '4', 0,
  /* 8362 */ 'V', '_', 'L', 'S', 'H', 'L', 'R', 'E', 'V', '_', 'B', '3', '2', '_', 'e', '6', '4', 0,
  /* 8380 */ 'V', '_', 'L', 'S', 'H', 'R', 'R', 'E', 'V', '_', 'B', '3', '2', '_', 'e', '6', '4', 0,
  /* 8398 */ 'V', '_', 'M', 'O', 'V', '_', 'B', '3', '2', '_', 'e', '6', '4', 0,
  /* 8412 */ 'V', '_', 'C', 'V', 'T', '_', 'I', '3', '2', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 8430 */ 'V', '_', 'C', 'V', 'T', '_', 'U', '3', '2', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 8448 */ 'V', '_', 'C', 'V', 'T', '_', 'P', 'K', 'R', 'T', 'Z', '_', 'F', '1', '6', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 8472 */ 'V', '_', 'S', 'U', 'B', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 8486 */ 'V', '_', 'M', 'A', 'C', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 8500 */ 'V', '_', 'T', 'R', 'U', 'N', 'C', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 8516 */ 'V', '_', 'A', 'D', 'D', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 8530 */ 'V', '_', 'C', 'M', 'P', '_', 'N', 'G', 'E', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 8548 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'N', 'G', 'E', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 8567 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'N', 'G', 'E', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 8586 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'N', 'G', 'E', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 8606 */ 'V', '_', 'C', 'M', 'P', '_', 'G', 'E', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 8623 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'G', 'E', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 8641 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'G', 'E', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 8659 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'G', 'E', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 8678 */ 'V', '_', 'C', 'M', 'P', '_', 'N', 'L', 'E', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 8696 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'N', 'L', 'E', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 8715 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'N', 'L', 'E', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 8734 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'N', 'L', 'E', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 8754 */ 'V', '_', 'C', 'M', 'P', '_', 'L', 'E', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 8771 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'L', 'E', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 8789 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'L', 'E', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 8807 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'L', 'E', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 8826 */ 'V', '_', 'R', 'N', 'D', 'N', 'E', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 8842 */ 'V', '_', 'C', 'M', 'P', '_', 'F', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 8858 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'F', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 8875 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'F', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 8892 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'F', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 8910 */ 'V', '_', 'R', 'C', 'P', '_', 'I', 'F', 'L', 'A', 'G', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 8930 */ 'V', '_', 'C', 'M', 'P', '_', 'N', 'L', 'G', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 8948 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'N', 'L', 'G', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 8967 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'N', 'L', 'G', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 8986 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'N', 'L', 'G', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9006 */ 'V', '_', 'C', 'M', 'P', '_', 'L', 'G', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9023 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'L', 'G', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9041 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'L', 'G', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9059 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'L', 'G', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9078 */ 'V', '_', 'L', 'O', 'G', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9092 */ 'V', '_', 'M', 'A', 'D', 'A', 'K', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9108 */ 'V', '_', 'M', 'A', 'D', 'M', 'K', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9124 */ 'V', '_', 'C', 'E', 'I', 'L', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9139 */ 'V', '_', 'M', 'U', 'L', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9153 */ 'V', '_', 'M', 'I', 'N', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9167 */ 'V', '_', 'S', 'I', 'N', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9181 */ 'V', '_', 'C', 'M', 'P', '_', 'O', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9197 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'O', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9214 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'O', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9231 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'O', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9249 */ 'V', '_', 'R', 'C', 'P', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9263 */ 'V', '_', 'L', 'O', 'G', '_', 'C', 'L', 'A', 'M', 'P', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9283 */ 'V', '_', 'R', 'C', 'P', '_', 'C', 'L', 'A', 'M', 'P', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9303 */ 'V', '_', 'R', 'S', 'Q', '_', 'C', 'L', 'A', 'M', 'P', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9323 */ 'V', '_', 'L', 'D', 'E', 'X', 'P', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9339 */ 'V', '_', 'E', 'X', 'P', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9353 */ 'V', '_', 'C', 'M', 'P', '_', 'N', 'E', 'Q', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9371 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'N', 'E', 'Q', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9390 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'N', 'E', 'Q', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9409 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'N', 'E', 'Q', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9429 */ 'V', '_', 'C', 'M', 'P', '_', 'E', 'Q', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9446 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'E', 'Q', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9464 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'E', 'Q', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9482 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'E', 'Q', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9501 */ 'V', '_', 'R', 'S', 'Q', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9515 */ 'V', '_', 'F', 'L', 'O', 'O', 'R', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9531 */ 'V', '_', 'C', 'O', 'S', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9545 */ 'V', '_', 'C', 'M', 'P', '_', 'C', 'L', 'A', 'S', 'S', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9565 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'C', 'L', 'A', 'S', 'S', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9586 */ 'V', '_', 'F', 'R', 'A', 'C', 'T', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9602 */ 'V', '_', 'C', 'M', 'P', '_', 'N', 'G', 'T', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9620 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'N', 'G', 'T', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9639 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'N', 'G', 'T', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9658 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'N', 'G', 'T', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9678 */ 'V', '_', 'C', 'M', 'P', '_', 'G', 'T', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9695 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'G', 'T', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9713 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'G', 'T', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9731 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'G', 'T', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9750 */ 'V', '_', 'C', 'M', 'P', '_', 'N', 'L', 'T', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9768 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'N', 'L', 'T', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9787 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'N', 'L', 'T', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9806 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'N', 'L', 'T', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9826 */ 'V', '_', 'C', 'M', 'P', '_', 'L', 'T', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9843 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'L', 'T', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9861 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'L', 'T', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9879 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'L', 'T', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9898 */ 'V', '_', 'F', 'R', 'E', 'X', 'P', '_', 'M', 'A', 'N', 'T', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9919 */ 'V', '_', 'S', 'Q', 'R', 'T', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9934 */ 'V', '_', 'C', 'M', 'P', '_', 'T', 'R', 'U', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9952 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'T', 'R', 'U', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9971 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'T', 'R', 'U', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 9990 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'T', 'R', 'U', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 10010 */ 'V', '_', 'C', 'M', 'P', '_', 'U', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 10026 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'U', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 10043 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'U', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 10060 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'U', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 10078 */ 'V', '_', 'S', 'U', 'B', 'R', 'E', 'V', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 10095 */ 'V', '_', 'M', 'A', 'X', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 10109 */ 'V', '_', 'M', 'A', 'C', '_', 'L', 'E', 'G', 'A', 'C', 'Y', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 10130 */ 'V', '_', 'M', 'U', 'L', '_', 'L', 'E', 'G', 'A', 'C', 'Y', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 10151 */ 'V', '_', 'M', 'I', 'N', '_', 'L', 'E', 'G', 'A', 'C', 'Y', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 10172 */ 'V', '_', 'R', 'C', 'P', '_', 'L', 'E', 'G', 'A', 'C', 'Y', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 10193 */ 'V', '_', 'R', 'S', 'Q', '_', 'L', 'E', 'G', 'A', 'C', 'Y', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 10214 */ 'V', '_', 'M', 'A', 'X', '_', 'L', 'E', 'G', 'A', 'C', 'Y', '_', 'F', '3', '2', '_', 'e', '6', '4', 0,
  /* 10235 */ 'V', '_', 'C', 'V', 'T', '_', 'F', '3', '2', '_', 'I', '3', '2', '_', 'e', '6', '4', 0,
  /* 10253 */ 'V', '_', 'S', 'U', 'B', '_', 'I', '3', '2', '_', 'e', '6', '4', 0,
  /* 10267 */ 'V', '_', 'A', 'D', 'D', '_', 'I', '3', '2', '_', 'e', '6', '4', 0,
  /* 10281 */ 'V', '_', 'C', 'M', 'P', '_', 'G', 'E', '_', 'I', '3', '2', '_', 'e', '6', '4', 0,
  /* 10298 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'G', 'E', '_', 'I', '3', '2', '_', 'e', '6', '4', 0,
  /* 10316 */ 'V', '_', 'C', 'M', 'P', '_', 'L', 'E', '_', 'I', '3', '2', '_', 'e', '6', '4', 0,
  /* 10333 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'L', 'E', '_', 'I', '3', '2', '_', 'e', '6', '4', 0,
  /* 10351 */ 'V', '_', 'C', 'M', 'P', '_', 'N', 'E', '_', 'I', '3', '2', '_', 'e', '6', '4', 0,
  /* 10368 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'N', 'E', '_', 'I', '3', '2', '_', 'e', '6', '4', 0,
  /* 10386 */ 'V', '_', 'C', 'M', 'P', '_', 'F', '_', 'I', '3', '2', '_', 'e', '6', '4', 0,
  /* 10402 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'F', '_', 'I', '3', '2', '_', 'e', '6', '4', 0,
  /* 10419 */ 'V', '_', 'F', 'F', 'B', 'H', '_', 'I', '3', '2', '_', 'e', '6', '4', 0,
  /* 10434 */ 'V', '_', 'M', 'I', 'N', '_', 'I', '3', '2', '_', 'e', '6', '4', 0,
  /* 10448 */ 'V', '_', 'C', 'M', 'P', '_', 'E', 'Q', '_', 'I', '3', '2', '_', 'e', '6', '4', 0,
  /* 10465 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'E', 'Q', '_', 'I', '3', '2', '_', 'e', '6', '4', 0,
  /* 10483 */ 'V', '_', 'A', 'S', 'H', 'R', '_', 'I', '3', '2', '_', 'e', '6', '4', 0,
  /* 10498 */ 'V', '_', 'C', 'M', 'P', '_', 'G', 'T', '_', 'I', '3', '2', '_', 'e', '6', '4', 0,
  /* 10515 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'G', 'T', '_', 'I', '3', '2', '_', 'e', '6', '4', 0,
  /* 10533 */ 'V', '_', 'C', 'M', 'P', '_', 'L', 'T', '_', 'I', '3', '2', '_', 'e', '6', '4', 0,
  /* 10550 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'L', 'T', '_', 'I', '3', '2', '_', 'e', '6', '4', 0,
  /* 10568 */ 'V', '_', 'C', 'M', 'P', '_', 'T', '_', 'I', '3', '2', '_', 'e', '6', '4', 0,
  /* 10584 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'T', '_', 'I', '3', '2', '_', 'e', '6', '4', 0,
  /* 10601 */ 'V', '_', 'S', 'U', 'B', 'R', 'E', 'V', '_', 'I', '3', '2', '_', 'e', '6', '4', 0,
  /* 10618 */ 'V', '_', 'A', 'S', 'H', 'R', 'R', 'E', 'V', '_', 'I', '3', '2', '_', 'e', '6', '4', 0,
  /* 10636 */ 'V', '_', 'M', 'A', 'X', '_', 'I', '3', '2', '_', 'e', '6', '4', 0,
  /* 10650 */ 'V', '_', 'C', 'V', 'T', '_', 'F', '3', '2', '_', 'U', '3', '2', '_', 'e', '6', '4', 0,
  /* 10668 */ 'V', '_', 'S', 'U', 'B', 'B', '_', 'U', '3', '2', '_', 'e', '6', '4', 0,
  /* 10683 */ 'V', '_', 'A', 'D', 'D', 'C', '_', 'U', '3', '2', '_', 'e', '6', '4', 0,
  /* 10698 */ 'V', '_', 'C', 'M', 'P', '_', 'G', 'E', '_', 'U', '3', '2', '_', 'e', '6', '4', 0,
  /* 10715 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'G', 'E', '_', 'U', '3', '2', '_', 'e', '6', '4', 0,
  /* 10733 */ 'V', '_', 'C', 'M', 'P', '_', 'L', 'E', '_', 'U', '3', '2', '_', 'e', '6', '4', 0,
  /* 10750 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'L', 'E', '_', 'U', '3', '2', '_', 'e', '6', '4', 0,
  /* 10768 */ 'V', '_', 'C', 'M', 'P', '_', 'N', 'E', '_', 'U', '3', '2', '_', 'e', '6', '4', 0,
  /* 10785 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'N', 'E', '_', 'U', '3', '2', '_', 'e', '6', '4', 0,
  /* 10803 */ 'V', '_', 'C', 'M', 'P', '_', 'F', '_', 'U', '3', '2', '_', 'e', '6', '4', 0,
  /* 10819 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'F', '_', 'U', '3', '2', '_', 'e', '6', '4', 0,
  /* 10836 */ 'V', '_', 'F', 'F', 'B', 'H', '_', 'U', '3', '2', '_', 'e', '6', '4', 0,
  /* 10851 */ 'V', '_', 'M', 'I', 'N', '_', 'U', '3', '2', '_', 'e', '6', '4', 0,
  /* 10865 */ 'V', '_', 'C', 'M', 'P', '_', 'E', 'Q', '_', 'U', '3', '2', '_', 'e', '6', '4', 0,
  /* 10882 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'E', 'Q', '_', 'U', '3', '2', '_', 'e', '6', '4', 0,
  /* 10900 */ 'V', '_', 'C', 'M', 'P', '_', 'G', 'T', '_', 'U', '3', '2', '_', 'e', '6', '4', 0,
  /* 10917 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'G', 'T', '_', 'U', '3', '2', '_', 'e', '6', '4', 0,
  /* 10935 */ 'V', '_', 'C', 'M', 'P', '_', 'L', 'T', '_', 'U', '3', '2', '_', 'e', '6', '4', 0,
  /* 10952 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'L', 'T', '_', 'U', '3', '2', '_', 'e', '6', '4', 0,
  /* 10970 */ 'V', '_', 'C', 'M', 'P', '_', 'T', '_', 'U', '3', '2', '_', 'e', '6', '4', 0,
  /* 10986 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'T', '_', 'U', '3', '2', '_', 'e', '6', '4', 0,
  /* 11003 */ 'V', '_', 'S', 'U', 'B', 'B', 'R', 'E', 'V', '_', 'U', '3', '2', '_', 'e', '6', '4', 0,
  /* 11021 */ 'V', '_', 'M', 'A', 'X', '_', 'U', '3', '2', '_', 'e', '6', '4', 0,
  /* 11035 */ 'V', '_', 'M', 'U', 'L', '_', 'I', '3', '2', '_', 'I', '2', '4', '_', 'e', '6', '4', 0,
  /* 11053 */ 'V', '_', 'M', 'U', 'L', '_', 'U', '3', '2', '_', 'U', '2', '4', '_', 'e', '6', '4', 0,
  /* 11071 */ 'V', '_', 'C', 'M', 'P', '_', 'N', 'G', 'E', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11089 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'N', 'G', 'E', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11108 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'N', 'G', 'E', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11127 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'N', 'G', 'E', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11147 */ 'V', '_', 'C', 'M', 'P', '_', 'G', 'E', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11164 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'G', 'E', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11182 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'G', 'E', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11200 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'G', 'E', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11219 */ 'V', '_', 'C', 'M', 'P', '_', 'N', 'L', 'E', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11237 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'N', 'L', 'E', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11256 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'N', 'L', 'E', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11275 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'N', 'L', 'E', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11295 */ 'V', '_', 'C', 'M', 'P', '_', 'L', 'E', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11312 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'L', 'E', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11330 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'L', 'E', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11348 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'L', 'E', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11367 */ 'V', '_', 'C', 'M', 'P', '_', 'F', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11383 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'F', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11400 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'F', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11417 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'F', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11435 */ 'V', '_', 'C', 'M', 'P', '_', 'N', 'L', 'G', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11453 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'N', 'L', 'G', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11472 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'N', 'L', 'G', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11491 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'N', 'L', 'G', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11511 */ 'V', '_', 'C', 'M', 'P', '_', 'L', 'G', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11528 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'L', 'G', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11546 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'L', 'G', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11564 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'L', 'G', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11583 */ 'V', '_', 'C', 'M', 'P', '_', 'O', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11599 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'O', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11616 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'O', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11633 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'O', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11651 */ 'V', '_', 'R', 'C', 'P', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11665 */ 'V', '_', 'R', 'C', 'P', '_', 'C', 'L', 'A', 'M', 'P', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11685 */ 'V', '_', 'R', 'S', 'Q', '_', 'C', 'L', 'A', 'M', 'P', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11705 */ 'V', '_', 'C', 'M', 'P', '_', 'N', 'E', 'Q', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11723 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'N', 'E', 'Q', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11742 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'N', 'E', 'Q', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11761 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'N', 'E', 'Q', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11781 */ 'V', '_', 'C', 'M', 'P', '_', 'E', 'Q', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11798 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'E', 'Q', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11816 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'E', 'Q', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11834 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'E', 'Q', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11853 */ 'V', '_', 'R', 'S', 'Q', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11867 */ 'V', '_', 'C', 'M', 'P', '_', 'C', 'L', 'A', 'S', 'S', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11887 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'C', 'L', 'A', 'S', 'S', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11908 */ 'V', '_', 'F', 'R', 'A', 'C', 'T', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11924 */ 'V', '_', 'C', 'M', 'P', '_', 'N', 'G', 'T', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11942 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'N', 'G', 'T', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11961 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'N', 'G', 'T', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 11980 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'N', 'G', 'T', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 12000 */ 'V', '_', 'C', 'M', 'P', '_', 'G', 'T', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 12017 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'G', 'T', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 12035 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'G', 'T', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 12053 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'G', 'T', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 12072 */ 'V', '_', 'C', 'M', 'P', '_', 'N', 'L', 'T', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 12090 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'N', 'L', 'T', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 12109 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'N', 'L', 'T', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 12128 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'N', 'L', 'T', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 12148 */ 'V', '_', 'C', 'M', 'P', '_', 'L', 'T', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 12165 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'L', 'T', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 12183 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'L', 'T', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 12201 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'L', 'T', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 12220 */ 'V', '_', 'F', 'R', 'E', 'X', 'P', '_', 'M', 'A', 'N', 'T', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 12241 */ 'V', '_', 'S', 'Q', 'R', 'T', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 12256 */ 'V', '_', 'C', 'M', 'P', '_', 'T', 'R', 'U', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 12274 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'T', 'R', 'U', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 12293 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'T', 'R', 'U', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 12312 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'T', 'R', 'U', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 12332 */ 'V', '_', 'C', 'M', 'P', '_', 'U', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 12348 */ 'V', '_', 'C', 'M', 'P', 'S', '_', 'U', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 12365 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'U', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 12382 */ 'V', '_', 'C', 'M', 'P', 'S', 'X', '_', 'U', '_', 'F', '6', '4', '_', 'e', '6', '4', 0,
  /* 12400 */ 'V', '_', 'C', 'M', 'P', '_', 'G', 'E', '_', 'I', '6', '4', '_', 'e', '6', '4', 0,
  /* 12417 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'G', 'E', '_', 'I', '6', '4', '_', 'e', '6', '4', 0,
  /* 12435 */ 'V', '_', 'C', 'M', 'P', '_', 'L', 'E', '_', 'I', '6', '4', '_', 'e', '6', '4', 0,
  /* 12452 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'L', 'E', '_', 'I', '6', '4', '_', 'e', '6', '4', 0,
  /* 12470 */ 'V', '_', 'C', 'M', 'P', '_', 'N', 'E', '_', 'I', '6', '4', '_', 'e', '6', '4', 0,
  /* 12487 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'N', 'E', '_', 'I', '6', '4', '_', 'e', '6', '4', 0,
  /* 12505 */ 'V', '_', 'C', 'M', 'P', '_', 'F', '_', 'I', '6', '4', '_', 'e', '6', '4', 0,
  /* 12521 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'F', '_', 'I', '6', '4', '_', 'e', '6', '4', 0,
  /* 12538 */ 'V', '_', 'C', 'M', 'P', '_', 'E', 'Q', '_', 'I', '6', '4', '_', 'e', '6', '4', 0,
  /* 12555 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'E', 'Q', '_', 'I', '6', '4', '_', 'e', '6', '4', 0,
  /* 12573 */ 'V', '_', 'C', 'M', 'P', '_', 'G', 'T', '_', 'I', '6', '4', '_', 'e', '6', '4', 0,
  /* 12590 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'G', 'T', '_', 'I', '6', '4', '_', 'e', '6', '4', 0,
  /* 12608 */ 'V', '_', 'C', 'M', 'P', '_', 'L', 'T', '_', 'I', '6', '4', '_', 'e', '6', '4', 0,
  /* 12625 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'L', 'T', '_', 'I', '6', '4', '_', 'e', '6', '4', 0,
  /* 12643 */ 'V', '_', 'C', 'M', 'P', '_', 'T', '_', 'I', '6', '4', '_', 'e', '6', '4', 0,
  /* 12659 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'T', '_', 'I', '6', '4', '_', 'e', '6', '4', 0,
  /* 12676 */ 'V', '_', 'C', 'M', 'P', '_', 'G', 'E', '_', 'U', '6', '4', '_', 'e', '6', '4', 0,
  /* 12693 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'G', 'E', '_', 'U', '6', '4', '_', 'e', '6', '4', 0,
  /* 12711 */ 'V', '_', 'C', 'M', 'P', '_', 'L', 'E', '_', 'U', '6', '4', '_', 'e', '6', '4', 0,
  /* 12728 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'L', 'E', '_', 'U', '6', '4', '_', 'e', '6', '4', 0,
  /* 12746 */ 'V', '_', 'C', 'M', 'P', '_', 'N', 'E', '_', 'U', '6', '4', '_', 'e', '6', '4', 0,
  /* 12763 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'N', 'E', '_', 'U', '6', '4', '_', 'e', '6', '4', 0,
  /* 12781 */ 'V', '_', 'C', 'M', 'P', '_', 'F', '_', 'U', '6', '4', '_', 'e', '6', '4', 0,
  /* 12797 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'F', '_', 'U', '6', '4', '_', 'e', '6', '4', 0,
  /* 12814 */ 'V', '_', 'C', 'M', 'P', '_', 'E', 'Q', '_', 'U', '6', '4', '_', 'e', '6', '4', 0,
  /* 12831 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'E', 'Q', '_', 'U', '6', '4', '_', 'e', '6', '4', 0,
  /* 12849 */ 'V', '_', 'C', 'M', 'P', '_', 'G', 'T', '_', 'U', '6', '4', '_', 'e', '6', '4', 0,
  /* 12866 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'G', 'T', '_', 'U', '6', '4', '_', 'e', '6', '4', 0,
  /* 12884 */ 'V', '_', 'C', 'M', 'P', '_', 'L', 'T', '_', 'U', '6', '4', '_', 'e', '6', '4', 0,
  /* 12901 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'L', 'T', '_', 'U', '6', '4', '_', 'e', '6', '4', 0,
  /* 12919 */ 'V', '_', 'C', 'M', 'P', '_', 'T', '_', 'U', '6', '4', '_', 'e', '6', '4', 0,
  /* 12935 */ 'V', '_', 'C', 'M', 'P', 'X', '_', 'T', '_', 'U', '6', '4', '_', 'e', '6', '4', 0,
  /* 12952 */ 'S', 'I', '_', 'I', 'N', 'D', 'I', 'R', 'E', 'C', 'T', '_', 'D', 'S', 'T', '_', 'V', '4', 0,
  /* 12971 */ 'B', 'U', 'F', 'F', 'E', 'R', '_', 'S', 'T', 'O', 'R', 'E', '_', 'D', 'W', 'O', 'R', 'D', 'X', '4', 0,
  /* 12992 */ 'D', 'O', 'T', '_', '4', 0,
  /* 12998 */ 'S', 'I', '_', 'I', 'N', 'D', 'I', 'R', 'E', 'C', 'T', '_', 'D', 'S', 'T', '_', 'V', '1', '6', 0,
  /* 13018 */ 'S', 'I', '_', 'I', 'N', 'D', 'I', 'R', 'E', 'C', 'T', '_', 'D', 'S', 'T', '_', 'V', '8', 0,
  /* 13037 */ 'T', 'E', 'X', '_', 'S', 'A', 'M', 'P', 'L', 'E', '_', 'C', '_', 'L', 'B', 0,
  /* 13053 */ 'T', 'E', 'X', '_', 'S', 'A', 'M', 'P', 'L', 'E', '_', 'L', 'B', 0,
  /* 13067 */ 'I', 'M', 'A', 'G', 'E', '_', 'S', 'A', 'M', 'P', 'L', 'E', '_', 'C', '_', 'B', 0,
  /* 13084 */ 'I', 'M', 'A', 'G', 'E', '_', 'S', 'A', 'M', 'P', 'L', 'E', '_', 'B', 0,
  /* 13099 */ 'E', 'N', 'D', 'F', 'U', 'N', 'C', 0,
  /* 13107 */ 'T', 'R', 'U', 'N', 'C', 0,
  /* 13113 */ 'S', 'I', '_', 'A', 'D', 'D', 'R', '6', '4', '_', 'R', 'S', 'R', 'C', 0,
  /* 13128 */ 'S', 'I', '_', 'I', 'N', 'D', 'I', 'R', 'E', 'C', 'T', '_', 'S', 'R', 'C', 0,
  /* 13144 */ 'I', 'M', 'A', 'G', 'E', '_', 'S', 'A', 'M', 'P', 'L', 'E', '_', 'C', 0,
  /* 13159 */ 'T', 'E', 'X', '_', 'S', 'A', 'M', 'P', 'L', 'E', '_', 'C', 0,
  /* 13172 */ 'I', 'N', 'T', 'E', 'R', 'P', '_', 'V', 'E', 'C', '_', 'L', 'O', 'A', 'D', 0,
  /* 13188 */ 'P', 'A', 'D', 0,
  /* 13192 */ 'A', 'D', 'D', 0,
  /* 13196 */ 'T', 'E', 'X', '_', 'L', 'D', 0,
  /* 13203 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 13216 */ 'J', 'U', 'M', 'P', '_', 'C', 'O', 'N', 'D', 0,
  /* 13226 */ 'B', 'U', 'F', 'F', 'E', 'R', '_', 'S', 'T', 'O', 'R', 'E', '_', 'D', 'W', 'O', 'R', 'D', 0,
  /* 13245 */ 'T', 'X', 'D', 0,
  /* 13249 */ 'I', 'M', 'A', 'G', 'E', '_', 'S', 'A', 'M', 'P', 'L', 'E', '_', 'C', '_', 'D', 0,
  /* 13266 */ 'I', 'M', 'A', 'G', 'E', '_', 'S', 'A', 'M', 'P', 'L', 'E', '_', 'D', 0,
  /* 13281 */ 'R', 'E', 'G', '_', 'S', 'E', 'Q', 'U', 'E', 'N', 'C', 'E', 0,
  /* 13294 */ 'M', 'U', 'L', '_', 'I', 'E', 'E', 'E', 0,
  /* 13303 */ 'S', 'G', 'E', 0,
  /* 13307 */ 'P', 'R', 'E', 'D', '_', 'S', 'E', 'T', 'G', 'E', 0,
  /* 13318 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 13325 */ 'I', 'M', 'A', 'G', 'E', '_', 'S', 'A', 'M', 'P', 'L', 'E', 0,
  /* 13338 */ 'T', 'E', 'X', '_', 'S', 'A', 'M', 'P', 'L', 'E', 0,
  /* 13349 */ 'R', 'N', 'D', 'N', 'E', 0,
  /* 13355 */ 'S', 'N', 'E', 0,
  /* 13359 */ 'P', 'R', 'E', 'D', '_', 'S', 'E', 'T', 'N', 'E', 0,
  /* 13370 */ 'C', 'F', '_', 'A', 'L', 'U', '_', 'P', 'U', 'S', 'H', '_', 'B', 'E', 'F', 'O', 'R', 'E', 0,
  /* 13389 */ 'C', 'A', 'S', 'E', 0,
  /* 13394 */ 'S', 'I', '_', 'E', 'L', 'S', 'E', 0,
  /* 13402 */ 'F', 'E', 'T', 'C', 'H', '_', 'C', 'L', 'A', 'U', 'S', 'E', 0,
  /* 13415 */ 'A', 'L', 'U', '_', 'C', 'L', 'A', 'U', 'S', 'E', 0,
  /* 13426 */ 'P', 'R', 'E', 'D', '_', 'S', 'E', 'T', 'E', 0,
  /* 13436 */ 'M', 'A', 'S', 'K', '_', 'W', 'R', 'I', 'T', 'E', 0,
  /* 13447 */ 'L', 'D', 'S', '_', 'W', 'R', 'I', 'T', 'E', 0,
  /* 13457 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 13467 */ 'C', 'O', 'N', 'T', 'I', 'N', 'U', 'E', 0,
  /* 13476 */ 'S', 'I', '_', 'E', 'N', 'D', '_', 'C', 'F', 0,
  /* 13486 */ 'I', 'M', 'P', 'L', 'I', 'C', 'I', 'T', '_', 'D', 'E', 'F', 0,
  /* 13499 */ 'E', 'N', 'D', 'I', 'F', 0,
  /* 13505 */ 'S', 'I', '_', 'I', 'F', 0,
  /* 13511 */ 'T', 'E', 'X', '_', 'V', 'T', 'X', '_', 'C', 'O', 'N', 'S', 'T', 'B', 'U', 'F', 0,
  /* 13528 */ 'T', 'E', 'X', '_', 'V', 'T', 'X', '_', 'T', 'E', 'X', 'B', 'U', 'F', 0,
  /* 13543 */ 'E', 'X', 'T', 'R', 'A', 'C', 'T', '_', 'S', 'U', 'B', 'R', 'E', 'G', 0,
  /* 13558 */ 'I', 'N', 'S', 'E', 'R', 'T', '_', 'S', 'U', 'B', 'R', 'E', 'G', 0,
  /* 13572 */ 'S', 'U', 'B', 'R', 'E', 'G', '_', 'T', 'O', '_', 'R', 'E', 'G', 0,
  /* 13586 */ 'C', 'F', '_', 'T', 'C', '_', 'E', 'G', 0,
  /* 13595 */ 'C', 'F', '_', 'V', 'C', '_', 'E', 'G', 0,
  /* 13604 */ 'C', 'F', '_', 'E', 'N', 'D', '_', 'E', 'G', 0,
  /* 13614 */ 'C', 'F', '_', 'E', 'L', 'S', 'E', '_', 'E', 'G', 0,
  /* 13625 */ 'C', 'F', '_', 'C', 'O', 'N', 'T', 'I', 'N', 'U', 'E', '_', 'E', 'G', 0,
  /* 13640 */ 'L', 'O', 'O', 'P', '_', 'B', 'R', 'E', 'A', 'K', '_', 'E', 'G', 0,
  /* 13654 */ 'C', 'F', '_', 'J', 'U', 'M', 'P', '_', 'E', 'G', 0,
  /* 13665 */ 'E', 'N', 'D', '_', 'L', 'O', 'O', 'P', '_', 'E', 'G', 0,
  /* 13677 */ 'W', 'H', 'I', 'L', 'E', '_', 'L', 'O', 'O', 'P', '_', 'E', 'G', 0,
  /* 13691 */ 'P', 'O', 'P', '_', 'E', 'G', 0,
  /* 13698 */ 'C', 'F', '_', 'C', 'A', 'L', 'L', '_', 'F', 'S', '_', 'E', 'G', 0,
  /* 13712 */ 'T', 'E', 'X', '_', 'S', 'A', 'M', 'P', 'L', 'E', '_', 'C', '_', 'G', 0,
  /* 13727 */ 'T', 'E', 'X', '_', 'S', 'A', 'M', 'P', 'L', 'E', '_', 'G', 0,
  /* 13740 */ 'S', '_', 'B', 'R', 'A', 'N', 'C', 'H', 0,
  /* 13749 */ 'E', 'N', 'D', 'S', 'W', 'I', 'T', 'C', 'H', 0,
  /* 13759 */ 'T', 'E', 'X', '_', 'G', 'E', 'T', '_', 'G', 'R', 'A', 'D', 'I', 'E', 'N', 'T', 'S', '_', 'H', 0,
  /* 13779 */ 'T', 'E', 'X', '_', 'S', 'E', 'T', '_', 'G', 'R', 'A', 'D', 'I', 'E', 'N', 'T', 'S', '_', 'H', 0,
  /* 13799 */ 'P', 'H', 'I', 0,
  /* 13803 */ 'S', 'I', '_', 'E', 'L', 'S', 'E', '_', 'B', 'R', 'E', 'A', 'K', 0,
  /* 13817 */ 'S', 'I', '_', 'I', 'F', '_', 'B', 'R', 'E', 'A', 'K', 0,
  /* 13829 */ 'S', 'I', '_', 'B', 'R', 'E', 'A', 'K', 0,
  /* 13838 */ 'G', 'C', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 13847 */ 'P', 'R', 'O', 'L', 'O', 'G', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 13860 */ 'E', 'H', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 13869 */ 'C', 'E', 'I', 'L', 0,
  /* 13874 */ 'S', 'I', '_', 'K', 'I', 'L', 'L', 0,
  /* 13882 */ 'M', 'U', 'L', 0,
  /* 13886 */ 'I', 'M', 'A', 'G', 'E', '_', 'S', 'A', 'M', 'P', 'L', 'E', '_', 'C', '_', 'L', 0,
  /* 13903 */ 'T', 'E', 'X', '_', 'S', 'A', 'M', 'P', 'L', 'E', '_', 'C', '_', 'L', 0,
  /* 13918 */ 'I', 'M', 'A', 'G', 'E', '_', 'S', 'A', 'M', 'P', 'L', 'E', '_', 'L', 0,
  /* 13933 */ 'T', 'E', 'X', '_', 'S', 'A', 'M', 'P', 'L', 'E', '_', 'L', 0,
  /* 13946 */ 'C', 'F', '_', 'E', 'N', 'D', '_', 'C', 'M', 0,
  /* 13956 */ 'S', '_', 'E', 'N', 'D', 'P', 'G', 'M', 0,
  /* 13965 */ 'S', '_', 'B', 'U', 'F', 'F', 'E', 'R', '_', 'L', 'O', 'A', 'D', '_', 'D', 'W', 'O', 'R', 'D', 'X', '2', '_', 'I', 'M', 'M', 0,
  /* 13991 */ 'S', '_', 'L', 'O', 'A', 'D', '_', 'D', 'W', 'O', 'R', 'D', 'X', '2', '_', 'I', 'M', 'M', 0,
  /* 14010 */ 'S', '_', 'B', 'U', 'F', 'F', 'E', 'R', '_', 'L', 'O', 'A', 'D', '_', 'D', 'W', 'O', 'R', 'D', 'X', '4', '_', 'I', 'M', 'M', 0,
  /* 14036 */ 'S', '_', 'L', 'O', 'A', 'D', '_', 'D', 'W', 'O', 'R', 'D', 'X', '4', '_', 'I', 'M', 'M', 0,
  /* 14055 */ 'S', '_', 'B', 'U', 'F', 'F', 'E', 'R', '_', 'L', 'O', 'A', 'D', '_', 'D', 'W', 'O', 'R', 'D', 'X', '1', '6', '_', 'I', 'M', 'M', 0,
  /* 14082 */ 'S', '_', 'L', 'O', 'A', 'D', '_', 'D', 'W', 'O', 'R', 'D', 'X', '1', '6', '_', 'I', 'M', 'M', 0,
  /* 14102 */ 'S', '_', 'B', 'U', 'F', 'F', 'E', 'R', '_', 'L', 'O', 'A', 'D', '_', 'D', 'W', 'O', 'R', 'D', 'X', '8', '_', 'I', 'M', 'M', 0,
  /* 14128 */ 'S', '_', 'L', 'O', 'A', 'D', '_', 'D', 'W', 'O', 'R', 'D', 'X', '8', '_', 'I', 'M', 'M', 0,
  /* 14147 */ 'S', '_', 'B', 'U', 'F', 'F', 'E', 'R', '_', 'L', 'O', 'A', 'D', '_', 'D', 'W', 'O', 'R', 'D', '_', 'I', 'M', 'M', 0,
  /* 14171 */ 'S', '_', 'L', 'O', 'A', 'D', '_', 'D', 'W', 'O', 'R', 'D', '_', 'I', 'M', 'M', 0,
  /* 14188 */ 'I', 'N', 'L', 'I', 'N', 'E', 'A', 'S', 'M', 0,
  /* 14198 */ 'B', 'U', 'F', 'F', 'E', 'R', '_', 'L', 'O', 'A', 'D', '_', 'D', 'W', 'O', 'R', 'D', 'X', '2', '_', 'O', 'F', 'F', 'E', 'N', 0,
  /* 14224 */ 'B', 'U', 'F', 'F', 'E', 'R', '_', 'L', 'O', 'A', 'D', '_', 'D', 'W', 'O', 'R', 'D', 'X', '4', '_', 'O', 'F', 'F', 'E', 'N', 0,
  /* 14250 */ 'B', 'U', 'F', 'F', 'E', 'R', '_', 'L', 'O', 'A', 'D', '_', 'D', 'W', 'O', 'R', 'D', '_', 'O', 'F', 'F', 'E', 'N', 0,
  /* 14274 */ 'B', 'U', 'F', 'F', 'E', 'R', '_', 'L', 'O', 'A', 'D', '_', 'S', 'B', 'Y', 'T', 'E', '_', 'O', 'F', 'F', 'E', 'N', 0,
  /* 14298 */ 'B', 'U', 'F', 'F', 'E', 'R', '_', 'L', 'O', 'A', 'D', '_', 'U', 'B', 'Y', 'T', 'E', '_', 'O', 'F', 'F', 'E', 'N', 0,
  /* 14322 */ 'B', 'U', 'F', 'F', 'E', 'R', '_', 'L', 'O', 'A', 'D', '_', 'S', 'S', 'H', 'O', 'R', 'T', '_', 'O', 'F', 'F', 'E', 'N', 0,
  /* 14347 */ 'B', 'U', 'F', 'F', 'E', 'R', '_', 'L', 'O', 'A', 'D', '_', 'U', 'S', 'H', 'O', 'R', 'T', '_', 'O', 'F', 'F', 'E', 'N', 0,
  /* 14372 */ 'B', 'U', 'F', 'F', 'E', 'R', '_', 'L', 'O', 'A', 'D', '_', 'F', 'O', 'R', 'M', 'A', 'T', '_', 'X', 'Y', 'Z', 'W', '_', 'O', 'F', 'F', 'E', 'N', 0,
  /* 14402 */ 'B', 'U', 'F', 'F', 'E', 'R', '_', 'L', 'O', 'A', 'D', '_', 'D', 'W', 'O', 'R', 'D', 'X', '2', '_', 'I', 'D', 'X', 'E', 'N', 0,
  /* 14428 */ 'B', 'U', 'F', 'F', 'E', 'R', '_', 'L', 'O', 'A', 'D', '_', 'D', 'W', 'O', 'R', 'D', 'X', '4', '_', 'I', 'D', 'X', 'E', 'N', 0,
  /* 14454 */ 'B', 'U', 'F', 'F', 'E', 'R', '_', 'L', 'O', 'A', 'D', '_', 'D', 'W', 'O', 'R', 'D', '_', 'I', 'D', 'X', 'E', 'N', 0,
  /* 14478 */ 'B', 'U', 'F', 'F', 'E', 'R', '_', 'L', 'O', 'A', 'D', '_', 'S', 'B', 'Y', 'T', 'E', '_', 'I', 'D', 'X', 'E', 'N', 0,
  /* 14502 */ 'B', 'U', 'F', 'F', 'E', 'R', '_', 'L', 'O', 'A', 'D', '_', 'U', 'B', 'Y', 'T', 'E', '_', 'I', 'D', 'X', 'E', 'N', 0,
  /* 14526 */ 'B', 'U', 'F', 'F', 'E', 'R', '_', 'L', 'O', 'A', 'D', '_', 'S', 'S', 'H', 'O', 'R', 'T', '_', 'I', 'D', 'X', 'E', 'N', 0,
  /* 14551 */ 'B', 'U', 'F', 'F', 'E', 'R', '_', 'L', 'O', 'A', 'D', '_', 'U', 'S', 'H', 'O', 'R', 'T', '_', 'I', 'D', 'X', 'E', 'N', 0,
  /* 14576 */ 'B', 'U', 'F', 'F', 'E', 'R', '_', 'L', 'O', 'A', 'D', '_', 'F', 'O', 'R', 'M', 'A', 'T', '_', 'X', 'Y', 'Z', 'W', '_', 'I', 'D', 'X', 'E', 'N', 0,
  /* 14606 */ 'E', 'N', 'D', 'M', 'A', 'I', 'N', 0,
  /* 14614 */ 'M', 'I', 'N', 0,
  /* 14618 */ 'R', 'E', 'T', 'U', 'R', 'N', 0,
  /* 14625 */ 'R', 'E', 'T', 'D', 'Y', 'N', 0,
  /* 14632 */ 'T', 'E', 'X', '_', 'G', 'E', 'T', '_', 'T', 'E', 'X', 'T', 'U', 'R', 'E', '_', 'R', 'E', 'S', 'I', 'N', 'F', 'O', 0,
  /* 14656 */ 'I', 'M', 'A', 'G', 'E', '_', 'G', 'E', 'T', '_', 'R', 'E', 'S', 'I', 'N', 'F', 'O', 0,
  /* 14674 */ 'I', 'M', 'A', 'G', 'E', '_', 'L', 'O', 'A', 'D', '_', 'M', 'I', 'P', 0,
  /* 14689 */ 'J', 'U', 'M', 'P', 0,
  /* 14694 */ 'E', 'N', 'D', 'L', 'O', 'O', 'P', 0,
  /* 14702 */ 'W', 'H', 'I', 'L', 'E', 'L', 'O', 'O', 'P', 0,
  /* 14712 */ 'S', 'I', '_', 'L', 'O', 'O', 'P', 0,
  /* 14720 */ 'E', 'X', 'P', 0,
  /* 14724 */ 'G', 'R', 'O', 'U', 'P', '_', 'B', 'A', 'R', 'R', 'I', 'E', 'R', 0,
  /* 14738 */ 'S', '_', 'B', 'A', 'R', 'R', 'I', 'E', 'R', 0,
  /* 14748 */ 'C', 'F', '_', 'A', 'L', 'U', '_', 'P', 'O', 'P', '_', 'A', 'F', 'T', 'E', 'R', 0,
  /* 14765 */ 'F', 'L', 'O', 'O', 'R', 0,
  /* 14771 */ 'S', '_', 'B', 'U', 'F', 'F', 'E', 'R', '_', 'L', 'O', 'A', 'D', '_', 'D', 'W', 'O', 'R', 'D', 'X', '2', '_', 'S', 'G', 'P', 'R', 0,
  /* 14798 */ 'S', '_', 'L', 'O', 'A', 'D', '_', 'D', 'W', 'O', 'R', 'D', 'X', '2', '_', 'S', 'G', 'P', 'R', 0,
  /* 14818 */ 'S', '_', 'B', 'U', 'F', 'F', 'E', 'R', '_', 'L', 'O', 'A', 'D', '_', 'D', 'W', 'O', 'R', 'D', 'X', '4', '_', 'S', 'G', 'P', 'R', 0,
  /* 14845 */ 'S', '_', 'L', 'O', 'A', 'D', '_', 'D', 'W', 'O', 'R', 'D', 'X', '4', '_', 'S', 'G', 'P', 'R', 0,
  /* 14865 */ 'S', '_', 'B', 'U', 'F', 'F', 'E', 'R', '_', 'L', 'O', 'A', 'D', '_', 'D', 'W', 'O', 'R', 'D', 'X', '1', '6', '_', 'S', 'G', 'P', 'R', 0,
  /* 14893 */ 'S', '_', 'L', 'O', 'A', 'D', '_', 'D', 'W', 'O', 'R', 'D', 'X', '1', '6', '_', 'S', 'G', 'P', 'R', 0,
  /* 14914 */ 'S', '_', 'B', 'U', 'F', 'F', 'E', 'R', '_', 'L', 'O', 'A', 'D', '_', 'D', 'W', 'O', 'R', 'D', 'X', '8', '_', 'S', 'G', 'P', 'R', 0,
  /* 14941 */ 'S', '_', 'L', 'O', 'A', 'D', '_', 'D', 'W', 'O', 'R', 'D', 'X', '8', '_', 'S', 'G', 'P', 'R', 0,
  /* 14961 */ 'S', '_', 'B', 'U', 'F', 'F', 'E', 'R', '_', 'L', 'O', 'A', 'D', '_', 'D', 'W', 'O', 'R', 'D', '_', 'S', 'G', 'P', 'R', 0,
  /* 14986 */ 'S', '_', 'L', 'O', 'A', 'D', '_', 'D', 'W', 'O', 'R', 'D', '_', 'S', 'G', 'P', 'R', 0,
  /* 15004 */ 'L', 'I', 'T', 'E', 'R', 'A', 'L', 'S', 0,
  /* 15013 */ 'C', 'O', 'P', 'Y', '_', 'T', 'O', '_', 'R', 'E', 'G', 'C', 'L', 'A', 'S', 'S', 0,
  /* 15030 */ 'F', 'R', 'A', 'C', 'T', 0,
  /* 15036 */ 'L', 'D', 'S', '_', 'R', 'E', 'A', 'D', '_', 'R', 'E', 'T', 0,
  /* 15049 */ 'I', 'F', '_', 'P', 'R', 'E', 'D', 'I', 'C', 'A', 'T', 'E', '_', 'S', 'E', 'T', 0,
  /* 15066 */ 'K', 'I', 'L', 'L', 'G', 'T', 0,
  /* 15073 */ 'S', 'G', 'T', 0,
  /* 15077 */ 'P', 'R', 'E', 'D', '_', 'S', 'E', 'T', 'G', 'T', 0,
  /* 15088 */ 'D', 'E', 'F', 'A', 'U', 'L', 'T', 0,
  /* 15096 */ 'S', '_', 'W', 'A', 'I', 'T', 'C', 'N', 'T', 0,
  /* 15106 */ 'S', 'E', 'T', 'G', 'E', '_', 'U', 'I', 'N', 'T', 0,
  /* 15117 */ 'M', 'I', 'N', '_', 'U', 'I', 'N', 'T', 0,
  /* 15126 */ 'S', 'E', 'T', 'G', 'T', '_', 'U', 'I', 'N', 'T', 0,
  /* 15137 */ 'M', 'A', 'X', '_', 'U', 'I', 'N', 'T', 0,
  /* 15146 */ 'S', 'U', 'B', '_', 'I', 'N', 'T', 0,
  /* 15154 */ 'A', 'D', 'D', '_', 'I', 'N', 'T', 0,
  /* 15162 */ 'A', 'N', 'D', '_', 'I', 'N', 'T', 0,
  /* 15170 */ 'C', 'N', 'D', 'E', '_', 'I', 'N', 'T', 0,
  /* 15179 */ 'C', 'N', 'D', 'G', 'E', '_', 'I', 'N', 'T', 0,
  /* 15189 */ 'P', 'R', 'E', 'D', '_', 'S', 'E', 'T', 'G', 'E', '_', 'I', 'N', 'T', 0,
  /* 15204 */ 'P', 'R', 'E', 'D', '_', 'S', 'E', 'T', 'N', 'E', '_', 'I', 'N', 'T', 0,
  /* 15219 */ 'P', 'R', 'E', 'D', '_', 'S', 'E', 'T', 'E', '_', 'I', 'N', 'T', 0,
  /* 15233 */ 'M', 'I', 'N', '_', 'I', 'N', 'T', 0,
  /* 15241 */ 'X', 'O', 'R', '_', 'I', 'N', 'T', 0,
  /* 15249 */ 'C', 'N', 'D', 'G', 'T', '_', 'I', 'N', 'T', 0,
  /* 15259 */ 'P', 'R', 'E', 'D', '_', 'S', 'E', 'T', 'G', 'T', '_', 'I', 'N', 'T', 0,
  /* 15274 */ 'N', 'O', 'T', '_', 'I', 'N', 'T', 0,
  /* 15282 */ 'M', 'A', 'X', '_', 'I', 'N', 'T', 0,
  /* 15290 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 15305 */ 'L', 'O', 'A', 'D', '_', 'C', 'O', 'N', 'S', 'T', 0,
  /* 15316 */ 'C', 'F', '_', 'A', 'L', 'U', 0,
  /* 15323 */ 'M', 'O', 'V', 0,
  /* 15327 */ 'T', 'E', 'X', '_', 'G', 'E', 'T', '_', 'G', 'R', 'A', 'D', 'I', 'E', 'N', 'T', 'S', '_', 'V', 0,
  /* 15347 */ 'T', 'E', 'X', '_', 'S', 'E', 'T', '_', 'G', 'R', 'A', 'D', 'I', 'E', 'N', 'T', 'S', '_', 'V', 0,
  /* 15367 */ 'T', 'X', 'D', '_', 'S', 'H', 'A', 'D', 'O', 'W', 0,
  /* 15378 */ 'T', 'B', 'U', 'F', 'F', 'E', 'R', '_', 'L', 'O', 'A', 'D', '_', 'F', 'O', 'R', 'M', 'A', 'T', '_', 'X', 'Y', 'Z', 'W', 0,
  /* 15403 */ 'I', 'N', 'T', 'E', 'R', 'P', '_', 'Z', 'W', 0,
  /* 15413 */ 'I', 'N', 'T', 'E', 'R', 'P', '_', 'P', 'A', 'I', 'R', '_', 'Z', 'W', 0,
  /* 15428 */ 'M', 'A', 'X', 0,
  /* 15432 */ 'P', 'R', 'E', 'D', '_', 'X', 0,
  /* 15439 */ 'C', 'O', 'N', 'S', 'T', '_', 'C', 'O', 'P', 'Y', 0,
  /* 15450 */ 'I', 'N', 'T', 'E', 'R', 'P', '_', 'X', 'Y', 0,
  /* 15460 */ 'I', 'N', 'T', 'E', 'R', 'P', '_', 'P', 'A', 'I', 'R', '_', 'X', 'Y', 0,
  /* 15475 */ 'S', '_', 'C', 'B', 'R', 'A', 'N', 'C', 'H', '_', 'V', 'C', 'C', 'Z', 0,
  /* 15490 */ 'S', '_', 'C', 'B', 'R', 'A', 'N', 'C', 'H', '_', 'E', 'X', 'E', 'C', 'Z', 0,
  /* 15506 */ 'S', '_', 'C', 'B', 'R', 'A', 'N', 'C', 'H', '_', 'V', 'C', 'C', 'N', 'Z', 0,
  /* 15522 */ 'S', '_', 'C', 'B', 'R', 'A', 'N', 'C', 'H', '_', 'E', 'X', 'E', 'C', 'N', 'Z', 0,
  /* 15539 */ 'R', '6', '0', '0', '_', 'R', 'e', 'g', 'i', 's', 't', 'e', 'r', 'L', 'o', 'a', 'd', 0,
  /* 15557 */ 'R', '6', '0', '0', '_', 'R', 'e', 'g', 'i', 's', 't', 'e', 'r', 'S', 't', 'o', 'r', 'e', 0,
  /* 15576 */ 'R', '6', '0', '0', '_', 'E', 'x', 'p', 'o', 'r', 't', 'B', 'u', 'f', 0,
  /* 15591 */ 'E', 'G', '_', 'E', 'x', 'p', 'o', 'r', 't', 'B', 'u', 'f', 0,
  /* 15604 */ 'V', 'T', 'X', '_', 'R', 'E', 'A', 'D', '_', 'G', 'L', 'O', 'B', 'A', 'L', '_', '3', '2', '_', 'e', 'g', 0,
  /* 15626 */ 'V', 'T', 'X', '_', 'R', 'E', 'A', 'D', '_', 'P', 'A', 'R', 'A', 'M', '_', '3', '2', '_', 'e', 'g', 0,
  /* 15647 */ 'R', 'A', 'T', '_', 'W', 'R', 'I', 'T', 'E', '_', 'C', 'A', 'C', 'H', 'E', 'L', 'E', 'S', 'S', '_', '3', '2', '_', 'e', 'g', 0,
  /* 15673 */ 'M', 'U', 'L', 'A', 'D', 'D', '_', 'U', 'I', 'N', 'T', '2', '4', '_', 'e', 'g', 0,
  /* 15690 */ 'M', 'U', 'L', '_', 'U', 'I', 'N', 'T', '2', '4', '_', 'e', 'g', 0,
  /* 15704 */ 'V', 'T', 'X', '_', 'R', 'E', 'A', 'D', '_', 'G', 'L', 'O', 'B', 'A', 'L', '_', '6', '4', '_', 'e', 'g', 0,
  /* 15726 */ 'V', 'T', 'X', '_', 'R', 'E', 'A', 'D', '_', 'P', 'A', 'R', 'A', 'M', '_', '6', '4', '_', 'e', 'g', 0,
  /* 15747 */ 'R', 'A', 'T', '_', 'W', 'R', 'I', 'T', 'E', '_', 'C', 'A', 'C', 'H', 'E', 'L', 'E', 'S', 'S', '_', '6', '4', '_', 'e', 'g', 0,
  /* 15773 */ 'D', 'O', 'T', '4', '_', 'e', 'g', 0,
  /* 15781 */ 'V', 'T', 'X', '_', 'R', 'E', 'A', 'D', '_', 'G', 'L', 'O', 'B', 'A', 'L', '_', '1', '6', '_', 'e', 'g', 0,
  /* 15803 */ 'V', 'T', 'X', '_', 'R', 'E', 'A', 'D', '_', 'P', 'A', 'R', 'A', 'M', '_', '1', '6', '_', 'e', 'g', 0,
  /* 15824 */ 'V', 'T', 'X', '_', 'R', 'E', 'A', 'D', '_', 'G', 'L', 'O', 'B', 'A', 'L', '_', '1', '2', '8', '_', 'e', 'g', 0,
  /* 15847 */ 'V', 'T', 'X', '_', 'R', 'E', 'A', 'D', '_', 'P', 'A', 'R', 'A', 'M', '_', '1', '2', '8', '_', 'e', 'g', 0,
  /* 15869 */ 'R', 'A', 'T', '_', 'W', 'R', 'I', 'T', 'E', '_', 'C', 'A', 'C', 'H', 'E', 'L', 'E', 'S', 'S', '_', '1', '2', '8', '_', 'e', 'g', 0,
  /* 15896 */ 'V', 'T', 'X', '_', 'R', 'E', 'A', 'D', '_', 'G', 'L', 'O', 'B', 'A', 'L', '_', '8', '_', 'e', 'g', 0,
  /* 15917 */ 'V', 'T', 'X', '_', 'R', 'E', 'A', 'D', '_', 'P', 'A', 'R', 'A', 'M', '_', '8', '_', 'e', 'g', 0,
  /* 15937 */ 'M', 'U', 'L', 'A', 'D', 'D', '_', 'e', 'g', 0,
  /* 15947 */ 'L', 'O', 'G', '_', 'C', 'L', 'A', 'M', 'P', 'E', 'D', '_', 'e', 'g', 0,
  /* 15962 */ 'R', 'E', 'C', 'I', 'P', '_', 'C', 'L', 'A', 'M', 'P', 'E', 'D', '_', 'e', 'g', 0,
  /* 15979 */ 'R', 'E', 'C', 'I', 'P', 'S', 'Q', 'R', 'T', '_', 'C', 'L', 'A', 'M', 'P', 'E', 'D', '_', 'e', 'g', 0,
  /* 16000 */ 'C', 'N', 'D', 'E', '_', 'e', 'g', 0,
  /* 16008 */ 'M', 'U', 'L', 'A', 'D', 'D', '_', 'I', 'E', 'E', 'E', '_', 'e', 'g', 0,
  /* 16023 */ 'L', 'O', 'G', '_', 'I', 'E', 'E', 'E', '_', 'e', 'g', 0,
  /* 16035 */ 'R', 'E', 'C', 'I', 'P', '_', 'I', 'E', 'E', 'E', '_', 'e', 'g', 0,
  /* 16049 */ 'E', 'X', 'P', '_', 'I', 'E', 'E', 'E', '_', 'e', 'g', 0,
  /* 16061 */ 'R', 'E', 'C', 'I', 'P', 'S', 'Q', 'R', 'T', '_', 'I', 'E', 'E', 'E', '_', 'e', 'g', 0,
  /* 16079 */ 'C', 'N', 'D', 'G', 'E', '_', 'e', 'g', 0,
  /* 16088 */ 'L', 'S', 'H', 'L', '_', 'e', 'g', 0,
  /* 16096 */ 'S', 'I', 'N', '_', 'e', 'g', 0,
  /* 16103 */ 'A', 'S', 'H', 'R', '_', 'e', 'g', 0,
  /* 16111 */ 'L', 'S', 'H', 'R', '_', 'e', 'g', 0,
  /* 16119 */ 'C', 'O', 'S', '_', 'e', 'g', 0,
  /* 16126 */ 'C', 'N', 'D', 'G', 'T', '_', 'e', 'g', 0,
  /* 16135 */ 'M', 'U', 'L', '_', 'L', 'I', 'T', '_', 'e', 'g', 0,
  /* 16146 */ 'U', 'I', 'N', 'T', '_', 'T', 'O', '_', 'F', 'L', 'T', '_', 'e', 'g', 0,
  /* 16161 */ 'B', 'F', 'E', '_', 'U', 'I', 'N', 'T', '_', 'e', 'g', 0,
  /* 16173 */ 'M', 'U', 'L', 'H', 'I', '_', 'U', 'I', 'N', 'T', '_', 'e', 'g', 0,
  /* 16187 */ 'M', 'U', 'L', 'L', 'O', '_', 'U', 'I', 'N', 'T', '_', 'e', 'g', 0,
  /* 16201 */ 'F', 'L', 'T', '_', 'T', 'O', '_', 'U', 'I', 'N', 'T', '_', 'e', 'g', 0,
  /* 16216 */ 'R', 'E', 'C', 'I', 'P', '_', 'U', 'I', 'N', 'T', '_', 'e', 'g', 0,
  /* 16230 */ 'M', 'O', 'V', 'A', '_', 'I', 'N', 'T', '_', 'e', 'g', 0,
  /* 16242 */ 'B', 'F', 'I', '_', 'I', 'N', 'T', '_', 'e', 'g', 0,
  /* 16253 */ 'M', 'U', 'L', 'H', 'I', '_', 'I', 'N', 'T', '_', 'e', 'g', 0,
  /* 16266 */ 'B', 'I', 'T', '_', 'A', 'L', 'I', 'G', 'N', '_', 'I', 'N', 'T', '_', 'e', 'g', 0,
  /* 16283 */ 'M', 'U', 'L', 'L', 'O', '_', 'I', 'N', 'T', '_', 'e', 'g', 0,
  /* 16296 */ 'F', 'L', 'T', '_', 'T', 'O', '_', 'I', 'N', 'T', '_', 'e', 'g', 0,
  /* 16310 */ 'C', 'U', 'B', 'E', '_', 'r', '6', '0', '0', '_', 'r', 'e', 'a', 'l', 0,
  /* 16325 */ 'C', 'U', 'B', 'E', '_', 'e', 'g', '_', 'r', 'e', 'a', 'l', 0,
  /* 16338 */ 'R', 'A', 'T', '_', 'S', 'T', 'O', 'R', 'E', '_', 'D', 'W', 'O', 'R', 'D', '3', '2', '_', 'c', 'm', 0,
  /* 16359 */ 'V', 'T', 'X', '_', 'R', 'E', 'A', 'D', '_', 'G', 'L', 'O', 'B', 'A', 'L', '_', '3', '2', '_', 'c', 'm', 0,
  /* 16381 */ 'V', 'T', 'X', '_', 'R', 'E', 'A', 'D', '_', 'P', 'A', 'R', 'A', 'M', '_', '3', '2', '_', 'c', 'm', 0,
  /* 16402 */ 'M', 'U', 'L', 'A', 'D', 'D', '_', 'I', 'N', 'T', '2', '4', '_', 'c', 'm', 0,
  /* 16418 */ 'M', 'U', 'L', '_', 'I', 'N', 'T', '2', '4', '_', 'c', 'm', 0,
  /* 16431 */ 'R', 'A', 'T', '_', 'S', 'T', 'O', 'R', 'E', '_', 'D', 'W', 'O', 'R', 'D', '6', '4', '_', 'c', 'm', 0,
  /* 16452 */ 'V', 'T', 'X', '_', 'R', 'E', 'A', 'D', '_', 'G', 'L', 'O', 'B', 'A', 'L', '_', '6', '4', '_', 'c', 'm', 0,
  /* 16474 */ 'V', 'T', 'X', '_', 'R', 'E', 'A', 'D', '_', 'P', 'A', 'R', 'A', 'M', '_', '6', '4', '_', 'c', 'm', 0,
  /* 16495 */ 'V', 'T', 'X', '_', 'R', 'E', 'A', 'D', '_', 'G', 'L', 'O', 'B', 'A', 'L', '_', '1', '6', '_', 'c', 'm', 0,
  /* 16517 */ 'V', 'T', 'X', '_', 'R', 'E', 'A', 'D', '_', 'P', 'A', 'R', 'A', 'M', '_', '1', '6', '_', 'c', 'm', 0,
  /* 16538 */ 'V', 'T', 'X', '_', 'R', 'E', 'A', 'D', '_', 'G', 'L', 'O', 'B', 'A', 'L', '_', '1', '2', '8', '_', 'c', 'm', 0,
  /* 16561 */ 'V', 'T', 'X', '_', 'R', 'E', 'A', 'D', '_', 'P', 'A', 'R', 'A', 'M', '_', '1', '2', '8', '_', 'c', 'm', 0,
  /* 16583 */ 'V', 'T', 'X', '_', 'R', 'E', 'A', 'D', '_', 'G', 'L', 'O', 'B', 'A', 'L', '_', '8', '_', 'c', 'm', 0,
  /* 16604 */ 'V', 'T', 'X', '_', 'R', 'E', 'A', 'D', '_', 'P', 'A', 'R', 'A', 'M', '_', '8', '_', 'c', 'm', 0,
  /* 16624 */ 'R', 'E', 'C', 'I', 'P', '_', 'C', 'L', 'A', 'M', 'P', 'E', 'D', '_', 'c', 'm', 0,
  /* 16641 */ 'R', 'E', 'C', 'I', 'P', 'S', 'Q', 'R', 'T', '_', 'C', 'L', 'A', 'M', 'P', 'E', 'D', '_', 'c', 'm', 0,
  /* 16662 */ 'L', 'O', 'G', '_', 'I', 'E', 'E', 'E', '_', 'c', 'm', 0,
  /* 16674 */ 'R', 'E', 'C', 'I', 'P', '_', 'I', 'E', 'E', 'E', '_', 'c', 'm', 0,
  /* 16688 */ 'E', 'X', 'P', '_', 'I', 'E', 'E', 'E', '_', 'c', 'm', 0,
  /* 16700 */ 'R', 'E', 'C', 'I', 'P', 'S', 'Q', 'R', 'T', '_', 'I', 'E', 'E', 'E', '_', 'c', 'm', 0,
  /* 16718 */ 'S', 'I', 'N', '_', 'c', 'm', 0,
  /* 16725 */ 'C', 'O', 'S', '_', 'c', 'm', 0,
  /* 16732 */ 'M', 'U', 'L', 'H', 'I', '_', 'U', 'I', 'N', 'T', '_', 'c', 'm', 0,
  /* 16746 */ 'M', 'U', 'L', 'L', 'O', '_', 'U', 'I', 'N', 'T', '_', 'c', 'm', 0,
  /* 16760 */ 'M', 'U', 'L', 'H', 'I', '_', 'I', 'N', 'T', '_', 'c', 'm', 0,
  /* 16773 */ 'M', 'U', 'L', 'L', 'O', '_', 'I', 'N', 'T', '_', 'c', 'm', 0,
  /* 16786 */ 'C', 'U', 'B', 'E', '_', 'r', '6', '0', '0', '_', 'p', 's', 'e', 'u', 'd', 'o', 0,
  /* 16803 */ 'C', 'U', 'B', 'E', '_', 'e', 'g', '_', 'p', 's', 'e', 'u', 'd', 'o', 0,
  /* 16818 */ 'R', '6', '0', '0', '_', 'E', 'x', 'p', 'o', 'r', 't', 'S', 'w', 'z', 0,
  /* 16833 */ 'E', 'G', '_', 'E', 'x', 'p', 'o', 'r', 't', 'S', 'w', 'z', 0,
};

extern const unsigned AMDGPUInstrNameIndices[] = {
    13799U, 14188U, 13847U, 13860U, 13838U, 13877U, 13543U, 13558U, 
    13486U, 13572U, 15013U, 13457U, 13281U, 15445U, 13318U, 15290U, 
    13203U, 13192U, 15154U, 13415U, 15162U, 16103U, 381U, 16161U, 
    16242U, 16266U, 13742U, 6825U, 6991U, 13811U, 6814U, 6980U, 
    6938U, 7104U, 6879U, 7045U, 7810U, 14402U, 14198U, 7837U, 
    14428U, 14224U, 7864U, 14454U, 14250U, 7991U, 14576U, 14372U, 
    7889U, 14478U, 14274U, 7939U, 14526U, 14322U, 7914U, 14502U, 
    14298U, 7965U, 14551U, 14347U, 13226U, 7143U, 12971U, 13389U, 
    13869U, 15316U, 14748U, 13370U, 13698U, 163U, 13625U, 47U, 
    13614U, 34U, 13946U, 13604U, 22U, 13654U, 101U, 13586U, 
    0U, 13595U, 11U, 90U, 15170U, 16000U, 260U, 15179U, 
    16079U, 351U, 15249U, 16126U, 410U, 15439U, 13467U, 6792U, 
    6958U, 6898U, 7064U, 6841U, 7007U, 16725U, 16119U, 401U, 
    571U, 16803U, 16325U, 16786U, 16310U, 15088U, 15773U, 179U, 
    12992U, 691U, 787U, 15591U, 16833U, 13397U, 13212U, 13099U, 
    13499U, 14694U, 14606U, 13749U, 13665U, 114U, 14720U, 16688U, 
    16049U, 317U, 153U, 13402U, 14765U, 16296U, 546U, 16201U, 
    483U, 64U, 15030U, 13102U, 14724U, 6806U, 6972U, 6921U, 
    7087U, 6863U, 7029U, 15049U, 14656U, 14674U, 13325U, 13084U, 
    13144U, 13067U, 13249U, 13886U, 13266U, 13918U, 638U, 15460U, 
    15413U, 13172U, 15450U, 15403U, 16147U, 435U, 14689U, 13216U, 
    15066U, 15036U, 13447U, 15004U, 15305U, 15947U, 201U, 16662U, 
    16023U, 287U, 13640U, 74U, 16088U, 362U, 16111U, 391U, 
    13436U, 15428U, 15282U, 15137U, 14614U, 15233U, 15117U, 15323U, 
    16230U, 1154U, 1447U, 13882U, 16008U, 270U, 16402U, 15673U, 
    15937U, 189U, 16760U, 16253U, 516U, 16732U, 16173U, 451U, 
    16773U, 16283U, 531U, 16746U, 16187U, 467U, 13294U, 16418U, 
    16135U, 421U, 15690U, 15274U, 15242U, 13188U, 13691U, 144U, 
    13426U, 15219U, 13307U, 15189U, 15077U, 15259U, 13359U, 15204U, 
    15432U, 15576U, 16818U, 15539U, 15557U, 16338U, 16431U, 15869U, 
    15647U, 15747U, 16641U, 15979U, 237U, 16700U, 16061U, 331U, 
    16624U, 15962U, 218U, 16674U, 16035U, 301U, 16216U, 500U, 
    14625U, 14618U, 13349U, 13431U, 602U, 15224U, 580U, 15194U, 
    15106U, 612U, 15264U, 15126U, 591U, 15209U, 13303U, 15073U, 
    16718U, 16096U, 372U, 562U, 13113U, 13829U, 13394U, 13803U, 
    13476U, 13505U, 13817U, 12998U, 7124U, 12952U, 13018U, 13128U, 
    13874U, 14712U, 13355U, 15146U, 13752U, 1338U, 1506U, 1613U, 
    1392U, 1254U, 1634U, 668U, 7192U, 7215U, 742U, 7433U, 
    7276U, 1495U, 7788U, 14738U, 1264U, 7778U, 1644U, 8022U, 
    878U, 7490U, 13740U, 1002U, 7610U, 14055U, 14865U, 13965U, 
    14771U, 14010U, 14818U, 14102U, 14914U, 14147U, 14961U, 15522U, 
    15490U, 623U, 653U, 15506U, 15475U, 1414U, 1013U, 7621U, 
    1781U, 1284U, 1664U, 1516U, 1808U, 1311U, 1691U, 1352U, 
    1718U, 1555U, 1835U, 1482U, 1795U, 1298U, 1678U, 1530U, 
    1822U, 1325U, 1705U, 1366U, 1732U, 1569U, 1849U, 963U, 
    7586U, 13956U, 1543U, 7384U, 816U, 752U, 14082U, 14893U, 
    13991U, 14798U, 14036U, 14845U, 14128U, 14941U, 14171U, 14986U, 
    867U, 7468U, 898U, 7510U, 1582U, 1862U, 1459U, 1758U, 
    1426U, 717U, 7408U, 949U, 7572U, 1024U, 7632U, 703U, 
    771U, 1403U, 1437U, 731U, 7422U, 7256U, 920U, 7543U, 
    7315U, 992U, 7600U, 680U, 7204U, 7236U, 940U, 7563U, 
    7353U, 852U, 7453U, 7443U, 7396U, 829U, 1592U, 1244U, 
    1603U, 7371U, 15096U, 888U, 7500U, 909U, 7532U, 7295U, 
    930U, 7553U, 7334U, 15378U, 13759U, 15327U, 14632U, 13196U, 
    13338U, 13159U, 13712U, 13903U, 13037U, 13727U, 13933U, 13053U, 
    13779U, 15347U, 13511U, 13528U, 13107U, 13245U, 15367U, 16146U, 
    434U, 16538U, 15824U, 16495U, 15781U, 16359U, 15604U, 16452U, 
    15704U, 16583U, 15896U, 16561U, 15847U, 16517U, 15803U, 16381U, 
    15626U, 16474U, 15726U, 16604U, 15917U, 4523U, 10683U, 2356U, 
    8516U, 7662U, 4107U, 10267U, 977U, 800U, 1954U, 8114U, 
    4458U, 10618U, 4323U, 10483U, 7799U, 1274U, 1654U, 842U, 
    2098U, 8258U, 2186U, 8346U, 2964U, 9124U, 3322U, 9482U, 
    5674U, 11834U, 2732U, 8892U, 5257U, 11417U, 2499U, 8659U, 
    5040U, 11200U, 3571U, 9731U, 5893U, 12053U, 2647U, 8807U, 
    5188U, 11348U, 2899U, 9059U, 5404U, 11564U, 3719U, 9879U, 
    6041U, 12201U, 3249U, 9409U, 5601U, 11761U, 2426U, 8586U, 
    4967U, 11127U, 3498U, 9658U, 5820U, 11980U, 2574U, 8734U, 
    5115U, 11275U, 2826U, 8986U, 5331U, 11491U, 3646U, 9806U, 
    5968U, 12128U, 3071U, 9231U, 5473U, 11633U, 3830U, 9990U, 
    6152U, 12312U, 3900U, 10060U, 6222U, 12382U, 3286U, 9446U, 
    5638U, 11798U, 2698U, 8858U, 5223U, 11383U, 2463U, 8623U, 
    5004U, 11164U, 3535U, 9695U, 5857U, 12017U, 2611U, 8771U, 
    5152U, 11312U, 2863U, 9023U, 5368U, 11528U, 3683U, 9843U, 
    6005U, 12165U, 3211U, 9371U, 5563U, 11723U, 2388U, 8548U, 
    4929U, 11089U, 3460U, 9620U, 5782U, 11942U, 2536U, 8696U, 
    5077U, 11237U, 2788U, 8948U, 5293U, 11453U, 3608U, 9768U, 
    5930U, 12090U, 3037U, 9197U, 5439U, 11599U, 3792U, 9952U, 
    6114U, 12274U, 3866U, 10026U, 6188U, 12348U, 3405U, 9565U, 
    5727U, 11887U, 3304U, 9464U, 5656U, 11816U, 4305U, 10465U, 
    6395U, 12555U, 4722U, 10882U, 6671U, 12831U, 2715U, 8875U, 
    5240U, 11400U, 4242U, 10402U, 6361U, 12521U, 4659U, 10819U, 
    6637U, 12797U, 2481U, 8641U, 5022U, 11182U, 4138U, 10298U, 
    6257U, 12417U, 4555U, 10715U, 6533U, 12693U, 3553U, 9713U, 
    5875U, 12035U, 4355U, 10515U, 6430U, 12590U, 4757U, 10917U, 
    6706U, 12866U, 2629U, 8789U, 5170U, 11330U, 4173U, 10333U, 
    6292U, 12452U, 4590U, 10750U, 6568U, 12728U, 2881U, 9041U, 
    5386U, 11546U, 3701U, 9861U, 6023U, 12183U, 4390U, 10550U, 
    6465U, 12625U, 4792U, 10952U, 6741U, 12901U, 3230U, 9390U, 
    5582U, 11742U, 4208U, 10368U, 6327U, 12487U, 4625U, 10785U, 
    6603U, 12763U, 2407U, 8567U, 4948U, 11108U, 3479U, 9639U, 
    5801U, 11961U, 2555U, 8715U, 5096U, 11256U, 2807U, 8967U, 
    5312U, 11472U, 3627U, 9787U, 5949U, 12109U, 3054U, 9214U, 
    5456U, 11616U, 3811U, 9971U, 6133U, 12293U, 4424U, 10584U, 
    6499U, 12659U, 4826U, 10986U, 6775U, 12935U, 3883U, 10043U, 
    6205U, 12365U, 3385U, 9545U, 5707U, 11867U, 3269U, 9429U, 
    5621U, 11781U, 4288U, 10448U, 6378U, 12538U, 4705U, 10865U, 
    6654U, 12814U, 2682U, 8842U, 5207U, 11367U, 4226U, 10386U, 
    6345U, 12505U, 4643U, 10803U, 6621U, 12781U, 2446U, 8606U, 
    4987U, 11147U, 4121U, 10281U, 6240U, 12400U, 4538U, 10698U, 
    6516U, 12676U, 3518U, 9678U, 5840U, 12000U, 4338U, 10498U, 
    6413U, 12573U, 4740U, 10900U, 6689U, 12849U, 2594U, 8754U, 
    5135U, 11295U, 4156U, 10316U, 6275U, 12435U, 4573U, 10733U, 
    6551U, 12711U, 2846U, 9006U, 5351U, 11511U, 3666U, 9826U, 
    5988U, 12148U, 4373U, 10533U, 6448U, 12608U, 4775U, 10935U, 
    6724U, 12884U, 3193U, 9353U, 5545U, 11705U, 4191U, 10351U, 
    6310U, 12470U, 4608U, 10768U, 6586U, 12746U, 2370U, 8530U, 
    4911U, 11071U, 3442U, 9602U, 5764U, 11924U, 2518U, 8678U, 
    5059U, 11219U, 2770U, 8930U, 5275U, 11435U, 3590U, 9750U, 
    5912U, 12072U, 3021U, 9181U, 5423U, 11583U, 3774U, 9934U, 
    6096U, 12256U, 4408U, 10568U, 6483U, 12643U, 4810U, 10970U, 
    6759U, 12919U, 3850U, 10010U, 6172U, 12332U, 2050U, 8210U, 
    3371U, 9531U, 1125U, 1066U, 1089U, 1102U, 4075U, 10235U, 
    4490U, 10650U, 2252U, 8412U, 2288U, 8448U, 2270U, 8430U, 
    1166U, 7725U, 1182U, 7753U, 1138U, 7672U, 3179U, 9339U, 
    4259U, 10419U, 4676U, 10836U, 2068U, 8228U, 3355U, 9515U, 
    1079U, 7642U, 3426U, 9586U, 5748U, 11908U, 3738U, 9898U, 
    6060U, 12220U, 1210U, 1034U, 1050U, 3163U, 9323U, 7741U, 
    3103U, 9263U, 2918U, 9078U, 2202U, 8362U, 2083U, 8243U, 
    7479U, 2220U, 8380U, 2112U, 8272U, 7521U, 2326U, 8486U, 
    3949U, 10109U, 2932U, 9092U, 2948U, 9108U, 1115U, 7164U, 
    1227U, 7178U, 3935U, 10095U, 7768U, 4476U, 10636U, 4054U, 
    10214U, 4861U, 11021U, 1872U, 8032U, 1895U, 8055U, 2993U, 
    9153U, 7698U, 4274U, 10434U, 3991U, 10151U, 4691U, 10851U, 
    1936U, 8096U, 1968U, 8128U, 2154U, 8314U, 2238U, 8398U, 
    1918U, 8078U, 1197U, 2979U, 9139U, 7688U, 1379U, 1745U, 
    4875U, 11035U, 3970U, 10130U, 1469U, 1768U, 4893U, 11053U, 
    2172U, 8332U, 2141U, 8301U, 3123U, 9283U, 5505U, 11665U, 
    3089U, 9249U, 5491U, 11651U, 2750U, 8910U, 4012U, 10172U, 
    2026U, 8186U, 1987U, 8147U, 2666U, 8826U, 3143U, 9303U, 
    5525U, 11685U, 3341U, 9501U, 5693U, 11853U, 4033U, 10193U, 
    1624U, 3007U, 9167U, 3759U, 9919U, 6081U, 12241U, 4843U, 
    11003U, 4508U, 10668U, 3918U, 10078U, 4441U, 10601U, 2312U, 
    8472U, 7652U, 4093U, 10253U, 7708U, 2340U, 8500U, 2006U, 
    8166U, 2127U, 8287U, 14702U, 13677U, 128U, 15241U, 
};

static inline void InitAMDGPUMCInstrInfo(MCInstrInfo *II) {
  II->InitMCInstrInfo(AMDGPUInsts, AMDGPUInstrNameIndices, AMDGPUInstrNameData, 1071);
}

} // End llvm namespace 
#endif // GET_INSTRINFO_MC_DESC


#ifdef GET_INSTRINFO_HEADER
#undef GET_INSTRINFO_HEADER
namespace llvm {
struct AMDGPUGenInstrInfo : public TargetInstrInfo {
  explicit AMDGPUGenInstrInfo(int SO = -1, int DO = -1);
};
} // End llvm namespace 
#endif // GET_INSTRINFO_HEADER


#ifdef GET_INSTRINFO_CTOR
#undef GET_INSTRINFO_CTOR
namespace llvm {
extern const MCInstrDesc AMDGPUInsts[];
extern const unsigned AMDGPUInstrNameIndices[];
extern const char AMDGPUInstrNameData[];
AMDGPUGenInstrInfo::AMDGPUGenInstrInfo(int SO, int DO)
  : TargetInstrInfo(SO, DO) {
  InitMCInstrInfo(AMDGPUInsts, AMDGPUInstrNameIndices, AMDGPUInstrNameData, 1071);
}
} // End llvm namespace 
#endif // GET_INSTRINFO_CTOR

#ifdef GET_INSTRINFO_OPERAND_ENUM
#undef GET_INSTRINFO_OPERAND_ENUM
namespace llvm {namespace AMDGPU {
namespace OpName { 
enum {
  bank_swizzle = 20,
  clamp = 6,
  clamp_W = 81,
  clamp_X = 30,
  clamp_Y = 47,
  clamp_Z = 64,
  dst = 0,
  dst_rel = 5,
  dst_rel_W = 80,
  dst_rel_X = 29,
  dst_rel_Y = 46,
  dst_rel_Z = 63,
  last = 17,
  literal = 19,
  literal0 = 93,
  literal1 = 94,
  omod = 4,
  omod_W = 79,
  omod_X = 28,
  omod_Y = 45,
  omod_Z = 62,
  pred_sel = 18,
  pred_sel_W = 92,
  pred_sel_X = 41,
  pred_sel_Y = 58,
  pred_sel_Z = 75,
  src0 = 7,
  src0_W = 82,
  src0_X = 31,
  src0_Y = 48,
  src0_Z = 65,
  src0_abs = 10,
  src0_abs_W = 85,
  src0_abs_X = 34,
  src0_abs_Y = 51,
  src0_abs_Z = 68,
  src0_neg = 8,
  src0_neg_W = 83,
  src0_neg_X = 32,
  src0_neg_Y = 49,
  src0_neg_Z = 66,
  src0_rel = 9,
  src0_rel_W = 84,
  src0_rel_X = 33,
  src0_rel_Y = 50,
  src0_rel_Z = 67,
  src0_sel = 11,
  src0_sel_W = 86,
  src0_sel_X = 35,
  src0_sel_Y = 52,
  src0_sel_Z = 69,
  src1 = 12,
  src1_W = 87,
  src1_X = 36,
  src1_Y = 53,
  src1_Z = 70,
  src1_abs = 15,
  src1_abs_W = 90,
  src1_abs_X = 39,
  src1_abs_Y = 56,
  src1_abs_Z = 73,
  src1_neg = 13,
  src1_neg_W = 88,
  src1_neg_X = 37,
  src1_neg_Y = 54,
  src1_neg_Z = 71,
  src1_rel = 14,
  src1_rel_W = 89,
  src1_rel_X = 38,
  src1_rel_Y = 55,
  src1_rel_Z = 72,
  src1_sel = 16,
  src1_sel_W = 91,
  src1_sel_X = 40,
  src1_sel_Y = 57,
  src1_sel_Z = 74,
  src2 = 21,
  src2_neg = 22,
  src2_rel = 23,
  src2_sel = 24,
  update_exec_mask = 1,
  update_exec_mask_W = 76,
  update_exec_mask_X = 25,
  update_exec_mask_Y = 42,
  update_exec_mask_Z = 59,
  update_pred = 2,
  update_pred_W = 77,
  update_pred_X = 26,
  update_pred_Y = 43,
  update_pred_Z = 60,
  write = 3,
  write_W = 78,
  write_X = 27,
  write_Y = 44,
  write_Z = 61,
OPERAND_LAST
};
} // End namespace OpName
} // End namespace AMDGPU
} // End namespace llvm
#endif //GET_INSTRINFO_OPERAND_ENUM
#ifdef GET_INSTRINFO_NAMED_OPS
#undef GET_INSTRINFO_NAMED_OPS
namespace llvm {namespace AMDGPU {
int16_t getNamedOperandIdx(uint16_t Opcode, uint16_t NamedIdx) {
  static const int16_t OperandMap [][95] = {
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, },
{0, -1, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1, -1, -1, -1, 10, 11, 12, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, },
{0, -1, -1, -1, -1, 1, 2, 3, 4, 5, -1, 6, 7, 8, 9, -1, 10, 15, 16, 17, 18, 11, 12, 13, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, },
{0, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, },
{0, -1, -1, -1, -1, -1, -1, 1, -1, 2, -1, 3, -1, -1, -1, -1, -1, 4, 5, -1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, },
{0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, },
{-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, -1, 2, 3, -1, 4, -1, 5, 6, 7, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, },
};
  switch(Opcode) {
  case AMDGPU::ADD:
  case AMDGPU::ADD_INT:
  case AMDGPU::AND_INT:
  case AMDGPU::ASHR_eg:
  case AMDGPU::ASHR_r600:
  case AMDGPU::CUBE_eg_real:
  case AMDGPU::CUBE_r600_real:
  case AMDGPU::DOT4_eg:
  case AMDGPU::DOT4_r600:
  case AMDGPU::INTERP_XY:
  case AMDGPU::INTERP_ZW:
  case AMDGPU::KILLGT:
  case AMDGPU::LSHL_eg:
  case AMDGPU::LSHL_r600:
  case AMDGPU::LSHR_eg:
  case AMDGPU::LSHR_r600:
  case AMDGPU::MAX:
  case AMDGPU::MAX_INT:
  case AMDGPU::MAX_UINT:
  case AMDGPU::MIN:
  case AMDGPU::MIN_INT:
  case AMDGPU::MIN_UINT:
  case AMDGPU::MUL:
  case AMDGPU::MULHI_INT_cm:
  case AMDGPU::MULHI_INT_eg:
  case AMDGPU::MULHI_INT_r600:
  case AMDGPU::MULHI_UINT_cm:
  case AMDGPU::MULHI_UINT_eg:
  case AMDGPU::MULHI_UINT_r600:
  case AMDGPU::MULLO_INT_cm:
  case AMDGPU::MULLO_INT_eg:
  case AMDGPU::MULLO_INT_r600:
  case AMDGPU::MULLO_UINT_cm:
  case AMDGPU::MULLO_UINT_eg:
  case AMDGPU::MULLO_UINT_r600:
  case AMDGPU::MUL_IEEE:
  case AMDGPU::MUL_INT24_cm:
  case AMDGPU::MUL_UINT24_eg:
  case AMDGPU::OR_INT:
  case AMDGPU::PRED_SETE:
  case AMDGPU::PRED_SETE_INT:
  case AMDGPU::PRED_SETGE:
  case AMDGPU::PRED_SETGE_INT:
  case AMDGPU::PRED_SETGT:
  case AMDGPU::PRED_SETGT_INT:
  case AMDGPU::PRED_SETNE:
  case AMDGPU::PRED_SETNE_INT:
  case AMDGPU::SETE:
  case AMDGPU::SETE_DX10:
  case AMDGPU::SETE_INT:
  case AMDGPU::SETGE_DX10:
  case AMDGPU::SETGE_INT:
  case AMDGPU::SETGE_UINT:
  case AMDGPU::SETGT_DX10:
  case AMDGPU::SETGT_INT:
  case AMDGPU::SETGT_UINT:
  case AMDGPU::SETNE_DX10:
  case AMDGPU::SETNE_INT:
  case AMDGPU::SGE:
  case AMDGPU::SGT:
  case AMDGPU::SNE:
  case AMDGPU::SUB_INT:
  case AMDGPU::XOR_INT:
    return OperandMap[0][NamedIdx];
  case AMDGPU::CEIL:
  case AMDGPU::COS_cm:
  case AMDGPU::COS_eg:
  case AMDGPU::COS_r600:
  case AMDGPU::COS_r700:
  case AMDGPU::EXP_IEEE_cm:
  case AMDGPU::EXP_IEEE_eg:
  case AMDGPU::EXP_IEEE_r600:
  case AMDGPU::FLOOR:
  case AMDGPU::FLT_TO_INT_eg:
  case AMDGPU::FLT_TO_INT_r600:
  case AMDGPU::FLT_TO_UINT_eg:
  case AMDGPU::FLT_TO_UINT_r600:
  case AMDGPU::FRACT:
  case AMDGPU::INTERP_LOAD_P0:
  case AMDGPU::INT_TO_FLT_eg:
  case AMDGPU::INT_TO_FLT_r600:
  case AMDGPU::LOG_CLAMPED_eg:
  case AMDGPU::LOG_CLAMPED_r600:
  case AMDGPU::LOG_IEEE_cm:
  case AMDGPU::LOG_IEEE_eg:
  case AMDGPU::LOG_IEEE_r600:
  case AMDGPU::MOV:
  case AMDGPU::MOVA_INT_eg:
  case AMDGPU::NOT_INT:
  case AMDGPU::RECIPSQRT_CLAMPED_cm:
  case AMDGPU::RECIPSQRT_CLAMPED_eg:
  case AMDGPU::RECIPSQRT_CLAMPED_r600:
  case AMDGPU::RECIPSQRT_IEEE_cm:
  case AMDGPU::RECIPSQRT_IEEE_eg:
  case AMDGPU::RECIPSQRT_IEEE_r600:
  case AMDGPU::RECIP_CLAMPED_cm:
  case AMDGPU::RECIP_CLAMPED_eg:
  case AMDGPU::RECIP_CLAMPED_r600:
  case AMDGPU::RECIP_IEEE_cm:
  case AMDGPU::RECIP_IEEE_eg:
  case AMDGPU::RECIP_IEEE_r600:
  case AMDGPU::RECIP_UINT_eg:
  case AMDGPU::RECIP_UINT_r600:
  case AMDGPU::RNDNE:
  case AMDGPU::SIN_cm:
  case AMDGPU::SIN_eg:
  case AMDGPU::SIN_r600:
  case AMDGPU::SIN_r700:
  case AMDGPU::TRUNC:
  case AMDGPU::UINT_TO_FLT_eg:
  case AMDGPU::UINT_TO_FLT_r600:
    return OperandMap[1][NamedIdx];
  case AMDGPU::BFE_UINT_eg:
  case AMDGPU::BFI_INT_eg:
  case AMDGPU::BIT_ALIGN_INT_eg:
  case AMDGPU::CNDE_INT:
  case AMDGPU::CNDE_eg:
  case AMDGPU::CNDE_r600:
  case AMDGPU::CNDGE_INT:
  case AMDGPU::CNDGE_eg:
  case AMDGPU::CNDGE_r600:
  case AMDGPU::CNDGT_INT:
  case AMDGPU::CNDGT_eg:
  case AMDGPU::CNDGT_r600:
  case AMDGPU::MULADD_IEEE_eg:
  case AMDGPU::MULADD_IEEE_r600:
  case AMDGPU::MULADD_INT24_cm:
  case AMDGPU::MULADD_UINT24_eg:
  case AMDGPU::MULADD_eg:
  case AMDGPU::MULADD_r600:
  case AMDGPU::MUL_LIT_eg:
  case AMDGPU::MUL_LIT_r600:
    return OperandMap[2][NamedIdx];
  case AMDGPU::CUBE_eg_pseudo:
  case AMDGPU::CUBE_r600_pseudo:
    return OperandMap[3][NamedIdx];
  case AMDGPU::LDS_READ_RET:
    return OperandMap[4][NamedIdx];
  case AMDGPU::DOT_4:
    return OperandMap[5][NamedIdx];
  case AMDGPU::LDS_WRITE:
    return OperandMap[6][NamedIdx];
    default: return -1;
  }
}
} // End namespace AMDGPU
} // End namespace llvm
#endif //GET_INSTRINFO_NAMED_OPS
#ifdef GET_INSTRMAP_INFO
#undef GET_INSTRMAP_INFO
namespace llvm {

namespace AMDGPU {

enum IsOrig {
	IsOrig_1,
	IsOrig_0
};

enum Size {
	Size_8
};

// getCommuteOrig
int getCommuteOrig(uint16_t Opcode) {
static const uint16_t getCommuteOrigTable[][2] = {
  { AMDGPU::V_ASHRREV_I32_e32, AMDGPU::V_ASHR_I32_e32 },
  { AMDGPU::V_ASHRREV_I32_e64, AMDGPU::V_ASHR_I32_e64 },
  { AMDGPU::V_LSHLREV_B32_e32, AMDGPU::V_LSHL_B32_e32 },
  { AMDGPU::V_LSHLREV_B32_e64, AMDGPU::V_LSHL_B32_e64 },
  { AMDGPU::V_LSHRREV_B32_e32, AMDGPU::V_LSHR_B32_e32 },
  { AMDGPU::V_LSHRREV_B32_e64, AMDGPU::V_LSHR_B32_e64 },
  { AMDGPU::V_SUBBREV_U32_e32, AMDGPU::V_SUBB_U32_e32 },
  { AMDGPU::V_SUBBREV_U32_e64, AMDGPU::V_SUBB_U32_e64 },
  { AMDGPU::V_SUBREV_F32_e32, AMDGPU::V_SUB_F32_e32 },
  { AMDGPU::V_SUBREV_F32_e64, AMDGPU::V_SUB_F32_e64 },
  { AMDGPU::V_SUBREV_I32_e32, AMDGPU::V_SUB_I32_e32 },
  { AMDGPU::V_SUBREV_I32_e64, AMDGPU::V_SUB_I32_e64 },
}; // End of getCommuteOrigTable

  unsigned mid;
  unsigned start = 0;
  unsigned end = 12;
  while (start < end) {
    mid = start + (end - start)/2;
    if (Opcode == getCommuteOrigTable[mid][0]) {
      break;
    }
    if (Opcode < getCommuteOrigTable[mid][0])
      end = mid;
    else
      start = mid + 1;
  }
  if (start == end)
    return -1; // Instruction doesn't exist in this table.

  return getCommuteOrigTable[mid][1];
}

// getCommuteRev
int getCommuteRev(uint16_t Opcode) {
static const uint16_t getCommuteRevTable[][2] = {
  { AMDGPU::V_ASHR_I32_e32, AMDGPU::V_ASHRREV_I32_e32 },
  { AMDGPU::V_ASHR_I32_e64, AMDGPU::V_ASHRREV_I32_e64 },
  { AMDGPU::V_LSHL_B32_e32, AMDGPU::V_LSHLREV_B32_e32 },
  { AMDGPU::V_LSHL_B32_e64, AMDGPU::V_LSHLREV_B32_e64 },
  { AMDGPU::V_LSHR_B32_e32, AMDGPU::V_LSHRREV_B32_e32 },
  { AMDGPU::V_LSHR_B32_e64, AMDGPU::V_LSHRREV_B32_e64 },
  { AMDGPU::V_SUBB_U32_e32, AMDGPU::V_SUBBREV_U32_e32 },
  { AMDGPU::V_SUBB_U32_e64, AMDGPU::V_SUBBREV_U32_e64 },
  { AMDGPU::V_SUB_F32_e32, AMDGPU::V_SUBREV_F32_e32 },
  { AMDGPU::V_SUB_F32_e64, AMDGPU::V_SUBREV_F32_e64 },
  { AMDGPU::V_SUB_I32_e32, AMDGPU::V_SUBREV_I32_e32 },
  { AMDGPU::V_SUB_I32_e64, AMDGPU::V_SUBREV_I32_e64 },
}; // End of getCommuteRevTable

  unsigned mid;
  unsigned start = 0;
  unsigned end = 12;
  while (start < end) {
    mid = start + (end - start)/2;
    if (Opcode == getCommuteRevTable[mid][0]) {
      break;
    }
    if (Opcode < getCommuteRevTable[mid][0])
      end = mid;
    else
      start = mid + 1;
  }
  if (start == end)
    return -1; // Instruction doesn't exist in this table.

  return getCommuteRevTable[mid][1];
}

// getVOPe64
int getVOPe64(uint16_t Opcode) {
static const uint16_t getVOPe64Table[][2] = {
  { AMDGPU::V_ADDC_U32_e32, AMDGPU::V_ADDC_U32_e64 },
  { AMDGPU::V_ADD_F32_e32, AMDGPU::V_ADD_F32_e64 },
  { AMDGPU::V_ADD_I32_e32, AMDGPU::V_ADD_I32_e64 },
  { AMDGPU::V_AND_B32_e32, AMDGPU::V_AND_B32_e64 },
  { AMDGPU::V_ASHRREV_I32_e32, AMDGPU::V_ASHRREV_I32_e64 },
  { AMDGPU::V_ASHR_I32_e32, AMDGPU::V_ASHR_I32_e64 },
  { AMDGPU::V_BFM_B32_e32, AMDGPU::V_BFM_B32_e64 },
  { AMDGPU::V_BFREV_B32_e32, AMDGPU::V_BFREV_B32_e64 },
  { AMDGPU::V_CEIL_F32_e32, AMDGPU::V_CEIL_F32_e64 },
  { AMDGPU::V_CMPSX_EQ_F32_e32, AMDGPU::V_CMPSX_EQ_F32_e64 },
  { AMDGPU::V_CMPSX_EQ_F64_e32, AMDGPU::V_CMPSX_EQ_F64_e64 },
  { AMDGPU::V_CMPSX_F_F32_e32, AMDGPU::V_CMPSX_F_F32_e64 },
  { AMDGPU::V_CMPSX_F_F64_e32, AMDGPU::V_CMPSX_F_F64_e64 },
  { AMDGPU::V_CMPSX_GE_F32_e32, AMDGPU::V_CMPSX_GE_F32_e64 },
  { AMDGPU::V_CMPSX_GE_F64_e32, AMDGPU::V_CMPSX_GE_F64_e64 },
  { AMDGPU::V_CMPSX_GT_F32_e32, AMDGPU::V_CMPSX_GT_F32_e64 },
  { AMDGPU::V_CMPSX_GT_F64_e32, AMDGPU::V_CMPSX_GT_F64_e64 },
  { AMDGPU::V_CMPSX_LE_F32_e32, AMDGPU::V_CMPSX_LE_F32_e64 },
  { AMDGPU::V_CMPSX_LE_F64_e32, AMDGPU::V_CMPSX_LE_F64_e64 },
  { AMDGPU::V_CMPSX_LG_F32_e32, AMDGPU::V_CMPSX_LG_F32_e64 },
  { AMDGPU::V_CMPSX_LG_F64_e32, AMDGPU::V_CMPSX_LG_F64_e64 },
  { AMDGPU::V_CMPSX_LT_F32_e32, AMDGPU::V_CMPSX_LT_F32_e64 },
  { AMDGPU::V_CMPSX_LT_F64_e32, AMDGPU::V_CMPSX_LT_F64_e64 },
  { AMDGPU::V_CMPSX_NEQ_F32_e32, AMDGPU::V_CMPSX_NEQ_F32_e64 },
  { AMDGPU::V_CMPSX_NEQ_F64_e32, AMDGPU::V_CMPSX_NEQ_F64_e64 },
  { AMDGPU::V_CMPSX_NGE_F32_e32, AMDGPU::V_CMPSX_NGE_F32_e64 },
  { AMDGPU::V_CMPSX_NGE_F64_e32, AMDGPU::V_CMPSX_NGE_F64_e64 },
  { AMDGPU::V_CMPSX_NGT_F32_e32, AMDGPU::V_CMPSX_NGT_F32_e64 },
  { AMDGPU::V_CMPSX_NGT_F64_e32, AMDGPU::V_CMPSX_NGT_F64_e64 },
  { AMDGPU::V_CMPSX_NLE_F32_e32, AMDGPU::V_CMPSX_NLE_F32_e64 },
  { AMDGPU::V_CMPSX_NLE_F64_e32, AMDGPU::V_CMPSX_NLE_F64_e64 },
  { AMDGPU::V_CMPSX_NLG_F32_e32, AMDGPU::V_CMPSX_NLG_F32_e64 },
  { AMDGPU::V_CMPSX_NLG_F64_e32, AMDGPU::V_CMPSX_NLG_F64_e64 },
  { AMDGPU::V_CMPSX_NLT_F32_e32, AMDGPU::V_CMPSX_NLT_F32_e64 },
  { AMDGPU::V_CMPSX_NLT_F64_e32, AMDGPU::V_CMPSX_NLT_F64_e64 },
  { AMDGPU::V_CMPSX_O_F32_e32, AMDGPU::V_CMPSX_O_F32_e64 },
  { AMDGPU::V_CMPSX_O_F64_e32, AMDGPU::V_CMPSX_O_F64_e64 },
  { AMDGPU::V_CMPSX_TRU_F32_e32, AMDGPU::V_CMPSX_TRU_F32_e64 },
  { AMDGPU::V_CMPSX_TRU_F64_e32, AMDGPU::V_CMPSX_TRU_F64_e64 },
  { AMDGPU::V_CMPSX_U_F32_e32, AMDGPU::V_CMPSX_U_F32_e64 },
  { AMDGPU::V_CMPSX_U_F64_e32, AMDGPU::V_CMPSX_U_F64_e64 },
  { AMDGPU::V_CMPS_EQ_F32_e32, AMDGPU::V_CMPS_EQ_F32_e64 },
  { AMDGPU::V_CMPS_EQ_F64_e32, AMDGPU::V_CMPS_EQ_F64_e64 },
  { AMDGPU::V_CMPS_F_F32_e32, AMDGPU::V_CMPS_F_F32_e64 },
  { AMDGPU::V_CMPS_F_F64_e32, AMDGPU::V_CMPS_F_F64_e64 },
  { AMDGPU::V_CMPS_GE_F32_e32, AMDGPU::V_CMPS_GE_F32_e64 },
  { AMDGPU::V_CMPS_GE_F64_e32, AMDGPU::V_CMPS_GE_F64_e64 },
  { AMDGPU::V_CMPS_GT_F32_e32, AMDGPU::V_CMPS_GT_F32_e64 },
  { AMDGPU::V_CMPS_GT_F64_e32, AMDGPU::V_CMPS_GT_F64_e64 },
  { AMDGPU::V_CMPS_LE_F32_e32, AMDGPU::V_CMPS_LE_F32_e64 },
  { AMDGPU::V_CMPS_LE_F64_e32, AMDGPU::V_CMPS_LE_F64_e64 },
  { AMDGPU::V_CMPS_LG_F32_e32, AMDGPU::V_CMPS_LG_F32_e64 },
  { AMDGPU::V_CMPS_LG_F64_e32, AMDGPU::V_CMPS_LG_F64_e64 },
  { AMDGPU::V_CMPS_LT_F32_e32, AMDGPU::V_CMPS_LT_F32_e64 },
  { AMDGPU::V_CMPS_LT_F64_e32, AMDGPU::V_CMPS_LT_F64_e64 },
  { AMDGPU::V_CMPS_NEQ_F32_e32, AMDGPU::V_CMPS_NEQ_F32_e64 },
  { AMDGPU::V_CMPS_NEQ_F64_e32, AMDGPU::V_CMPS_NEQ_F64_e64 },
  { AMDGPU::V_CMPS_NGE_F32_e32, AMDGPU::V_CMPS_NGE_F32_e64 },
  { AMDGPU::V_CMPS_NGE_F64_e32, AMDGPU::V_CMPS_NGE_F64_e64 },
  { AMDGPU::V_CMPS_NGT_F32_e32, AMDGPU::V_CMPS_NGT_F32_e64 },
  { AMDGPU::V_CMPS_NGT_F64_e32, AMDGPU::V_CMPS_NGT_F64_e64 },
  { AMDGPU::V_CMPS_NLE_F32_e32, AMDGPU::V_CMPS_NLE_F32_e64 },
  { AMDGPU::V_CMPS_NLE_F64_e32, AMDGPU::V_CMPS_NLE_F64_e64 },
  { AMDGPU::V_CMPS_NLG_F32_e32, AMDGPU::V_CMPS_NLG_F32_e64 },
  { AMDGPU::V_CMPS_NLG_F64_e32, AMDGPU::V_CMPS_NLG_F64_e64 },
  { AMDGPU::V_CMPS_NLT_F32_e32, AMDGPU::V_CMPS_NLT_F32_e64 },
  { AMDGPU::V_CMPS_NLT_F64_e32, AMDGPU::V_CMPS_NLT_F64_e64 },
  { AMDGPU::V_CMPS_O_F32_e32, AMDGPU::V_CMPS_O_F32_e64 },
  { AMDGPU::V_CMPS_O_F64_e32, AMDGPU::V_CMPS_O_F64_e64 },
  { AMDGPU::V_CMPS_TRU_F32_e32, AMDGPU::V_CMPS_TRU_F32_e64 },
  { AMDGPU::V_CMPS_TRU_F64_e32, AMDGPU::V_CMPS_TRU_F64_e64 },
  { AMDGPU::V_CMPS_U_F32_e32, AMDGPU::V_CMPS_U_F32_e64 },
  { AMDGPU::V_CMPS_U_F64_e32, AMDGPU::V_CMPS_U_F64_e64 },
  { AMDGPU::V_CMPX_CLASS_F32_e32, AMDGPU::V_CMPX_CLASS_F32_e64 },
  { AMDGPU::V_CMPX_CLASS_F64_e32, AMDGPU::V_CMPX_CLASS_F64_e64 },
  { AMDGPU::V_CMPX_EQ_F32_e32, AMDGPU::V_CMPX_EQ_F32_e64 },
  { AMDGPU::V_CMPX_EQ_F64_e32, AMDGPU::V_CMPX_EQ_F64_e64 },
  { AMDGPU::V_CMPX_EQ_I32_e32, AMDGPU::V_CMPX_EQ_I32_e64 },
  { AMDGPU::V_CMPX_EQ_I64_e32, AMDGPU::V_CMPX_EQ_I64_e64 },
  { AMDGPU::V_CMPX_EQ_U32_e32, AMDGPU::V_CMPX_EQ_U32_e64 },
  { AMDGPU::V_CMPX_EQ_U64_e32, AMDGPU::V_CMPX_EQ_U64_e64 },
  { AMDGPU::V_CMPX_F_F32_e32, AMDGPU::V_CMPX_F_F32_e64 },
  { AMDGPU::V_CMPX_F_F64_e32, AMDGPU::V_CMPX_F_F64_e64 },
  { AMDGPU::V_CMPX_F_I32_e32, AMDGPU::V_CMPX_F_I32_e64 },
  { AMDGPU::V_CMPX_F_I64_e32, AMDGPU::V_CMPX_F_I64_e64 },
  { AMDGPU::V_CMPX_F_U32_e32, AMDGPU::V_CMPX_F_U32_e64 },
  { AMDGPU::V_CMPX_F_U64_e32, AMDGPU::V_CMPX_F_U64_e64 },
  { AMDGPU::V_CMPX_GE_F32_e32, AMDGPU::V_CMPX_GE_F32_e64 },
  { AMDGPU::V_CMPX_GE_F64_e32, AMDGPU::V_CMPX_GE_F64_e64 },
  { AMDGPU::V_CMPX_GE_I32_e32, AMDGPU::V_CMPX_GE_I32_e64 },
  { AMDGPU::V_CMPX_GE_I64_e32, AMDGPU::V_CMPX_GE_I64_e64 },
  { AMDGPU::V_CMPX_GE_U32_e32, AMDGPU::V_CMPX_GE_U32_e64 },
  { AMDGPU::V_CMPX_GE_U64_e32, AMDGPU::V_CMPX_GE_U64_e64 },
  { AMDGPU::V_CMPX_GT_F32_e32, AMDGPU::V_CMPX_GT_F32_e64 },
  { AMDGPU::V_CMPX_GT_F64_e32, AMDGPU::V_CMPX_GT_F64_e64 },
  { AMDGPU::V_CMPX_GT_I32_e32, AMDGPU::V_CMPX_GT_I32_e64 },
  { AMDGPU::V_CMPX_GT_I64_e32, AMDGPU::V_CMPX_GT_I64_e64 },
  { AMDGPU::V_CMPX_GT_U32_e32, AMDGPU::V_CMPX_GT_U32_e64 },
  { AMDGPU::V_CMPX_GT_U64_e32, AMDGPU::V_CMPX_GT_U64_e64 },
  { AMDGPU::V_CMPX_LE_F32_e32, AMDGPU::V_CMPX_LE_F32_e64 },
  { AMDGPU::V_CMPX_LE_F64_e32, AMDGPU::V_CMPX_LE_F64_e64 },
  { AMDGPU::V_CMPX_LE_I32_e32, AMDGPU::V_CMPX_LE_I32_e64 },
  { AMDGPU::V_CMPX_LE_I64_e32, AMDGPU::V_CMPX_LE_I64_e64 },
  { AMDGPU::V_CMPX_LE_U32_e32, AMDGPU::V_CMPX_LE_U32_e64 },
  { AMDGPU::V_CMPX_LE_U64_e32, AMDGPU::V_CMPX_LE_U64_e64 },
  { AMDGPU::V_CMPX_LG_F32_e32, AMDGPU::V_CMPX_LG_F32_e64 },
  { AMDGPU::V_CMPX_LG_F64_e32, AMDGPU::V_CMPX_LG_F64_e64 },
  { AMDGPU::V_CMPX_LT_F32_e32, AMDGPU::V_CMPX_LT_F32_e64 },
  { AMDGPU::V_CMPX_LT_F64_e32, AMDGPU::V_CMPX_LT_F64_e64 },
  { AMDGPU::V_CMPX_LT_I32_e32, AMDGPU::V_CMPX_LT_I32_e64 },
  { AMDGPU::V_CMPX_LT_I64_e32, AMDGPU::V_CMPX_LT_I64_e64 },
  { AMDGPU::V_CMPX_LT_U32_e32, AMDGPU::V_CMPX_LT_U32_e64 },
  { AMDGPU::V_CMPX_LT_U64_e32, AMDGPU::V_CMPX_LT_U64_e64 },
  { AMDGPU::V_CMPX_NEQ_F32_e32, AMDGPU::V_CMPX_NEQ_F32_e64 },
  { AMDGPU::V_CMPX_NEQ_F64_e32, AMDGPU::V_CMPX_NEQ_F64_e64 },
  { AMDGPU::V_CMPX_NE_I32_e32, AMDGPU::V_CMPX_NE_I32_e64 },
  { AMDGPU::V_CMPX_NE_I64_e32, AMDGPU::V_CMPX_NE_I64_e64 },
  { AMDGPU::V_CMPX_NE_U32_e32, AMDGPU::V_CMPX_NE_U32_e64 },
  { AMDGPU::V_CMPX_NE_U64_e32, AMDGPU::V_CMPX_NE_U64_e64 },
  { AMDGPU::V_CMPX_NGE_F32_e32, AMDGPU::V_CMPX_NGE_F32_e64 },
  { AMDGPU::V_CMPX_NGE_F64_e32, AMDGPU::V_CMPX_NGE_F64_e64 },
  { AMDGPU::V_CMPX_NGT_F32_e32, AMDGPU::V_CMPX_NGT_F32_e64 },
  { AMDGPU::V_CMPX_NGT_F64_e32, AMDGPU::V_CMPX_NGT_F64_e64 },
  { AMDGPU::V_CMPX_NLE_F32_e32, AMDGPU::V_CMPX_NLE_F32_e64 },
  { AMDGPU::V_CMPX_NLE_F64_e32, AMDGPU::V_CMPX_NLE_F64_e64 },
  { AMDGPU::V_CMPX_NLG_F32_e32, AMDGPU::V_CMPX_NLG_F32_e64 },
  { AMDGPU::V_CMPX_NLG_F64_e32, AMDGPU::V_CMPX_NLG_F64_e64 },
  { AMDGPU::V_CMPX_NLT_F32_e32, AMDGPU::V_CMPX_NLT_F32_e64 },
  { AMDGPU::V_CMPX_NLT_F64_e32, AMDGPU::V_CMPX_NLT_F64_e64 },
  { AMDGPU::V_CMPX_O_F32_e32, AMDGPU::V_CMPX_O_F32_e64 },
  { AMDGPU::V_CMPX_O_F64_e32, AMDGPU::V_CMPX_O_F64_e64 },
  { AMDGPU::V_CMPX_TRU_F32_e32, AMDGPU::V_CMPX_TRU_F32_e64 },
  { AMDGPU::V_CMPX_TRU_F64_e32, AMDGPU::V_CMPX_TRU_F64_e64 },
  { AMDGPU::V_CMPX_T_I32_e32, AMDGPU::V_CMPX_T_I32_e64 },
  { AMDGPU::V_CMPX_T_I64_e32, AMDGPU::V_CMPX_T_I64_e64 },
  { AMDGPU::V_CMPX_T_U32_e32, AMDGPU::V_CMPX_T_U32_e64 },
  { AMDGPU::V_CMPX_T_U64_e32, AMDGPU::V_CMPX_T_U64_e64 },
  { AMDGPU::V_CMPX_U_F32_e32, AMDGPU::V_CMPX_U_F32_e64 },
  { AMDGPU::V_CMPX_U_F64_e32, AMDGPU::V_CMPX_U_F64_e64 },
  { AMDGPU::V_CMP_CLASS_F32_e32, AMDGPU::V_CMP_CLASS_F32_e64 },
  { AMDGPU::V_CMP_CLASS_F64_e32, AMDGPU::V_CMP_CLASS_F64_e64 },
  { AMDGPU::V_CMP_EQ_F32_e32, AMDGPU::V_CMP_EQ_F32_e64 },
  { AMDGPU::V_CMP_EQ_F64_e32, AMDGPU::V_CMP_EQ_F64_e64 },
  { AMDGPU::V_CMP_EQ_I32_e32, AMDGPU::V_CMP_EQ_I32_e64 },
  { AMDGPU::V_CMP_EQ_I64_e32, AMDGPU::V_CMP_EQ_I64_e64 },
  { AMDGPU::V_CMP_EQ_U32_e32, AMDGPU::V_CMP_EQ_U32_e64 },
  { AMDGPU::V_CMP_EQ_U64_e32, AMDGPU::V_CMP_EQ_U64_e64 },
  { AMDGPU::V_CMP_F_F32_e32, AMDGPU::V_CMP_F_F32_e64 },
  { AMDGPU::V_CMP_F_F64_e32, AMDGPU::V_CMP_F_F64_e64 },
  { AMDGPU::V_CMP_F_I32_e32, AMDGPU::V_CMP_F_I32_e64 },
  { AMDGPU::V_CMP_F_I64_e32, AMDGPU::V_CMP_F_I64_e64 },
  { AMDGPU::V_CMP_F_U32_e32, AMDGPU::V_CMP_F_U32_e64 },
  { AMDGPU::V_CMP_F_U64_e32, AMDGPU::V_CMP_F_U64_e64 },
  { AMDGPU::V_CMP_GE_F32_e32, AMDGPU::V_CMP_GE_F32_e64 },
  { AMDGPU::V_CMP_GE_F64_e32, AMDGPU::V_CMP_GE_F64_e64 },
  { AMDGPU::V_CMP_GE_I32_e32, AMDGPU::V_CMP_GE_I32_e64 },
  { AMDGPU::V_CMP_GE_I64_e32, AMDGPU::V_CMP_GE_I64_e64 },
  { AMDGPU::V_CMP_GE_U32_e32, AMDGPU::V_CMP_GE_U32_e64 },
  { AMDGPU::V_CMP_GE_U64_e32, AMDGPU::V_CMP_GE_U64_e64 },
  { AMDGPU::V_CMP_GT_F32_e32, AMDGPU::V_CMP_GT_F32_e64 },
  { AMDGPU::V_CMP_GT_F64_e32, AMDGPU::V_CMP_GT_F64_e64 },
  { AMDGPU::V_CMP_GT_I32_e32, AMDGPU::V_CMP_GT_I32_e64 },
  { AMDGPU::V_CMP_GT_I64_e32, AMDGPU::V_CMP_GT_I64_e64 },
  { AMDGPU::V_CMP_GT_U32_e32, AMDGPU::V_CMP_GT_U32_e64 },
  { AMDGPU::V_CMP_GT_U64_e32, AMDGPU::V_CMP_GT_U64_e64 },
  { AMDGPU::V_CMP_LE_F32_e32, AMDGPU::V_CMP_LE_F32_e64 },
  { AMDGPU::V_CMP_LE_F64_e32, AMDGPU::V_CMP_LE_F64_e64 },
  { AMDGPU::V_CMP_LE_I32_e32, AMDGPU::V_CMP_LE_I32_e64 },
  { AMDGPU::V_CMP_LE_I64_e32, AMDGPU::V_CMP_LE_I64_e64 },
  { AMDGPU::V_CMP_LE_U32_e32, AMDGPU::V_CMP_LE_U32_e64 },
  { AMDGPU::V_CMP_LE_U64_e32, AMDGPU::V_CMP_LE_U64_e64 },
  { AMDGPU::V_CMP_LG_F32_e32, AMDGPU::V_CMP_LG_F32_e64 },
  { AMDGPU::V_CMP_LG_F64_e32, AMDGPU::V_CMP_LG_F64_e64 },
  { AMDGPU::V_CMP_LT_F32_e32, AMDGPU::V_CMP_LT_F32_e64 },
  { AMDGPU::V_CMP_LT_F64_e32, AMDGPU::V_CMP_LT_F64_e64 },
  { AMDGPU::V_CMP_LT_I32_e32, AMDGPU::V_CMP_LT_I32_e64 },
  { AMDGPU::V_CMP_LT_I64_e32, AMDGPU::V_CMP_LT_I64_e64 },
  { AMDGPU::V_CMP_LT_U32_e32, AMDGPU::V_CMP_LT_U32_e64 },
  { AMDGPU::V_CMP_LT_U64_e32, AMDGPU::V_CMP_LT_U64_e64 },
  { AMDGPU::V_CMP_NEQ_F32_e32, AMDGPU::V_CMP_NEQ_F32_e64 },
  { AMDGPU::V_CMP_NEQ_F64_e32, AMDGPU::V_CMP_NEQ_F64_e64 },
  { AMDGPU::V_CMP_NE_I32_e32, AMDGPU::V_CMP_NE_I32_e64 },
  { AMDGPU::V_CMP_NE_I64_e32, AMDGPU::V_CMP_NE_I64_e64 },
  { AMDGPU::V_CMP_NE_U32_e32, AMDGPU::V_CMP_NE_U32_e64 },
  { AMDGPU::V_CMP_NE_U64_e32, AMDGPU::V_CMP_NE_U64_e64 },
  { AMDGPU::V_CMP_NGE_F32_e32, AMDGPU::V_CMP_NGE_F32_e64 },
  { AMDGPU::V_CMP_NGE_F64_e32, AMDGPU::V_CMP_NGE_F64_e64 },
  { AMDGPU::V_CMP_NGT_F32_e32, AMDGPU::V_CMP_NGT_F32_e64 },
  { AMDGPU::V_CMP_NGT_F64_e32, AMDGPU::V_CMP_NGT_F64_e64 },
  { AMDGPU::V_CMP_NLE_F32_e32, AMDGPU::V_CMP_NLE_F32_e64 },
  { AMDGPU::V_CMP_NLE_F64_e32, AMDGPU::V_CMP_NLE_F64_e64 },
  { AMDGPU::V_CMP_NLG_F32_e32, AMDGPU::V_CMP_NLG_F32_e64 },
  { AMDGPU::V_CMP_NLG_F64_e32, AMDGPU::V_CMP_NLG_F64_e64 },
  { AMDGPU::V_CMP_NLT_F32_e32, AMDGPU::V_CMP_NLT_F32_e64 },
  { AMDGPU::V_CMP_NLT_F64_e32, AMDGPU::V_CMP_NLT_F64_e64 },
  { AMDGPU::V_CMP_O_F32_e32, AMDGPU::V_CMP_O_F32_e64 },
  { AMDGPU::V_CMP_O_F64_e32, AMDGPU::V_CMP_O_F64_e64 },
  { AMDGPU::V_CMP_TRU_F32_e32, AMDGPU::V_CMP_TRU_F32_e64 },
  { AMDGPU::V_CMP_TRU_F64_e32, AMDGPU::V_CMP_TRU_F64_e64 },
  { AMDGPU::V_CMP_T_I32_e32, AMDGPU::V_CMP_T_I32_e64 },
  { AMDGPU::V_CMP_T_I64_e32, AMDGPU::V_CMP_T_I64_e64 },
  { AMDGPU::V_CMP_T_U32_e32, AMDGPU::V_CMP_T_U32_e64 },
  { AMDGPU::V_CMP_T_U64_e32, AMDGPU::V_CMP_T_U64_e64 },
  { AMDGPU::V_CMP_U_F32_e32, AMDGPU::V_CMP_U_F32_e64 },
  { AMDGPU::V_CMP_U_F64_e32, AMDGPU::V_CMP_U_F64_e64 },
  { AMDGPU::V_COS_F32_e32, AMDGPU::V_COS_F32_e64 },
  { AMDGPU::V_CVT_F32_I32_e32, AMDGPU::V_CVT_F32_I32_e64 },
  { AMDGPU::V_CVT_F32_U32_e32, AMDGPU::V_CVT_F32_U32_e64 },
  { AMDGPU::V_CVT_I32_F32_e32, AMDGPU::V_CVT_I32_F32_e64 },
  { AMDGPU::V_CVT_PKRTZ_F16_F32_e32, AMDGPU::V_CVT_PKRTZ_F16_F32_e64 },
  { AMDGPU::V_CVT_U32_F32_e32, AMDGPU::V_CVT_U32_F32_e64 },
  { AMDGPU::V_EXP_F32_e32, AMDGPU::V_EXP_F32_e64 },
  { AMDGPU::V_FFBH_I32_e32, AMDGPU::V_FFBH_I32_e64 },
  { AMDGPU::V_FFBH_U32_e32, AMDGPU::V_FFBH_U32_e64 },
  { AMDGPU::V_FFBL_B32_e32, AMDGPU::V_FFBL_B32_e64 },
  { AMDGPU::V_FLOOR_F32_e32, AMDGPU::V_FLOOR_F32_e64 },
  { AMDGPU::V_FRACT_F32_e32, AMDGPU::V_FRACT_F32_e64 },
  { AMDGPU::V_FRACT_F64_e32, AMDGPU::V_FRACT_F64_e64 },
  { AMDGPU::V_FREXP_MANT_F32_e32, AMDGPU::V_FREXP_MANT_F32_e64 },
  { AMDGPU::V_FREXP_MANT_F64_e32, AMDGPU::V_FREXP_MANT_F64_e64 },
  { AMDGPU::V_LDEXP_F32_e32, AMDGPU::V_LDEXP_F32_e64 },
  { AMDGPU::V_LOG_CLAMP_F32_e32, AMDGPU::V_LOG_CLAMP_F32_e64 },
  { AMDGPU::V_LOG_F32_e32, AMDGPU::V_LOG_F32_e64 },
  { AMDGPU::V_LSHLREV_B32_e32, AMDGPU::V_LSHLREV_B32_e64 },
  { AMDGPU::V_LSHL_B32_e32, AMDGPU::V_LSHL_B32_e64 },
  { AMDGPU::V_LSHRREV_B32_e32, AMDGPU::V_LSHRREV_B32_e64 },
  { AMDGPU::V_LSHR_B32_e32, AMDGPU::V_LSHR_B32_e64 },
  { AMDGPU::V_MAC_F32_e32, AMDGPU::V_MAC_F32_e64 },
  { AMDGPU::V_MAC_LEGACY_F32_e32, AMDGPU::V_MAC_LEGACY_F32_e64 },
  { AMDGPU::V_MADAK_F32_e32, AMDGPU::V_MADAK_F32_e64 },
  { AMDGPU::V_MADMK_F32_e32, AMDGPU::V_MADMK_F32_e64 },
  { AMDGPU::V_MAX_F32_e32, AMDGPU::V_MAX_F32_e64 },
  { AMDGPU::V_MAX_I32_e32, AMDGPU::V_MAX_I32_e64 },
  { AMDGPU::V_MAX_LEGACY_F32_e32, AMDGPU::V_MAX_LEGACY_F32_e64 },
  { AMDGPU::V_MAX_U32_e32, AMDGPU::V_MAX_U32_e64 },
  { AMDGPU::V_MBCNT_HI_U32_B32_e32, AMDGPU::V_MBCNT_HI_U32_B32_e64 },
  { AMDGPU::V_MBCNT_LO_U32_B32_e32, AMDGPU::V_MBCNT_LO_U32_B32_e64 },
  { AMDGPU::V_MIN_F32_e32, AMDGPU::V_MIN_F32_e64 },
  { AMDGPU::V_MIN_I32_e32, AMDGPU::V_MIN_I32_e64 },
  { AMDGPU::V_MIN_LEGACY_F32_e32, AMDGPU::V_MIN_LEGACY_F32_e64 },
  { AMDGPU::V_MIN_U32_e32, AMDGPU::V_MIN_U32_e64 },
  { AMDGPU::V_MOVRELD_B32_e32, AMDGPU::V_MOVRELD_B32_e64 },
  { AMDGPU::V_MOVRELSD_B32_e32, AMDGPU::V_MOVRELSD_B32_e64 },
  { AMDGPU::V_MOVRELS_B32_e32, AMDGPU::V_MOVRELS_B32_e64 },
  { AMDGPU::V_MOV_B32_e32, AMDGPU::V_MOV_B32_e64 },
  { AMDGPU::V_MOV_FED_B32_e32, AMDGPU::V_MOV_FED_B32_e64 },
  { AMDGPU::V_MUL_F32_e32, AMDGPU::V_MUL_F32_e64 },
  { AMDGPU::V_MUL_I32_I24_e32, AMDGPU::V_MUL_I32_I24_e64 },
  { AMDGPU::V_MUL_LEGACY_F32_e32, AMDGPU::V_MUL_LEGACY_F32_e64 },
  { AMDGPU::V_MUL_U32_U24_e32, AMDGPU::V_MUL_U32_U24_e64 },
  { AMDGPU::V_NOT_B32_e32, AMDGPU::V_NOT_B32_e64 },
  { AMDGPU::V_OR_B32_e32, AMDGPU::V_OR_B32_e64 },
  { AMDGPU::V_RCP_CLAMP_F32_e32, AMDGPU::V_RCP_CLAMP_F32_e64 },
  { AMDGPU::V_RCP_CLAMP_F64_e32, AMDGPU::V_RCP_CLAMP_F64_e64 },
  { AMDGPU::V_RCP_F32_e32, AMDGPU::V_RCP_F32_e64 },
  { AMDGPU::V_RCP_F64_e32, AMDGPU::V_RCP_F64_e64 },
  { AMDGPU::V_RCP_IFLAG_F32_e32, AMDGPU::V_RCP_IFLAG_F32_e64 },
  { AMDGPU::V_RCP_LEGACY_F32_e32, AMDGPU::V_RCP_LEGACY_F32_e64 },
  { AMDGPU::V_READFIRSTLANE_B32_e32, AMDGPU::V_READFIRSTLANE_B32_e64 },
  { AMDGPU::V_READLANE_B32_e32, AMDGPU::V_READLANE_B32_e64 },
  { AMDGPU::V_RNDNE_F32_e32, AMDGPU::V_RNDNE_F32_e64 },
  { AMDGPU::V_RSQ_CLAMP_F32_e32, AMDGPU::V_RSQ_CLAMP_F32_e64 },
  { AMDGPU::V_RSQ_CLAMP_F64_e32, AMDGPU::V_RSQ_CLAMP_F64_e64 },
  { AMDGPU::V_RSQ_F32_e32, AMDGPU::V_RSQ_F32_e64 },
  { AMDGPU::V_RSQ_F64_e32, AMDGPU::V_RSQ_F64_e64 },
  { AMDGPU::V_RSQ_LEGACY_F32_e32, AMDGPU::V_RSQ_LEGACY_F32_e64 },
  { AMDGPU::V_SIN_F32_e32, AMDGPU::V_SIN_F32_e64 },
  { AMDGPU::V_SQRT_F32_e32, AMDGPU::V_SQRT_F32_e64 },
  { AMDGPU::V_SQRT_F64_e32, AMDGPU::V_SQRT_F64_e64 },
  { AMDGPU::V_SUBBREV_U32_e32, AMDGPU::V_SUBBREV_U32_e64 },
  { AMDGPU::V_SUBB_U32_e32, AMDGPU::V_SUBB_U32_e64 },
  { AMDGPU::V_SUBREV_F32_e32, AMDGPU::V_SUBREV_F32_e64 },
  { AMDGPU::V_SUBREV_I32_e32, AMDGPU::V_SUBREV_I32_e64 },
  { AMDGPU::V_SUB_F32_e32, AMDGPU::V_SUB_F32_e64 },
  { AMDGPU::V_SUB_I32_e32, AMDGPU::V_SUB_I32_e64 },
  { AMDGPU::V_TRUNC_F32_e32, AMDGPU::V_TRUNC_F32_e64 },
  { AMDGPU::V_WRITELANE_B32_e32, AMDGPU::V_WRITELANE_B32_e64 },
  { AMDGPU::V_XOR_B32_e32, AMDGPU::V_XOR_B32_e64 },
}; // End of getVOPe64Table

  unsigned mid;
  unsigned start = 0;
  unsigned end = 278;
  while (start < end) {
    mid = start + (end - start)/2;
    if (Opcode == getVOPe64Table[mid][0]) {
      break;
    }
    if (Opcode < getVOPe64Table[mid][0])
      end = mid;
    else
      start = mid + 1;
  }
  if (start == end)
    return -1; // Instruction doesn't exist in this table.

  return getVOPe64Table[mid][1];
}

// isMIMG
int isMIMG(uint16_t Opcode) {
static const uint16_t isMIMGTable[][2] = {
  { AMDGPU::IMAGE_GET_RESINFO, AMDGPU::IMAGE_GET_RESINFO },
  { AMDGPU::IMAGE_LOAD_MIP, AMDGPU::IMAGE_LOAD_MIP },
  { AMDGPU::IMAGE_SAMPLE, AMDGPU::IMAGE_SAMPLE },
  { AMDGPU::IMAGE_SAMPLE_B, AMDGPU::IMAGE_SAMPLE_B },
  { AMDGPU::IMAGE_SAMPLE_C, AMDGPU::IMAGE_SAMPLE_C },
  { AMDGPU::IMAGE_SAMPLE_C_B, AMDGPU::IMAGE_SAMPLE_C_B },
  { AMDGPU::IMAGE_SAMPLE_C_D, AMDGPU::IMAGE_SAMPLE_C_D },
  { AMDGPU::IMAGE_SAMPLE_C_L, AMDGPU::IMAGE_SAMPLE_C_L },
  { AMDGPU::IMAGE_SAMPLE_D, AMDGPU::IMAGE_SAMPLE_D },
  { AMDGPU::IMAGE_SAMPLE_L, AMDGPU::IMAGE_SAMPLE_L },
}; // End of isMIMGTable

  unsigned mid;
  unsigned start = 0;
  unsigned end = 10;
  while (start < end) {
    mid = start + (end - start)/2;
    if (Opcode == isMIMGTable[mid][0]) {
      break;
    }
    if (Opcode < isMIMGTable[mid][0])
      end = mid;
    else
      start = mid + 1;
  }
  if (start == end)
    return -1; // Instruction doesn't exist in this table.

  return isMIMGTable[mid][1];
}

} // End AMDGPU namespace
} // End llvm namespace
#endif // GET_INSTRMAP_INFO

